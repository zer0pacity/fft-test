
fft-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131f0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a40  080133f0  080133f0  000143f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026e30  08026e30  00028318  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08026e30  08026e30  00027e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026e38  08026e38  00028318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026e38  08026e38  00027e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026e3c  08026e3c  00027e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08026e40  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d8  08027018  000281d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000278  080270b8  00028278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009420  20000318  08027158  00028318  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20009738  08027158  00028738  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00028318  2**0
                  CONTENTS, READONLY
 14 .debug_info   00035506  00000000  00000000  00028346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006742  00000000  00000000  0005d84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002cb8  00000000  00000000  00063f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002295  00000000  00000000  00066c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003abab  00000000  00000000  00068edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003a4b1  00000000  00000000  000a3a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0015276b  00000000  00000000  000ddf39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002306a4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ce30  00000000  00000000  002306e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000a4  00000000  00000000  0023d518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000318 	.word	0x20000318
 800021c:	00000000 	.word	0x00000000
 8000220:	080133d8 	.word	0x080133d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000031c 	.word	0x2000031c
 800023c:	080133d8 	.word	0x080133d8

08000240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000242:	2b01      	cmp	r3, #1
	IT       LS
 8000244:	bf98      	it	ls
	BXLS     lr
 8000246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800024c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800025e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800026e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800028a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800029c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800029e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80002aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002ac:	2b01      	cmp	r3, #1
	IT       LS
 80002ae:	bf98      	it	ls
	BXLS     lr
 80002b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4a07      	ldr	r2, [pc, #28]	@ (800073c <vApplicationGetIdleTaskMemory+0x2c>)
 8000720:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4a06      	ldr	r2, [pc, #24]	@ (8000740 <vApplicationGetIdleTaskMemory+0x30>)
 8000726:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2280      	movs	r2, #128	@ 0x80
 800072c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000334 	.word	0x20000334
 8000740:	2000038c 	.word	0x2000038c

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	b094      	sub	sp, #80	@ 0x50
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	/* init variables */
	const int nSamp = smpRate * smpTime;
 800074a:	eddf 7a79 	vldr	s15, [pc, #484]	@ 8000930 <main+0x1ec>
 800074e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000752:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8000934 <main+0x1f0>
 8000756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800075a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800075e:	ee17 3a90 	vmov	r3, s15
 8000762:	63bb      	str	r3, [r7, #56]	@ 0x38
	int alloc_size = sizeof(float);
 8000764:	2304      	movs	r3, #4
 8000766:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (nSamp < MAX_BUF){
 8000768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800076a:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800076e:	da05      	bge.n	800077c <main+0x38>
		alloc_size *= nSamp;
 8000770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000772:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000774:	fb02 f303 	mul.w	r3, r2, r3
 8000778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800077a:	e00a      	b.n	8000792 <main+0x4e>
	}
	else{
		printf("Sample count resized to %d due to size limitations\n", MAX_BUF);
 800077c:	f44f 417a 	mov.w	r1, #64000	@ 0xfa00
 8000780:	486d      	ldr	r0, [pc, #436]	@ (8000938 <main+0x1f4>)
 8000782:	f010 f9b5 	bl	8010af0 <iprintf>
		alloc_size *= MAX_BUF;
 8000786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000788:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 800078c:	fb02 f303 	mul.w	r3, r2, r3
 8000790:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

	/* generating input signal*/
	float* input = (float*)malloc(alloc_size);
 8000792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000794:	4618      	mov	r0, r3
 8000796:	f00f fbff 	bl	800ff98 <malloc>
 800079a:	4603      	mov	r3, r0
 800079c:	637b      	str	r3, [r7, #52]	@ 0x34
	float* output = (float*)malloc(alloc_size);
 800079e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00f fbf9 	bl	800ff98 <malloc>
 80007a6:	4603      	mov	r3, r0
 80007a8:	633b      	str	r3, [r7, #48]	@ 0x30
	for(int i = 0; i < nSamp; i++){
 80007aa:	2300      	movs	r3, #0
 80007ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80007ae:	e021      	b.n	80007f4 <main+0xb0>
		float* x = input + sizeof(float) * i;
 80007b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007b6:	4413      	add	r3, r2
 80007b8:	623b      	str	r3, [r7, #32]
		*x = sin(2 * PI * inputFreq * i); // x = sin(wt)
 80007ba:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 800093c <main+0x1f8>
 80007be:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8000940 <main+0x1fc>
 80007c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007d8:	eeb0 0b47 	vmov.f64	d0, d7
 80007dc:	f012 f83c 	bl	8012858 <sin>
 80007e0:	eeb0 7b40 	vmov.f64	d7, d0
 80007e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < nSamp; i++){
 80007ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007f0:	3301      	adds	r3, #1
 80007f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80007f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80007f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbd9      	blt.n	80007b0 <main+0x6c>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f005 fa68 	bl	8005cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f8a6 	bl	8000950 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000804:	f000 f920 	bl	8000a48 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f001 f9b0 	bl	8001b6c <MX_GPIO_Init>
  MX_ADC1_Init();
 800080c:	f000 f946 	bl	8000a9c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000810:	f000 f996 	bl	8000b40 <MX_ADC3_Init>
  MX_CRC_Init();
 8000814:	f000 f9e6 	bl	8000be4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000818:	f000 fa06 	bl	8000c28 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800081c:	f000 fa3c 	bl	8000c98 <MX_DSIHOST_DSI_Init>
  MX_ETH_Init();
 8000820:	f000 fb3a 	bl	8000e98 <MX_ETH_Init>
  MX_FMC_Init();
 8000824:	f001 f952 	bl	8001acc <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 8000828:	f000 fb84 	bl	8000f34 <MX_HDMI_CEC_Init>
  MX_I2C1_Init();
 800082c:	f000 fbb6 	bl	8000f9c <MX_I2C1_Init>
  MX_I2C4_Init();
 8000830:	f000 fbf4 	bl	800101c <MX_I2C4_Init>
  MX_IWDG_Init();
 8000834:	f000 fc32 	bl	800109c <MX_IWDG_Init>
  MX_LTDC_Init();
 8000838:	f000 fc4e 	bl	80010d8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800083c:	f000 fcca 	bl	80011d4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000840:	f000 fcf4 	bl	800122c <MX_RTC_Init>
  MX_SAI1_Init();
 8000844:	f000 fd8e 	bl	8001364 <MX_SAI1_Init>
  MX_SAI2_Init();
 8000848:	f000 fe34 	bl	80014b4 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800084c:	f000 fe5e 	bl	800150c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000850:	f000 fe8e 	bl	8001570 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000854:	f000 fec8 	bl	80015e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000858:	f000 ff1a 	bl	8001690 <MX_TIM3_Init>
  MX_TIM10_Init();
 800085c:	f000 ff72 	bl	8001744 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000860:	f000 ffbe 	bl	80017e0 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000864:	f001 f80a 	bl	800187c <MX_TIM12_Init>
  MX_UART5_Init();
 8000868:	f001 f84e 	bl	8001908 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800086c:	f001 f87c 	bl	8001968 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000870:	f001 f8aa 	bl	80019c8 <MX_USART6_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000874:	f001 f8d8 	bl	8001a28 <MX_USB_OTG_HS_PCD_Init>
  MX_WWDG_Init();
 8000878:	f001 f908 	bl	8001a8c <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
  arm_rfft_fast_instance_f32 *fInst;
  arm_rfft_fast_init_f32(fInst, (1 << fftResBits));
 800087c:	2308      	movs	r3, #8
 800087e:	2201      	movs	r2, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	b29b      	uxth	r3, r3
 8000886:	4619      	mov	r1, r3
 8000888:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800088a:	f005 f93f 	bl	8005b0c <arm_rfft_fast_init_f32>
  arm_rfft_fast_f32(fInst, input, output, 0);
 800088e:	2300      	movs	r3, #0
 8000890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000892:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000894:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000896:	f005 f90b 	bl	8005ab0 <arm_rfft_fast_f32>

  int mIdx;
  float mVal;
  for(int i = 0; i < nSamp; i++){
 800089a:	2300      	movs	r3, #0
 800089c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800089e:	e016      	b.n	80008ce <main+0x18a>
	  float *x = output + sizeof(float) * i;
 80008a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80008a6:	4413      	add	r3, r2
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
	  if(mVal < *x){
 80008aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ac:	edd3 7a00 	vldr	s15, [r3]
 80008b0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80008b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008bc:	d504      	bpl.n	80008c8 <main+0x184>
		  mVal = *x;
 80008be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	643b      	str	r3, [r7, #64]	@ 0x40
		  mIdx = i;
 80008c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008c6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(int i = 0; i < nSamp; i++){
 80008c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008ca:	3301      	adds	r3, #1
 80008cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80008ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80008d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbe4      	blt.n	80008a0 <main+0x15c>
	  }
  }

  float ans = smpRate * (mIdx + 1) / nSamp;
 80008d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008d8:	3301      	adds	r3, #1
 80008da:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80008de:	fb03 f202 	mul.w	r2, r3, r2
 80008e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  printf("FFT peak at %f\n", ans);
 80008f4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80008f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008fc:	ec53 2b17 	vmov	r2, r3, d7
 8000900:	4810      	ldr	r0, [pc, #64]	@ (8000944 <main+0x200>)
 8000902:	f010 f8f5 	bl	8010af0 <iprintf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <main+0x204>)
 8000908:	1d3c      	adds	r4, r7, #4
 800090a:	461d      	mov	r5, r3
 800090c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000910:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f00e f8ca 	bl	800eab6 <osThreadCreate>
 8000922:	4603      	mov	r3, r0
 8000924:	4a09      	ldr	r2, [pc, #36]	@ (800094c <main+0x208>)
 8000926:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000928:	f00e f8be 	bl	800eaa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <main+0x1e8>
 8000930:	00009c40 	.word	0x00009c40
 8000934:	3dcccccd 	.word	0x3dcccccd
 8000938:	080133f0 	.word	0x080133f0
 800093c:	45fa0000 	.word	0x45fa0000
 8000940:	40c90fdb 	.word	0x40c90fdb
 8000944:	08013424 	.word	0x08013424
 8000948:	08013440 	.word	0x08013440
 800094c:	20001424 	.word	0x20001424

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	@ 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	2234      	movs	r2, #52	@ 0x34
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f010 fa0e 	bl	8010d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000974:	f009 f9fc 	bl	8009d70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000978:	4b31      	ldr	r3, [pc, #196]	@ (8000a40 <SystemClock_Config+0xf0>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097c:	4a30      	ldr	r2, [pc, #192]	@ (8000a40 <SystemClock_Config+0xf0>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	@ 0x40
 8000984:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <SystemClock_Config+0xf0>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	4b2c      	ldr	r3, [pc, #176]	@ (8000a44 <SystemClock_Config+0xf4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a2b      	ldr	r2, [pc, #172]	@ (8000a44 <SystemClock_Config+0xf4>)
 8000996:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <SystemClock_Config+0xf4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80009a8:	230b      	movs	r3, #11
 80009aa:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b2:	2301      	movs	r3, #1
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	2310      	movs	r3, #16
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009ba:	2301      	movs	r3, #1
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009be:	2302      	movs	r3, #2
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009c8:	2319      	movs	r3, #25
 80009ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80009cc:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80009d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d6:	2304      	movs	r3, #4
 80009d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009da:	2302      	movs	r3, #2
 80009dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4618      	mov	r0, r3
 80009e4:	f009 fae6 	bl	8009fb4 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009ee:	f001 fa5d 	bl	8001eac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009f2:	f009 f9cd 	bl	8009d90 <HAL_PWREx_EnableOverDrive>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009fc:	f001 fa56 	bl	8001eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	2107      	movs	r1, #7
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f009 fd76 	bl	800a510 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000a2a:	f001 fa3f 	bl	8001eac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2000      	movs	r0, #0
 8000a34:	f009 fe58 	bl	800a6e8 <HAL_RCC_MCOConfig>
}
 8000a38:	bf00      	nop
 8000a3a:	3750      	adds	r7, #80	@ 0x50
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b0a4      	sub	sp, #144	@ 0x90
 8000a4c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2290      	movs	r2, #144	@ 0x90
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f010 f993 	bl	8010d80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI1
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <PeriphCommonClock_Config+0x50>)
 8000a5c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a5e:	23c0      	movs	r3, #192	@ 0xc0
 8000a60:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4618      	mov	r0, r3
 8000a82:	f009 ffc1 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8000a8c:	f001 fa0e 	bl	8001eac <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3790      	adds	r7, #144	@ 0x90
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	00180008 	.word	0x00180008

08000a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aae:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000ab0:	4a21      	ldr	r2, [pc, #132]	@ (8000b38 <MX_ADC1_Init+0x9c>)
 8000ab2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000ab6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000aba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000adc:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000ade:	4a17      	ldr	r2, [pc, #92]	@ (8000b3c <MX_ADC1_Init+0xa0>)
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000afc:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000afe:	f005 f939 	bl	8005d74 <HAL_ADC_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b08:	f001 f9d0 	bl	8001eac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_ADC1_Init+0x98>)
 8000b1e:	f005 f96d 	bl	8005dfc <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b28:	f001 f9c0 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200005c4 	.word	0x200005c4
 8000b38:	40012000 	.word	0x40012000
 8000b3c:	0f000001 	.word	0x0f000001

08000b40 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b52:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b54:	4a21      	ldr	r2, [pc, #132]	@ (8000bdc <MX_ADC3_Init+0x9c>)
 8000b56:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b5e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b72:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b80:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b82:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <MX_ADC3_Init+0xa0>)
 8000b84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b86:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ba0:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000ba2:	f005 f8e7 	bl	8005d74 <HAL_ADC_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000bac:	f001 f97e 	bl	8001eac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_ADC3_Init+0x98>)
 8000bc2:	f005 f91b 	bl	8005dfc <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000bcc:	f001 f96e 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2000060c 	.word	0x2000060c
 8000bdc:	40012200 	.word	0x40012200
 8000be0:	0f000001 	.word	0x0f000001

08000be4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_CRC_Init+0x3c>)
 8000bea:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <MX_CRC_Init+0x40>)
 8000bec:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_CRC_Init+0x3c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_CRC_Init+0x3c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_CRC_Init+0x3c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <MX_CRC_Init+0x3c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_CRC_Init+0x3c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_CRC_Init+0x3c>)
 8000c0e:	f005 fd87 	bl	8006720 <HAL_CRC_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c18:	f001 f948 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000654 	.word	0x20000654
 8000c24:	40023000 	.word	0x40023000

08000c28 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c2e:	4a19      	ldr	r2, [pc, #100]	@ (8000c94 <MX_DMA2D_Init+0x6c>)
 8000c30:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	639a      	str	r2, [r3, #56]	@ 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c68:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c6a:	f005 fe4b 	bl	8006904 <HAL_DMA2D_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000c74:	f001 f91a 	bl	8001eac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_DMA2D_Init+0x68>)
 8000c7c:	f005 ffac 	bl	8006bd8 <HAL_DMA2D_ConfigLayer>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000c86:	f001 f911 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000678 	.word	0x20000678
 8000c94:	4002b000 	.word	0x4002b000

08000c98 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0aa      	sub	sp, #168	@ 0xa8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000c9e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000caa:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000cae:	2224      	movs	r2, #36	@ 0x24
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f010 f864 	bl	8010d80 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000cb8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000cca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cce:	2234      	movs	r2, #52	@ 0x34
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f010 f854 	bl	8010d80 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	222c      	movs	r2, #44	@ 0x2c
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f010 f84e 	bl	8010d80 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ce6:	4a6b      	ldr	r2, [pc, #428]	@ (8000e94 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000cea:	4b69      	ldr	r3, [pc, #420]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000cf0:	4b67      	ldr	r3, [pc, #412]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000cf6:	4b66      	ldr	r3, [pc, #408]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000cfc:	2314      	movs	r3, #20
 8000cfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d0e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d12:	4619      	mov	r1, r3
 8000d14:	485e      	ldr	r0, [pc, #376]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d16:	f005 fffd 	bl	8006d14 <HAL_DSI_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f001 f8c4 	bl	8001eac <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000d56:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	484c      	ldr	r0, [pc, #304]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d5e:	f006 fcef 	bl	8007740 <HAL_DSI_ConfigHostTimeouts>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000d68:	f001 f8a0 	bl	8001eac <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000d6c:	231c      	movs	r3, #28
 8000d6e:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d70:	2321      	movs	r3, #33	@ 0x21
 8000d72:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000d74:	230f      	movs	r3, #15
 8000d76:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d78:	2319      	movs	r3, #25
 8000d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000d80:	230a      	movs	r3, #10
 8000d82:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d84:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4841      	ldr	r0, [pc, #260]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d8c:	f006 fc6e 	bl	800766c <HAL_DSI_ConfigPhyTimer>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000d96:	f001 f889 	bl	8001eac <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	483c      	ldr	r0, [pc, #240]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d9e:	f006 fc3d 	bl	800761c <HAL_DSI_ConfigFlowControl>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000da8:	f001 f880 	bl	8001eac <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000dac:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000db0:	4837      	ldr	r0, [pc, #220]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000db2:	f006 fd8d 	bl	80078d0 <HAL_DSI_SetLowPowerRXFilter>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000dbc:	f001 f876 	bl	8001eac <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4833      	ldr	r0, [pc, #204]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000dc4:	f006 f926 	bl	8007014 <HAL_DSI_ConfigErrorMonitor>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000dce:	f001 f86d 	bl	8001eac <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000dd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000de4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000de8:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000df0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000df4:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000df6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dfa:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000dfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e00:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000e02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000e08:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000e0c:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000e0e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000e12:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000e14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e18:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000e1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e22:	4619      	mov	r1, r3
 8000e24:	481a      	ldr	r0, [pc, #104]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000e26:	f006 fb9b 	bl	8007560 <HAL_DSI_ConfigCommand>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000e30:	f001 f83c 	bl	8001eac <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 8000e3c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000e40:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000e42:	2310      	movs	r3, #16
 8000e44:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000e5a:	2340      	movs	r3, #64	@ 0x40
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	480a      	ldr	r0, [pc, #40]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000e68:	f006 faa0 	bl	80073ac <HAL_DSI_ConfigAdaptedCommandMode>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_DSIHOST_DSI_Init+0x1de>
  {
    Error_Handler();
 8000e72:	f001 f81b 	bl	8001eac <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000e7a:	f006 fa6e 	bl	800735a <HAL_DSI_SetGenericVCID>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_DSIHOST_DSI_Init+0x1f0>
  {
    Error_Handler();
 8000e84:	f001 f812 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	37a8      	adds	r7, #168	@ 0xa8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200006d0 	.word	0x200006d0
 8000e94:	40016c00 	.word	0x40016c00

08000e98 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_ETH_Init+0x84>)
 8000e9e:	4a20      	ldr	r2, [pc, #128]	@ (8000f20 <MX_ETH_Init+0x88>)
 8000ea0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ea2:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <MX_ETH_Init+0x8c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <MX_ETH_Init+0x8c>)
 8000eaa:	2280      	movs	r2, #128	@ 0x80
 8000eac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <MX_ETH_Init+0x8c>)
 8000eb0:	22e1      	movs	r2, #225	@ 0xe1
 8000eb2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_ETH_Init+0x8c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_ETH_Init+0x8c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_ETH_Init+0x8c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <MX_ETH_Init+0x84>)
 8000ec8:	4a16      	ldr	r2, [pc, #88]	@ (8000f24 <MX_ETH_Init+0x8c>)
 8000eca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <MX_ETH_Init+0x84>)
 8000ece:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ed2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_ETH_Init+0x84>)
 8000ed6:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <MX_ETH_Init+0x90>)
 8000ed8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <MX_ETH_Init+0x84>)
 8000edc:	4a13      	ldr	r2, [pc, #76]	@ (8000f2c <MX_ETH_Init+0x94>)
 8000ede:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_ETH_Init+0x84>)
 8000ee2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000ee6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <MX_ETH_Init+0x84>)
 8000eea:	f006 fd1f 	bl	800792c <HAL_ETH_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000ef4:	f000 ffda 	bl	8001eac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ef8:	2238      	movs	r2, #56	@ 0x38
 8000efa:	2100      	movs	r1, #0
 8000efc:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <MX_ETH_Init+0x98>)
 8000efe:	f00f ff3f 	bl	8010d80 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <MX_ETH_Init+0x98>)
 8000f04:	2221      	movs	r2, #33	@ 0x21
 8000f06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f08:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <MX_ETH_Init+0x98>)
 8000f0a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000f0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <MX_ETH_Init+0x98>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200006ec 	.word	0x200006ec
 8000f20:	40028000 	.word	0x40028000
 8000f24:	20001438 	.word	0x20001438
 8000f28:	20000278 	.word	0x20000278
 8000f2c:	200001d8 	.word	0x200001d8
 8000f30:	2000058c 	.word	0x2000058c

08000f34 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f3a:	4a16      	ldr	r2, [pc, #88]	@ (8000f94 <MX_HDMI_CEC_Init+0x60>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f6e:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f78:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <MX_HDMI_CEC_Init+0x64>)
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <MX_HDMI_CEC_Init+0x5c>)
 8000f7e:	f005 f991 	bl	80062a4 <HAL_CEC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8000f88:	f000 ff90 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000079c 	.word	0x2000079c
 8000f94:	40006c00 	.word	0x40006c00
 8000f98:	20001428 	.word	0x20001428

08000f9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <MX_I2C1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <MX_I2C1_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd8:	f007 f9bc 	bl	8008354 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 ff63 	bl	8001eac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fea:	f007 fa4f 	bl	800848c <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 ff5a 	bl	8001eac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000ffc:	f007 fa91 	bl	8008522 <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 ff51 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200007e0 	.word	0x200007e0
 8001014:	40005400 	.word	0x40005400
 8001018:	20404768 	.word	0x20404768

0800101c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001020:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_I2C4_Init+0x74>)
 8001022:	4a1c      	ldr	r2, [pc, #112]	@ (8001094 <MX_I2C4_Init+0x78>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <MX_I2C4_Init+0x74>)
 8001028:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <MX_I2C4_Init+0x7c>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <MX_I2C4_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_I2C4_Init+0x74>)
 8001034:	2201      	movs	r2, #1
 8001036:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <MX_I2C4_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_I2C4_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <MX_I2C4_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_I2C4_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_I2C4_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <MX_I2C4_Init+0x74>)
 8001058:	f007 f97c 	bl	8008354 <HAL_I2C_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001062:	f000 ff23 	bl	8001eac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4809      	ldr	r0, [pc, #36]	@ (8001090 <MX_I2C4_Init+0x74>)
 800106a:	f007 fa0f 	bl	800848c <HAL_I2CEx_ConfigAnalogFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001074:	f000 ff1a 	bl	8001eac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_I2C4_Init+0x74>)
 800107c:	f007 fa51 	bl	8008522 <HAL_I2CEx_ConfigDigitalFilter>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 ff11 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000834 	.word	0x20000834
 8001094:	40006000 	.word	0x40006000
 8001098:	20404768 	.word	0x20404768

0800109c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <MX_IWDG_Init+0x34>)
 80010a2:	4a0c      	ldr	r2, [pc, #48]	@ (80010d4 <MX_IWDG_Init+0x38>)
 80010a4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <MX_IWDG_Init+0x34>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <MX_IWDG_Init+0x34>)
 80010ae:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010b2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_IWDG_Init+0x34>)
 80010b6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010ba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <MX_IWDG_Init+0x34>)
 80010be:	f007 fa7c 	bl	80085ba <HAL_IWDG_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80010c8:	f000 fef0 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000888 	.word	0x20000888
 80010d4:	40003000 	.word	0x40003000

080010d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08e      	sub	sp, #56	@ 0x38
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2234      	movs	r2, #52	@ 0x34
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00f fe4b 	bl	8010d80 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010ea:	4b38      	ldr	r3, [pc, #224]	@ (80011cc <MX_LTDC_Init+0xf4>)
 80010ec:	4a38      	ldr	r2, [pc, #224]	@ (80011d0 <MX_LTDC_Init+0xf8>)
 80010ee:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010f0:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <MX_LTDC_Init+0xf4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010f6:	4b35      	ldr	r3, [pc, #212]	@ (80011cc <MX_LTDC_Init+0xf4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010fc:	4b33      	ldr	r3, [pc, #204]	@ (80011cc <MX_LTDC_Init+0xf4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001102:	4b32      	ldr	r3, [pc, #200]	@ (80011cc <MX_LTDC_Init+0xf4>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001108:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <MX_LTDC_Init+0xf4>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800110e:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <MX_LTDC_Init+0xf4>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8001114:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <MX_LTDC_Init+0xf4>)
 8001116:	2201      	movs	r2, #1
 8001118:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 800111a:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <MX_LTDC_Init+0xf4>)
 800111c:	2201      	movs	r2, #1
 800111e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8001120:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <MX_LTDC_Init+0xf4>)
 8001122:	22c9      	movs	r2, #201	@ 0xc9
 8001124:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <MX_LTDC_Init+0xf4>)
 8001128:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800112c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 800112e:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <MX_LTDC_Init+0xf4>)
 8001130:	22ca      	movs	r2, #202	@ 0xca
 8001132:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8001134:	4b25      	ldr	r3, [pc, #148]	@ (80011cc <MX_LTDC_Init+0xf4>)
 8001136:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800113a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800113c:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <MX_LTDC_Init+0xf4>)
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001144:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <MX_LTDC_Init+0xf4>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_LTDC_Init+0xf4>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001154:	481d      	ldr	r0, [pc, #116]	@ (80011cc <MX_LTDC_Init+0xf4>)
 8001156:	f007 fa81 	bl	800865c <HAL_LTDC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8001160:	f000 fea4 	bl	8001eac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8001168:	23c8      	movs	r3, #200	@ 0xc8
 800116a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001170:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001174:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001176:	2302      	movs	r3, #2
 8001178:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800117a:	23ff      	movs	r3, #255	@ 0xff
 800117c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001182:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001186:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001188:	2307      	movs	r3, #7
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800118c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8001192:	23c8      	movs	r3, #200	@ 0xc8
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001196:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800119a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_LTDC_Init+0xf4>)
 80011b6:	f007 fbb0 	bl	800891a <HAL_LTDC_ConfigLayer>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 80011c0:	f000 fe74 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	3738      	adds	r7, #56	@ 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000898 	.word	0x20000898
 80011d0:	40016800 	.word	0x40016800

080011d4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <MX_QUADSPI_Init+0x50>)
 80011da:	4a13      	ldr	r2, [pc, #76]	@ (8001228 <MX_QUADSPI_Init+0x54>)
 80011dc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_QUADSPI_Init+0x50>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <MX_QUADSPI_Init+0x50>)
 80011e6:	2210      	movs	r2, #16
 80011e8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_QUADSPI_Init+0x50>)
 80011ec:	2210      	movs	r2, #16
 80011ee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <MX_QUADSPI_Init+0x50>)
 80011f2:	221a      	movs	r2, #26
 80011f4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_QUADSPI_Init+0x50>)
 80011f8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80011fc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011fe:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_QUADSPI_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001204:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <MX_QUADSPI_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_QUADSPI_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_QUADSPI_Init+0x50>)
 8001212:	f008 fe0d 	bl	8009e30 <HAL_QSPI_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800121c:	f000 fe46 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000940 	.word	0x20000940
 8001228:	a0001000 	.word	0xa0001000

0800122c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	@ 0x40
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001232:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2228      	movs	r2, #40	@ 0x28
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f00f fd97 	bl	8010d80 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001252:	4b42      	ldr	r3, [pc, #264]	@ (800135c <MX_RTC_Init+0x130>)
 8001254:	4a42      	ldr	r2, [pc, #264]	@ (8001360 <MX_RTC_Init+0x134>)
 8001256:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001258:	4b40      	ldr	r3, [pc, #256]	@ (800135c <MX_RTC_Init+0x130>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800125e:	4b3f      	ldr	r3, [pc, #252]	@ (800135c <MX_RTC_Init+0x130>)
 8001260:	227f      	movs	r2, #127	@ 0x7f
 8001262:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001264:	4b3d      	ldr	r3, [pc, #244]	@ (800135c <MX_RTC_Init+0x130>)
 8001266:	22ff      	movs	r2, #255	@ 0xff
 8001268:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_ALARMA;
 800126a:	4b3c      	ldr	r3, [pc, #240]	@ (800135c <MX_RTC_Init+0x130>)
 800126c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001270:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001272:	4b3a      	ldr	r3, [pc, #232]	@ (800135c <MX_RTC_Init+0x130>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001278:	4b38      	ldr	r3, [pc, #224]	@ (800135c <MX_RTC_Init+0x130>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800127e:	4837      	ldr	r0, [pc, #220]	@ (800135c <MX_RTC_Init+0x130>)
 8001280:	f00a f958 	bl	800b534 <HAL_RTC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800128a:	f000 fe0f 	bl	8001eac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001294:	2300      	movs	r3, #0
 8001296:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800129a:	2300      	movs	r3, #0
 800129c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	482a      	ldr	r0, [pc, #168]	@ (800135c <MX_RTC_Init+0x130>)
 80012b2:	f00a f9c1 	bl	800b638 <HAL_RTC_SetTime>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80012bc:	f000 fdf6 	bl	8001eac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012dc:	2201      	movs	r2, #1
 80012de:	4619      	mov	r1, r3
 80012e0:	481e      	ldr	r0, [pc, #120]	@ (800135c <MX_RTC_Init+0x130>)
 80012e2:	f00a fa43 	bl	800b76c <HAL_RTC_SetDate>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80012ec:	f000 fdde 	bl	8001eac <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001314:	2301      	movs	r3, #1
 8001316:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800131a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	2201      	movs	r2, #1
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	@ (800135c <MX_RTC_Init+0x130>)
 8001328:	f00a faa4 	bl	800b874 <HAL_RTC_SetAlarm>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001332:	f000 fdbb 	bl	8001eac <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001336:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	2201      	movs	r2, #1
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_RTC_Init+0x130>)
 8001344:	f00a fa96 	bl	800b874 <HAL_RTC_SetAlarm>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800134e:	f000 fdad 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3740      	adds	r7, #64	@ 0x40
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000098c 	.word	0x2000098c
 8001360:	40002800 	.word	0x40002800

08001364 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001368:	4b4d      	ldr	r3, [pc, #308]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 800136a:	4a4e      	ldr	r2, [pc, #312]	@ (80014a4 <MX_SAI1_Init+0x140>)
 800136c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800136e:	4b4c      	ldr	r3, [pc, #304]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001374:	4b4a      	ldr	r3, [pc, #296]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800137a:	4b49      	ldr	r3, [pc, #292]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 800137c:	2240      	movs	r2, #64	@ 0x40
 800137e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001380:	4b47      	ldr	r3, [pc, #284]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 8001382:	2200      	movs	r2, #0
 8001384:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001386:	4b46      	ldr	r3, [pc, #280]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 8001388:	2200      	movs	r2, #0
 800138a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800138c:	4b44      	ldr	r3, [pc, #272]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001392:	4b43      	ldr	r3, [pc, #268]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001398:	4b41      	ldr	r3, [pc, #260]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800139e:	4b40      	ldr	r3, [pc, #256]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80013a4:	4b3e      	ldr	r3, [pc, #248]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013a6:	4a40      	ldr	r2, [pc, #256]	@ (80014a8 <MX_SAI1_Init+0x144>)
 80013a8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013aa:	4b3d      	ldr	r3, [pc, #244]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80013b0:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80013b6:	4b3a      	ldr	r3, [pc, #232]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80013bc:	4b38      	ldr	r3, [pc, #224]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80013c2:	4b37      	ldr	r3, [pc, #220]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013c4:	2208      	movs	r2, #8
 80013c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80013c8:	4b35      	ldr	r3, [pc, #212]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80013ce:	4b34      	ldr	r3, [pc, #208]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80013d4:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013da:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013e6:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80013ec:	4b2c      	ldr	r3, [pc, #176]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80013f2:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80013f8:	4829      	ldr	r0, [pc, #164]	@ (80014a0 <MX_SAI1_Init+0x13c>)
 80013fa:	f00a fc05 	bl	800bc08 <HAL_SAI_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001404:	f000 fd52 	bl	8001eac <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001408:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <MX_SAI1_Init+0x148>)
 800140a:	4a29      	ldr	r2, [pc, #164]	@ (80014b0 <MX_SAI1_Init+0x14c>)
 800140c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800140e:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001414:	4b25      	ldr	r3, [pc, #148]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001416:	2203      	movs	r2, #3
 8001418:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800141a:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <MX_SAI1_Init+0x148>)
 800141c:	2240      	movs	r2, #64	@ 0x40
 800141e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001420:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001422:	2200      	movs	r2, #0
 8001424:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001426:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001428:	2200      	movs	r2, #0
 800142a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <MX_SAI1_Init+0x148>)
 800142e:	2201      	movs	r2, #1
 8001430:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001432:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001438:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <MX_SAI1_Init+0x148>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800143e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001444:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800144a:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <MX_SAI1_Init+0x148>)
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001452:	2200      	movs	r2, #0
 8001454:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001458:	2208      	movs	r2, #8
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800145c:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <MX_SAI1_Init+0x148>)
 800145e:	2201      	movs	r2, #1
 8001460:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001462:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001464:	2200      	movs	r2, #0
 8001466:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001468:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <MX_SAI1_Init+0x148>)
 800146a:	2200      	movs	r2, #0
 800146c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001470:	2200      	movs	r2, #0
 8001472:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001474:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001476:	2200      	movs	r2, #0
 8001478:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_SAI1_Init+0x148>)
 800147c:	2200      	movs	r2, #0
 800147e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001482:	2201      	movs	r2, #1
 8001484:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_SAI1_Init+0x148>)
 8001488:	2200      	movs	r2, #0
 800148a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800148c:	4807      	ldr	r0, [pc, #28]	@ (80014ac <MX_SAI1_Init+0x148>)
 800148e:	f00a fbbb 	bl	800bc08 <HAL_SAI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001498:	f000 fd08 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200009ac 	.word	0x200009ac
 80014a4:	40015804 	.word	0x40015804
 80014a8:	0002ee00 	.word	0x0002ee00
 80014ac:	20000a30 	.word	0x20000a30
 80014b0:	40015824 	.word	0x40015824

080014b4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <MX_SAI2_Init+0x50>)
 80014ba:	4a13      	ldr	r2, [pc, #76]	@ (8001508 <MX_SAI2_Init+0x54>)
 80014bc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_SAI2_Init+0x50>)
 80014c0:	2204      	movs	r2, #4
 80014c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_SAI2_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_SAI2_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_SAI2_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <MX_SAI2_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_SAI2_Init+0x50>)
 80014de:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80014e2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <MX_SAI2_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_SAI2_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	@ (8001504 <MX_SAI2_Init+0x50>)
 80014f2:	f00a fb89 	bl	800bc08 <HAL_SAI_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 80014fc:	f000 fcd6 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000ab4 	.word	0x20000ab4
 8001508:	40015c04 	.word	0x40015c04

0800150c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 8001512:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001516:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 800151a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800151e:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_SPDIFRX_Init+0x60>)
 8001558:	f00a fd40 	bl	800bfdc <HAL_SPDIFRX_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 8001562:	f000 fca3 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000b38 	.word	0x20000b38

08001570 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_SPI2_Init+0x70>)
 8001576:	4a1b      	ldr	r2, [pc, #108]	@ (80015e4 <MX_SPI2_Init+0x74>)
 8001578:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <MX_SPI2_Init+0x70>)
 800157c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001580:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <MX_SPI2_Init+0x70>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001588:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <MX_SPI2_Init+0x70>)
 800158a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800158e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <MX_SPI2_Init+0x70>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <MX_SPI2_Init+0x70>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800159c:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <MX_SPI2_Init+0x70>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <MX_SPI2_Init+0x70>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <MX_SPI2_Init+0x70>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <MX_SPI2_Init+0x70>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <MX_SPI2_Init+0x70>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <MX_SPI2_Init+0x70>)
 80015bc:	2207      	movs	r2, #7
 80015be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015c0:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <MX_SPI2_Init+0x70>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <MX_SPI2_Init+0x70>)
 80015c8:	2208      	movs	r2, #8
 80015ca:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <MX_SPI2_Init+0x70>)
 80015ce:	f00a fd61 	bl	800c094 <HAL_SPI_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 80015d8:	f000 fc68 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000b84 	.word	0x20000b84
 80015e4:	40003800 	.word	0x40003800

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001606:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <MX_TIM1_Init+0xa0>)
 8001608:	4a20      	ldr	r2, [pc, #128]	@ (800168c <MX_TIM1_Init+0xa4>)
 800160a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800160c:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <MX_TIM1_Init+0xa0>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1d      	ldr	r3, [pc, #116]	@ (8001688 <MX_TIM1_Init+0xa0>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001618:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <MX_TIM1_Init+0xa0>)
 800161a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800161e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <MX_TIM1_Init+0xa0>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001626:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <MX_TIM1_Init+0xa0>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <MX_TIM1_Init+0xa0>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001632:	4815      	ldr	r0, [pc, #84]	@ (8001688 <MX_TIM1_Init+0xa0>)
 8001634:	f00a fdd9 	bl	800c1ea <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800163e:	f000 fc35 	bl	8001eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001646:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4619      	mov	r1, r3
 800164e:	480e      	ldr	r0, [pc, #56]	@ (8001688 <MX_TIM1_Init+0xa0>)
 8001650:	f00b f90c 	bl	800c86c <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800165a:	f000 fc27 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	@ (8001688 <MX_TIM1_Init+0xa0>)
 8001670:	f00b fd8c 	bl	800d18c <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800167a:	f000 fc17 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000be8 	.word	0x20000be8
 800168c:	40010000 	.word	0x40010000

08001690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	@ 0x28
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a2:	463b      	mov	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016b4:	4b21      	ldr	r3, [pc, #132]	@ (800173c <MX_TIM3_Init+0xac>)
 80016b6:	4a22      	ldr	r2, [pc, #136]	@ (8001740 <MX_TIM3_Init+0xb0>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <MX_TIM3_Init+0xac>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <MX_TIM3_Init+0xac>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <MX_TIM3_Init+0xac>)
 80016c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <MX_TIM3_Init+0xac>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	4b19      	ldr	r3, [pc, #100]	@ (800173c <MX_TIM3_Init+0xac>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016da:	4818      	ldr	r0, [pc, #96]	@ (800173c <MX_TIM3_Init+0xac>)
 80016dc:	f00a fe54 	bl	800c388 <HAL_TIM_PWM_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80016e6:	f000 fbe1 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4810      	ldr	r0, [pc, #64]	@ (800173c <MX_TIM3_Init+0xac>)
 80016fa:	f00b fd47 	bl	800d18c <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001704:	f000 fbd2 	bl	8001eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001708:	2360      	movs	r3, #96	@ 0x60
 800170a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	2208      	movs	r2, #8
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_TIM3_Init+0xac>)
 8001720:	f00a ff90 	bl	800c644 <HAL_TIM_PWM_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800172a:	f000 fbbf 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800172e:	4803      	ldr	r0, [pc, #12]	@ (800173c <MX_TIM3_Init+0xac>)
 8001730:	f001 f956 	bl	80029e0 <HAL_TIM_MspPostInit>

}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	@ 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000c34 	.word	0x20000c34
 8001740:	40000400 	.word	0x40000400

08001744 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800175c:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <MX_TIM10_Init+0x94>)
 800175e:	4a1f      	ldr	r2, [pc, #124]	@ (80017dc <MX_TIM10_Init+0x98>)
 8001760:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001762:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <MX_TIM10_Init+0x94>)
 8001764:	2200      	movs	r2, #0
 8001766:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <MX_TIM10_Init+0x94>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_TIM10_Init+0x94>)
 8001770:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001774:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001776:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <MX_TIM10_Init+0x94>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <MX_TIM10_Init+0x94>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001782:	4815      	ldr	r0, [pc, #84]	@ (80017d8 <MX_TIM10_Init+0x94>)
 8001784:	f00a fd31 	bl	800c1ea <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800178e:	f000 fb8d 	bl	8001eac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001792:	4811      	ldr	r0, [pc, #68]	@ (80017d8 <MX_TIM10_Init+0x94>)
 8001794:	f00a fdf8 	bl	800c388 <HAL_TIM_PWM_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800179e:	f000 fb85 	bl	8001eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a2:	2360      	movs	r3, #96	@ 0x60
 80017a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	4619      	mov	r1, r3
 80017b8:	4807      	ldr	r0, [pc, #28]	@ (80017d8 <MX_TIM10_Init+0x94>)
 80017ba:	f00a ff43 	bl	800c644 <HAL_TIM_PWM_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80017c4:	f000 fb72 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80017c8:	4803      	ldr	r0, [pc, #12]	@ (80017d8 <MX_TIM10_Init+0x94>)
 80017ca:	f001 f909 	bl	80029e0 <HAL_TIM_MspPostInit>

}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000c80 	.word	0x20000c80
 80017dc:	40014400 	.word	0x40014400

080017e0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <MX_TIM11_Init+0x94>)
 80017fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001878 <MX_TIM11_Init+0x98>)
 80017fc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80017fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <MX_TIM11_Init+0x94>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <MX_TIM11_Init+0x94>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800180a:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <MX_TIM11_Init+0x94>)
 800180c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001810:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <MX_TIM11_Init+0x94>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001818:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <MX_TIM11_Init+0x94>)
 800181a:	2200      	movs	r2, #0
 800181c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800181e:	4815      	ldr	r0, [pc, #84]	@ (8001874 <MX_TIM11_Init+0x94>)
 8001820:	f00a fce3 	bl	800c1ea <HAL_TIM_Base_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800182a:	f000 fb3f 	bl	8001eac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800182e:	4811      	ldr	r0, [pc, #68]	@ (8001874 <MX_TIM11_Init+0x94>)
 8001830:	f00a fdaa 	bl	800c388 <HAL_TIM_PWM_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800183a:	f000 fb37 	bl	8001eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183e:	2360      	movs	r3, #96	@ 0x60
 8001840:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	4807      	ldr	r0, [pc, #28]	@ (8001874 <MX_TIM11_Init+0x94>)
 8001856:	f00a fef5 	bl	800c644 <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001860:	f000 fb24 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001864:	4803      	ldr	r0, [pc, #12]	@ (8001874 <MX_TIM11_Init+0x94>)
 8001866:	f001 f8bb 	bl	80029e0 <HAL_TIM_MspPostInit>

}
 800186a:	bf00      	nop
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000ccc 	.word	0x20000ccc
 8001878:	40014800 	.word	0x40014800

0800187c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001894:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <MX_TIM12_Init+0x84>)
 8001896:	4a1b      	ldr	r2, [pc, #108]	@ (8001904 <MX_TIM12_Init+0x88>)
 8001898:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <MX_TIM12_Init+0x84>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <MX_TIM12_Init+0x84>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80018a6:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <MX_TIM12_Init+0x84>)
 80018a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ac:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <MX_TIM12_Init+0x84>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <MX_TIM12_Init+0x84>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80018ba:	4811      	ldr	r0, [pc, #68]	@ (8001900 <MX_TIM12_Init+0x84>)
 80018bc:	f00a fd64 	bl	800c388 <HAL_TIM_PWM_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80018c6:	f000 faf1 	bl	8001eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ca:	2360      	movs	r3, #96	@ 0x60
 80018cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	4619      	mov	r1, r3
 80018e0:	4807      	ldr	r0, [pc, #28]	@ (8001900 <MX_TIM12_Init+0x84>)
 80018e2:	f00a feaf 	bl	800c644 <HAL_TIM_PWM_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80018ec:	f000 fade 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80018f0:	4803      	ldr	r0, [pc, #12]	@ (8001900 <MX_TIM12_Init+0x84>)
 80018f2:	f001 f875 	bl	80029e0 <HAL_TIM_MspPostInit>

}
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000d18 	.word	0x20000d18
 8001904:	40001800 	.word	0x40001800

08001908 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_UART5_Init+0x58>)
 800190e:	4a15      	ldr	r2, [pc, #84]	@ (8001964 <MX_UART5_Init+0x5c>)
 8001910:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001912:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <MX_UART5_Init+0x58>)
 8001914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001918:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_UART5_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_UART5_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_UART5_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_UART5_Init+0x58>)
 800192e:	220c      	movs	r2, #12
 8001930:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <MX_UART5_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_UART5_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <MX_UART5_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_UART5_Init+0x58>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_UART5_Init+0x58>)
 800194c:	f00b fcca 	bl	800d2e4 <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001956:	f000 faa9 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000d64 	.word	0x20000d64
 8001964:	40005000 	.word	0x40005000

08001968 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800196c:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 800196e:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <MX_USART1_UART_Init+0x5c>)
 8001970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001972:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199e:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <MX_USART1_UART_Init+0x58>)
 80019ac:	f00b fc9a 	bl	800d2e4 <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019b6:	f000 fa79 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000dec 	.word	0x20000dec
 80019c4:	40011000 	.word	0x40011000

080019c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019cc:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 80019ce:	4a15      	ldr	r2, [pc, #84]	@ (8001a24 <MX_USART6_UART_Init+0x5c>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019d2:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	@ (8001a20 <MX_USART6_UART_Init+0x58>)
 8001a0c:	f00b fc6a 	bl	800d2e4 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001a16:	f000 fa49 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000e74 	.word	0x20000e74
 8001a24:	40011400 	.word	0x40011400

08001a28 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a2e:	4a16      	ldr	r2, [pc, #88]	@ (8001a88 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001a30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001a32:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a34:	2209      	movs	r2, #9
 8001a36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001a70:	f007 f908 	bl	8008c84 <HAL_PCD_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001a7a:	f000 fa17 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000efc 	.word	0x20000efc
 8001a88:	40040000 	.word	0x40040000

08001a8c <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <MX_WWDG_Init+0x38>)
 8001a92:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <MX_WWDG_Init+0x3c>)
 8001a94:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <MX_WWDG_Init+0x38>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <MX_WWDG_Init+0x38>)
 8001a9e:	2240      	movs	r2, #64	@ 0x40
 8001aa0:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 128;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <MX_WWDG_Init+0x38>)
 8001aa4:	2280      	movs	r2, #128	@ 0x80
 8001aa6:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <MX_WWDG_Init+0x38>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <MX_WWDG_Init+0x38>)
 8001ab0:	f00c f8e5 	bl	800dc7e <HAL_WWDG_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 8001aba:	f000 f9f7 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200013dc 	.word	0x200013dc
 8001ac8:	40002c00 	.word	0x40002c00

08001acc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
 8001ae0:	615a      	str	r2, [r3, #20]
 8001ae2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001ae6:	4a20      	ldr	r2, [pc, #128]	@ (8001b68 <MX_FMC_Init+0x9c>)
 8001ae8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001af6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001af8:	2204      	movs	r2, #4
 8001afa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001afe:	2220      	movs	r2, #32
 8001b00:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001b04:	2240      	movs	r2, #64	@ 0x40
 8001b06:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001b0a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b0e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001b18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b1c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001b20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b24:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001b30:	2307      	movs	r3, #7
 8001b32:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001b34:	2304      	movs	r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_FMC_Init+0x98>)
 8001b4e:	f00a fa11 	bl	800bf74 <HAL_SDRAM_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001b58:	f000 f9a8 	bl	8001eac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001b5c:	bf00      	nop
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200013f0 	.word	0x200013f0
 8001b68:	a0000140 	.word	0xa0000140

08001b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b090      	sub	sp, #64	@ 0x40
 8001b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b82:	4bae      	ldr	r3, [pc, #696]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4aad      	ldr	r2, [pc, #692]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4bab      	ldr	r3, [pc, #684]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b9a:	4ba8      	ldr	r3, [pc, #672]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4aa7      	ldr	r2, [pc, #668]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4ba5      	ldr	r3, [pc, #660]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4ba2      	ldr	r3, [pc, #648]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4aa1      	ldr	r2, [pc, #644]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b9f      	ldr	r3, [pc, #636]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bca:	4b9c      	ldr	r3, [pc, #624]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a9b      	ldr	r2, [pc, #620]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b99      	ldr	r3, [pc, #612]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	4b96      	ldr	r3, [pc, #600]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a95      	ldr	r2, [pc, #596]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b93      	ldr	r3, [pc, #588]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b90      	ldr	r3, [pc, #576]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a8f      	ldr	r2, [pc, #572]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b8d      	ldr	r3, [pc, #564]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c12:	4b8a      	ldr	r3, [pc, #552]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a89      	ldr	r2, [pc, #548]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b87      	ldr	r3, [pc, #540]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c2a:	4b84      	ldr	r3, [pc, #528]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a83      	ldr	r2, [pc, #524]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b81      	ldr	r3, [pc, #516]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c42:	4b7e      	ldr	r3, [pc, #504]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a7d      	ldr	r2, [pc, #500]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c5a:	4b78      	ldr	r3, [pc, #480]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a77      	ldr	r2, [pc, #476]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c60:	f043 0320 	orr.w	r3, r3, #32
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b75      	ldr	r3, [pc, #468]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c72:	4b72      	ldr	r3, [pc, #456]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a71      	ldr	r2, [pc, #452]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b6f      	ldr	r3, [pc, #444]	@ (8001e3c <MX_GPIO_Init+0x2d0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|DSI_RESET_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8001c90:	486b      	ldr	r0, [pc, #428]	@ (8001e40 <MX_GPIO_Init+0x2d4>)
 8001c92:	f006 fb45 	bl	8008320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : uSD_D3_Pin uSD_D2_Pin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8001c96:	2318      	movs	r3, #24
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4864      	ldr	r0, [pc, #400]	@ (8001e44 <MX_GPIO_Init+0x2d8>)
 8001cb2:	f006 f989 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CMD_Pin uSD_CLK_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001cb6:	23c0      	movs	r3, #192	@ 0xc0
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001cc6:	230b      	movs	r3, #11
 8001cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cce:	4619      	mov	r1, r3
 8001cd0:	485d      	ldr	r0, [pc, #372]	@ (8001e48 <MX_GPIO_Init+0x2dc>)
 8001cd2:	f006 f979 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin DSI_RESET_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|DSI_RESET_Pin;
 8001cd6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ce8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cec:	4619      	mov	r1, r3
 8001cee:	4854      	ldr	r0, [pc, #336]	@ (8001e40 <MX_GPIO_Init+0x2d4>)
 8001cf0:	f006 f96a 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin ARD_D7_Pin
                           ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin|ARD_D7_Pin
 8001cf4:	f245 031b 	movw	r3, #20507	@ 0x501b
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001d02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d06:	4619      	mov	r1, r3
 8001d08:	484d      	ldr	r0, [pc, #308]	@ (8001e40 <MX_GPIO_Init+0x2d4>)
 8001d0a:	f006 f95d 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN5_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8001d0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001d20:	2303      	movs	r3, #3
 8001d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4848      	ldr	r0, [pc, #288]	@ (8001e4c <MX_GPIO_Init+0x2e0>)
 8001d2c:	f006 f94c 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8001d30:	f44f 4351 	mov.w	r3, #53504	@ 0xd100
 8001d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d36:	2300      	movs	r3, #0
 8001d38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d42:	4619      	mov	r1, r3
 8001d44:	4842      	ldr	r0, [pc, #264]	@ (8001e50 <MX_GPIO_Init+0x2e4>)
 8001d46:	f006 f93f 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8001d4a:	23f8      	movs	r3, #248	@ 0xf8
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001d56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	483d      	ldr	r0, [pc, #244]	@ (8001e54 <MX_GPIO_Init+0x2e8>)
 8001d5e:	f006 f933 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D1_Pin uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001d62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001d74:	230b      	movs	r3, #11
 8001d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4836      	ldr	r0, [pc, #216]	@ (8001e58 <MX_GPIO_Init+0x2ec>)
 8001d80:	f006 f922 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8001d84:	2330      	movs	r3, #48	@ 0x30
 8001d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d94:	4619      	mov	r1, r3
 8001d96:	482c      	ldr	r0, [pc, #176]	@ (8001e48 <MX_GPIO_Init+0x2dc>)
 8001d98:	f006 f916 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001dac:	2303      	movs	r3, #3
 8001dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	4824      	ldr	r0, [pc, #144]	@ (8001e48 <MX_GPIO_Init+0x2dc>)
 8001db8:	f006 f906 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8001dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4820      	ldr	r0, [pc, #128]	@ (8001e5c <MX_GPIO_Init+0x2f0>)
 8001dda:	f006 f8f5 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001dde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001de4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001de8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df2:	4619      	mov	r1, r3
 8001df4:	4816      	ldr	r0, [pc, #88]	@ (8001e50 <MX_GPIO_Init+0x2e4>)
 8001df6:	f006 f8e7 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001dfa:	2348      	movs	r3, #72	@ 0x48
 8001dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4812      	ldr	r0, [pc, #72]	@ (8001e58 <MX_GPIO_Init+0x2ec>)
 8001e0e:	f006 f8db 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001e12:	2301      	movs	r3, #1
 8001e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e24:	4619      	mov	r1, r3
 8001e26:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <MX_GPIO_Init+0x2f0>)
 8001e28:	f006 f8ce 	bl	8007fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e38:	e012      	b.n	8001e60 <MX_GPIO_Init+0x2f4>
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40022400 	.word	0x40022400
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40022000 	.word	0x40022000
 8001e54:	40022800 	.word	0x40022800
 8001e58:	40021800 	.word	0x40021800
 8001e5c:	40020000 	.word	0x40020000
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e64:	4619      	mov	r1, r3
 8001e66:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <MX_GPIO_Init+0x308>)
 8001e68:	f006 f8ae 	bl	8007fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001e6c:	bf00      	nop
 8001e6e:	3740      	adds	r7, #64	@ 0x40
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021c00 	.word	0x40021c00

08001e78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f00c fe64 	bl	800eb4e <osDelay>
 8001e86:	e7fb      	b.n	8001e80 <StartDefaultTask+0x8>

08001e88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001e9a:	f003 ff27 	bl	8005cec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40001000 	.word	0x40001000

08001eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb0:	b672      	cpsid	i
}
 8001eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error\n");
 8001eb4:	4801      	ldr	r0, [pc, #4]	@ (8001ebc <Error_Handler+0x10>)
 8001eb6:	f00e fe83 	bl	8010bc0 <puts>
 8001eba:	e7fb      	b.n	8001eb4 <Error_Handler+0x8>
 8001ebc:	0801345c 	.word	0x0801345c

08001ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	4a10      	ldr	r2, [pc, #64]	@ (8001f0c <HAL_MspInit+0x4c>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <HAL_MspInit+0x4c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_MspInit+0x4c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	210f      	movs	r1, #15
 8001efa:	f06f 0001 	mvn.w	r0, #1
 8001efe:	f004 fbe5 	bl	80066cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	@ 0x30
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a36      	ldr	r2, [pc, #216]	@ (8002008 <HAL_ADC_MspInit+0xf8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d13c      	bne.n	8001fac <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f32:	4b36      	ldr	r3, [pc, #216]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	4a35      	ldr	r2, [pc, #212]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3e:	4b33      	ldr	r3, [pc, #204]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	4b30      	ldr	r3, [pc, #192]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a29      	ldr	r2, [pc, #164]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b27      	ldr	r3, [pc, #156]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4820      	ldr	r0, [pc, #128]	@ (8002010 <HAL_ADC_MspInit+0x100>)
 8001f8e:	f006 f81b 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001f92:	2350      	movs	r3, #80	@ 0x50
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f96:	2303      	movs	r3, #3
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	481b      	ldr	r0, [pc, #108]	@ (8002014 <HAL_ADC_MspInit+0x104>)
 8001fa6:	f006 f80f 	bl	8007fc8 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001faa:	e029      	b.n	8002000 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	@ (8002018 <HAL_ADC_MspInit+0x108>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d124      	bne.n	8002000 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	4a14      	ldr	r2, [pc, #80]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001fbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc2:	4b12      	ldr	r3, [pc, #72]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fce:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001fd4:	f043 0320 	orr.w	r3, r3, #32
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <HAL_ADC_MspInit+0xfc>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001fe6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fec:	2303      	movs	r3, #3
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4808      	ldr	r0, [pc, #32]	@ (800201c <HAL_ADC_MspInit+0x10c>)
 8001ffc:	f005 ffe4 	bl	8007fc8 <HAL_GPIO_Init>
}
 8002000:	bf00      	nop
 8002002:	3730      	adds	r7, #48	@ 0x30
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40012000 	.word	0x40012000
 800200c:	40023800 	.word	0x40023800
 8002010:	40020800 	.word	0x40020800
 8002014:	40020000 	.word	0x40020000
 8002018:	40012200 	.word	0x40012200
 800201c:	40021400 	.word	0x40021400

08002020 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <HAL_CRC_MspInit+0x38>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10b      	bne.n	800204a <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_CRC_MspInit+0x3c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a09      	ldr	r2, [pc, #36]	@ (800205c <HAL_CRC_MspInit+0x3c>)
 8002038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_CRC_MspInit+0x3c>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023000 	.word	0x40023000
 800205c:	40023800 	.word	0x40023800

08002060 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	@ (80020a4 <HAL_DMA2D_MspInit+0x44>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d113      	bne.n	800209a <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_DMA2D_MspInit+0x48>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	4a0c      	ldr	r2, [pc, #48]	@ (80020a8 <HAL_DMA2D_MspInit+0x48>)
 8002078:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800207c:	6313      	str	r3, [r2, #48]	@ 0x30
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_DMA2D_MspInit+0x48>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2105      	movs	r1, #5
 800208e:	205a      	movs	r0, #90	@ 0x5a
 8002090:	f004 fb1c 	bl	80066cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002094:	205a      	movs	r0, #90	@ 0x5a
 8002096:	f004 fb35 	bl	8006704 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	4002b000 	.word	0x4002b000
 80020a8:	40023800 	.word	0x40023800

080020ac <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002138 <HAL_DSI_MspInit+0x8c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d12f      	bne.n	800212e <HAL_DSI_MspInit+0x82>
  {
    /* USER CODE BEGIN DSI_MspInit 0 */

    /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80020ce:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_DSI_MspInit+0x90>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <HAL_DSI_MspInit+0x90>)
 80020d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80020d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020da:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_DSI_MspInit+0x90>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_DSI_MspInit+0x90>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	4a14      	ldr	r2, [pc, #80]	@ (800213c <HAL_DSI_MspInit+0x90>)
 80020ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f2:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_DSI_MspInit+0x90>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 80020fe:	2304      	movs	r3, #4
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800210e:	230d      	movs	r3, #13
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4809      	ldr	r0, [pc, #36]	@ (8002140 <HAL_DSI_MspInit+0x94>)
 800211a:	f005 ff55 	bl	8007fc8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2105      	movs	r1, #5
 8002122:	2062      	movs	r0, #98	@ 0x62
 8002124:	f004 fad2 	bl	80066cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002128:	2062      	movs	r0, #98	@ 0x62
 800212a:	f004 faeb 	bl	8006704 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 800212e:	bf00      	nop
 8002130:	3728      	adds	r7, #40	@ 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40016c00 	.word	0x40016c00
 800213c:	40023800 	.word	0x40023800
 8002140:	40022400 	.word	0x40022400

08002144 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	@ 0x38
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3f      	ldr	r2, [pc, #252]	@ (8002260 <HAL_ETH_MspInit+0x11c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d178      	bne.n	8002258 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002166:	4b3f      	ldr	r3, [pc, #252]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a3e      	ldr	r2, [pc, #248]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 800216c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b3c      	ldr	r3, [pc, #240]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	4b39      	ldr	r3, [pc, #228]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a38      	ldr	r2, [pc, #224]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 8002184:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b36      	ldr	r3, [pc, #216]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4b33      	ldr	r3, [pc, #204]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a32      	ldr	r2, [pc, #200]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 800219c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b30      	ldr	r3, [pc, #192]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 80021b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	4b27      	ldr	r3, [pc, #156]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a26      	ldr	r2, [pc, #152]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a20      	ldr	r2, [pc, #128]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <HAL_ETH_MspInit+0x120>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80021f6:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002208:	230b      	movs	r3, #11
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800220c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002210:	4619      	mov	r1, r3
 8002212:	4815      	ldr	r0, [pc, #84]	@ (8002268 <HAL_ETH_MspInit+0x124>)
 8002214:	f005 fed8 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002218:	2332      	movs	r3, #50	@ 0x32
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002228:	230b      	movs	r3, #11
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002230:	4619      	mov	r1, r3
 8002232:	480e      	ldr	r0, [pc, #56]	@ (800226c <HAL_ETH_MspInit+0x128>)
 8002234:	f005 fec8 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002238:	2386      	movs	r3, #134	@ 0x86
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002248:	230b      	movs	r3, #11
 800224a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002250:	4619      	mov	r1, r3
 8002252:	4807      	ldr	r0, [pc, #28]	@ (8002270 <HAL_ETH_MspInit+0x12c>)
 8002254:	f005 feb8 	bl	8007fc8 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8002258:	bf00      	nop
 800225a:	3738      	adds	r7, #56	@ 0x38
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40028000 	.word	0x40028000
 8002264:	40023800 	.word	0x40023800
 8002268:	40021800 	.word	0x40021800
 800226c:	40020800 	.word	0x40020800
 8002270:	40020000 	.word	0x40020000

08002274 <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0ae      	sub	sp, #184	@ 0xb8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2290      	movs	r2, #144	@ 0x90
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00e fd73 	bl	8010d80 <memset>
  if(hcec->Instance==CEC)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a27      	ldr	r2, [pc, #156]	@ (800233c <HAL_CEC_MspInit+0xc8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d146      	bne.n	8002332 <HAL_CEC_MspInit+0xbe>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 80022a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_HSI;
 80022aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80022ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4618      	mov	r0, r3
 80022b8:	f008 fba6 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_CEC_MspInit+0x52>
    {
      Error_Handler();
 80022c2:	f7ff fdf3 	bl	8001eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_CEC_MspInit+0xcc>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <HAL_CEC_MspInit+0xcc>)
 80022cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80022d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_CEC_MspInit+0xcc>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <HAL_CEC_MspInit+0xcc>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a17      	ldr	r2, [pc, #92]	@ (8002340 <HAL_CEC_MspInit+0xcc>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_CEC_MspInit+0xcc>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration
    PA15     ------> CEC
    */
    GPIO_InitStruct.Pin = CEC_Pin;
 80022f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fe:	2312      	movs	r3, #18
 8002300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8002310:	2304      	movs	r3, #4
 8002312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800231a:	4619      	mov	r1, r3
 800231c:	4809      	ldr	r0, [pc, #36]	@ (8002344 <HAL_CEC_MspInit+0xd0>)
 800231e:	f005 fe53 	bl	8007fc8 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2105      	movs	r1, #5
 8002326:	205e      	movs	r0, #94	@ 0x5e
 8002328:	f004 f9d0 	bl	80066cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 800232c:	205e      	movs	r0, #94	@ 0x5e
 800232e:	f004 f9e9 	bl	8006704 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 8002332:	bf00      	nop
 8002334:	37b8      	adds	r7, #184	@ 0xb8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40006c00 	.word	0x40006c00
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000

08002348 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0b0      	sub	sp, #192	@ 0xc0
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	2290      	movs	r2, #144	@ 0x90
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f00e fd09 	bl	8010d80 <memset>
  if(hi2c->Instance==I2C1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a55      	ldr	r2, [pc, #340]	@ (80024c8 <HAL_I2C_MspInit+0x180>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d13e      	bne.n	80023f6 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002378:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800237c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4618      	mov	r0, r3
 800238a:	f008 fb3d 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002394:	f7ff fd8a 	bl	8001eac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002398:	4b4c      	ldr	r3, [pc, #304]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	4a4b      	ldr	r2, [pc, #300]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 800239e:	f043 0302 	orr.w	r3, r3, #2
 80023a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a4:	4b49      	ldr	r3, [pc, #292]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80023b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b8:	2312      	movs	r3, #18
 80023ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023be:	2301      	movs	r3, #1
 80023c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ca:	2304      	movs	r3, #4
 80023cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80023d4:	4619      	mov	r1, r3
 80023d6:	483e      	ldr	r0, [pc, #248]	@ (80024d0 <HAL_I2C_MspInit+0x188>)
 80023d8:	f005 fdf6 	bl	8007fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023dc:	4b3b      	ldr	r3, [pc, #236]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	4a3a      	ldr	r2, [pc, #232]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 80023e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e8:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 80023f4:	e063      	b.n	80024be <HAL_I2C_MspInit+0x176>
  else if(hi2c->Instance==I2C4)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a36      	ldr	r2, [pc, #216]	@ (80024d4 <HAL_I2C_MspInit+0x18c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d15e      	bne.n	80024be <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002400:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002404:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	4618      	mov	r0, r3
 8002412:	f008 faf9 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 800241c:	f7ff fd46 	bl	8001eac <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	4a29      	ldr	r2, [pc, #164]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	6313      	str	r3, [r2, #48]	@ 0x30
 800242c:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002438:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243c:	4a23      	ldr	r2, [pc, #140]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	6313      	str	r3, [r2, #48]	@ 0x30
 8002444:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002456:	2312      	movs	r3, #18
 8002458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800245c:	2301      	movs	r3, #1
 800245e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8002468:	230b      	movs	r3, #11
 800246a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002472:	4619      	mov	r1, r3
 8002474:	4816      	ldr	r0, [pc, #88]	@ (80024d0 <HAL_I2C_MspInit+0x188>)
 8002476:	f005 fda7 	bl	8007fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 800247a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800247e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002482:	2312      	movs	r3, #18
 8002484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002488:	2301      	movs	r3, #1
 800248a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002494:	2304      	movs	r3, #4
 8002496:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 800249a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800249e:	4619      	mov	r1, r3
 80024a0:	480d      	ldr	r0, [pc, #52]	@ (80024d8 <HAL_I2C_MspInit+0x190>)
 80024a2:	f005 fd91 	bl	8007fc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a08      	ldr	r2, [pc, #32]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 80024ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_I2C_MspInit+0x184>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
}
 80024be:	bf00      	nop
 80024c0:	37c0      	adds	r7, #192	@ 0xc0
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40005400 	.word	0x40005400
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40006000 	.word	0x40006000
 80024d8:	40020c00 	.word	0x40020c00

080024dc <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <HAL_LTDC_MspInit+0x44>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d113      	bne.n	8002516 <HAL_LTDC_MspInit+0x3a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <HAL_LTDC_MspInit+0x48>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002524 <HAL_LTDC_MspInit+0x48>)
 80024f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <HAL_LTDC_MspInit+0x48>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2105      	movs	r1, #5
 800250a:	2058      	movs	r0, #88	@ 0x58
 800250c:	f004 f8de 	bl	80066cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002510:	2058      	movs	r0, #88	@ 0x58
 8002512:	f004 f8f7 	bl	8006704 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40016800 	.word	0x40016800
 8002524:	40023800 	.word	0x40023800

08002528 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	@ 0x30
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a4a      	ldr	r2, [pc, #296]	@ (8002670 <HAL_QSPI_MspInit+0x148>)
 8002546:	4293      	cmp	r3, r2
 8002548:	f040 808e 	bne.w	8002668 <HAL_QSPI_MspInit+0x140>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800254c:	4b49      	ldr	r3, [pc, #292]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	4a48      	ldr	r2, [pc, #288]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 8002552:	f043 0302 	orr.w	r3, r3, #2
 8002556:	6393      	str	r3, [r2, #56]	@ 0x38
 8002558:	4b46      	ldr	r3, [pc, #280]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002564:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	4a42      	ldr	r2, [pc, #264]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 800256a:	f043 0310 	orr.w	r3, r3, #16
 800256e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002570:	4b40      	ldr	r3, [pc, #256]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257c:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002580:	4a3c      	ldr	r2, [pc, #240]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 8002582:	f043 0302 	orr.w	r3, r3, #2
 8002586:	6313      	str	r3, [r2, #48]	@ 0x30
 8002588:	4b3a      	ldr	r3, [pc, #232]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002594:	4b37      	ldr	r3, [pc, #220]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	4a36      	ldr	r2, [pc, #216]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a0:	4b34      	ldr	r3, [pc, #208]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ac:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	4a30      	ldr	r2, [pc, #192]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002674 <HAL_QSPI_MspInit+0x14c>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80025c4:	2304      	movs	r3, #4
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025d4:	2309      	movs	r3, #9
 80025d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4619      	mov	r1, r3
 80025de:	4826      	ldr	r0, [pc, #152]	@ (8002678 <HAL_QSPI_MspInit+0x150>)
 80025e0:	f005 fcf2 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80025e4:	2340      	movs	r3, #64	@ 0x40
 80025e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80025f4:	230a      	movs	r3, #10
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	4619      	mov	r1, r3
 80025fe:	481f      	ldr	r0, [pc, #124]	@ (800267c <HAL_QSPI_MspInit+0x154>)
 8002600:	f005 fce2 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8002604:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002616:	2309      	movs	r3, #9
 8002618:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	4619      	mov	r1, r3
 8002620:	4817      	ldr	r0, [pc, #92]	@ (8002680 <HAL_QSPI_MspInit+0x158>)
 8002622:	f005 fcd1 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002626:	2304      	movs	r3, #4
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002636:	2309      	movs	r3, #9
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	480e      	ldr	r0, [pc, #56]	@ (800267c <HAL_QSPI_MspInit+0x154>)
 8002642:	f005 fcc1 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8002646:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800264a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002658:	2309      	movs	r3, #9
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	4808      	ldr	r0, [pc, #32]	@ (8002684 <HAL_QSPI_MspInit+0x15c>)
 8002664:	f005 fcb0 	bl	8007fc8 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002668:	bf00      	nop
 800266a:	3730      	adds	r7, #48	@ 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	a0001000 	.word	0xa0001000
 8002674:	40023800 	.word	0x40023800
 8002678:	40021000 	.word	0x40021000
 800267c:	40020400 	.word	0x40020400
 8002680:	40020800 	.word	0x40020800
 8002684:	40020c00 	.word	0x40020c00

08002688 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b0ac      	sub	sp, #176	@ 0xb0
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	2290      	movs	r2, #144	@ 0x90
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f00e fb69 	bl	8010d80 <memset>
  if(hrtc->Instance==RTC)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002728 <HAL_RTC_MspInit+0xa0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d133      	bne.n	8002720 <HAL_RTC_MspInit+0x98>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026b8:	2320      	movs	r3, #32
 80026ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	4618      	mov	r0, r3
 80026c8:	f008 f99e 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_RTC_MspInit+0x4e>
    {
      Error_Handler();
 80026d2:	f7ff fbeb 	bl	8001eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026d6:	4b15      	ldr	r3, [pc, #84]	@ (800272c <HAL_RTC_MspInit+0xa4>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	4a14      	ldr	r2, [pc, #80]	@ (800272c <HAL_RTC_MspInit+0xa4>)
 80026dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026e0:	6713      	str	r3, [r2, #112]	@ 0x70

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	4b12      	ldr	r3, [pc, #72]	@ (800272c <HAL_RTC_MspInit+0xa4>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a11      	ldr	r2, [pc, #68]	@ (800272c <HAL_RTC_MspInit+0xa4>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <HAL_RTC_MspInit+0xa4>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002714:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002718:	4619      	mov	r1, r3
 800271a:	4805      	ldr	r0, [pc, #20]	@ (8002730 <HAL_RTC_MspInit+0xa8>)
 800271c:	f005 fc54 	bl	8007fc8 <HAL_GPIO_Init>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002720:	bf00      	nop
 8002722:	37b0      	adds	r7, #176	@ 0xb0
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40002800 	.word	0x40002800
 800272c:	40023800 	.word	0x40023800
 8002730:	40020800 	.word	0x40020800

08002734 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0ae      	sub	sp, #184	@ 0xb8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2290      	movs	r2, #144	@ 0x90
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f00e fb13 	bl	8010d80 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8002762:	d144      	bne.n	80027ee <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002768:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800276a:	23c0      	movs	r3, #192	@ 0xc0
 800276c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800276e:	2302      	movs	r3, #2
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002772:	2302      	movs	r3, #2
 8002774:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002776:	2302      	movs	r3, #2
 8002778:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4618      	mov	r0, r3
 8002784:	f008 f940 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800278e:	f7ff fb8d 	bl	8001eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002792:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_SPDIFRX_MspInit+0xc4>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	4a18      	ldr	r2, [pc, #96]	@ (80027f8 <HAL_SPDIFRX_MspInit+0xc4>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6413      	str	r3, [r2, #64]	@ 0x40
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_SPDIFRX_MspInit+0xc4>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <HAL_SPDIFRX_MspInit+0xc4>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	4a12      	ldr	r2, [pc, #72]	@ (80027f8 <HAL_SPDIFRX_MspInit+0xc4>)
 80027b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <HAL_SPDIFRX_MspInit+0xc4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 80027c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 80027dc:	2307      	movs	r3, #7
 80027de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 80027e2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4804      	ldr	r0, [pc, #16]	@ (80027fc <HAL_SPDIFRX_MspInit+0xc8>)
 80027ea:	f005 fbed 	bl	8007fc8 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 80027ee:	bf00      	nop
 80027f0:	37b8      	adds	r7, #184	@ 0xb8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40021800 	.word	0x40021800

08002800 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	@ 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2e      	ldr	r2, [pc, #184]	@ (80028d8 <HAL_SPI_MspInit+0xd8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d156      	bne.n	80028d0 <HAL_SPI_MspInit+0xd0>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002822:	4b2e      	ldr	r3, [pc, #184]	@ (80028dc <HAL_SPI_MspInit+0xdc>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	4a2d      	ldr	r2, [pc, #180]	@ (80028dc <HAL_SPI_MspInit+0xdc>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800282c:	6413      	str	r3, [r2, #64]	@ 0x40
 800282e:	4b2b      	ldr	r3, [pc, #172]	@ (80028dc <HAL_SPI_MspInit+0xdc>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	4b28      	ldr	r3, [pc, #160]	@ (80028dc <HAL_SPI_MspInit+0xdc>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a27      	ldr	r2, [pc, #156]	@ (80028dc <HAL_SPI_MspInit+0xdc>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b25      	ldr	r3, [pc, #148]	@ (80028dc <HAL_SPI_MspInit+0xdc>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	4b22      	ldr	r3, [pc, #136]	@ (80028dc <HAL_SPI_MspInit+0xdc>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	4a21      	ldr	r2, [pc, #132]	@ (80028dc <HAL_SPI_MspInit+0xdc>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	6313      	str	r3, [r2, #48]	@ 0x30
 800285e:	4b1f      	ldr	r3, [pc, #124]	@ (80028dc <HAL_SPI_MspInit+0xdc>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 800286a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800287c:	2305      	movs	r3, #5
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4619      	mov	r1, r3
 8002886:	4816      	ldr	r0, [pc, #88]	@ (80028e0 <HAL_SPI_MspInit+0xe0>)
 8002888:	f005 fb9e 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800288c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800289e:	2305      	movs	r3, #5
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	480d      	ldr	r0, [pc, #52]	@ (80028e0 <HAL_SPI_MspInit+0xe0>)
 80028aa:	f005 fb8d 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80028ae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80028b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028c0:	2305      	movs	r3, #5
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	4619      	mov	r1, r3
 80028ca:	4806      	ldr	r0, [pc, #24]	@ (80028e4 <HAL_SPI_MspInit+0xe4>)
 80028cc:	f005 fb7c 	bl	8007fc8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80028d0:	bf00      	nop
 80028d2:	3728      	adds	r7, #40	@ 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40003800 	.word	0x40003800
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020400 	.word	0x40020400

080028e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002968 <HAL_TIM_Base_MspInit+0x80>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10c      	bne.n	8002914 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028fa:	4b1c      	ldr	r3, [pc, #112]	@ (800296c <HAL_TIM_Base_MspInit+0x84>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	4a1b      	ldr	r2, [pc, #108]	@ (800296c <HAL_TIM_Base_MspInit+0x84>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6453      	str	r3, [r2, #68]	@ 0x44
 8002906:	4b19      	ldr	r3, [pc, #100]	@ (800296c <HAL_TIM_Base_MspInit+0x84>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002912:	e022      	b.n	800295a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a15      	ldr	r2, [pc, #84]	@ (8002970 <HAL_TIM_Base_MspInit+0x88>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10c      	bne.n	8002938 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800291e:	4b13      	ldr	r3, [pc, #76]	@ (800296c <HAL_TIM_Base_MspInit+0x84>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	4a12      	ldr	r2, [pc, #72]	@ (800296c <HAL_TIM_Base_MspInit+0x84>)
 8002924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002928:	6453      	str	r3, [r2, #68]	@ 0x44
 800292a:	4b10      	ldr	r3, [pc, #64]	@ (800296c <HAL_TIM_Base_MspInit+0x84>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
}
 8002936:	e010      	b.n	800295a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <HAL_TIM_Base_MspInit+0x8c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10b      	bne.n	800295a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_TIM_Base_MspInit+0x84>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	4a09      	ldr	r2, [pc, #36]	@ (800296c <HAL_TIM_Base_MspInit+0x84>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800294c:	6453      	str	r3, [r2, #68]	@ 0x44
 800294e:	4b07      	ldr	r3, [pc, #28]	@ (800296c <HAL_TIM_Base_MspInit+0x84>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40010000 	.word	0x40010000
 800296c:	40023800 	.word	0x40023800
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800

08002978 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a13      	ldr	r2, [pc, #76]	@ (80029d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10c      	bne.n	80029a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800298a:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_TIM_PWM_MspInit+0x60>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4a12      	ldr	r2, [pc, #72]	@ (80029d8 <HAL_TIM_PWM_MspInit+0x60>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6413      	str	r3, [r2, #64]	@ 0x40
 8002996:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <HAL_TIM_PWM_MspInit+0x60>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 80029a2:	e010      	b.n	80029c6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM12)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0c      	ldr	r2, [pc, #48]	@ (80029dc <HAL_TIM_PWM_MspInit+0x64>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10b      	bne.n	80029c6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <HAL_TIM_PWM_MspInit+0x60>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <HAL_TIM_PWM_MspInit+0x60>)
 80029b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ba:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <HAL_TIM_PWM_MspInit+0x60>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40001800 	.word	0x40001800

080029e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08c      	sub	sp, #48	@ 0x30
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a44      	ldr	r2, [pc, #272]	@ (8002b10 <HAL_TIM_MspPostInit+0x130>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d11d      	bne.n	8002a3e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	4b44      	ldr	r3, [pc, #272]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a43      	ldr	r2, [pc, #268]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b41      	ldr	r3, [pc, #260]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8002a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	4619      	mov	r1, r3
 8002a36:	4838      	ldr	r0, [pc, #224]	@ (8002b18 <HAL_TIM_MspPostInit+0x138>)
 8002a38:	f005 fac6 	bl	8007fc8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002a3c:	e064      	b.n	8002b08 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM10)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a36      	ldr	r2, [pc, #216]	@ (8002b1c <HAL_TIM_MspPostInit+0x13c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d11c      	bne.n	8002a82 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a48:	4b32      	ldr	r3, [pc, #200]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	4a31      	ldr	r2, [pc, #196]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002a4e:	f043 0320 	orr.w	r3, r3, #32
 8002a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a54:	4b2f      	ldr	r3, [pc, #188]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8002a60:	2340      	movs	r3, #64	@ 0x40
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002a70:	2303      	movs	r3, #3
 8002a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4829      	ldr	r0, [pc, #164]	@ (8002b20 <HAL_TIM_MspPostInit+0x140>)
 8002a7c:	f005 faa4 	bl	8007fc8 <HAL_GPIO_Init>
}
 8002a80:	e042      	b.n	8002b08 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM11)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a27      	ldr	r2, [pc, #156]	@ (8002b24 <HAL_TIM_MspPostInit+0x144>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d11c      	bne.n	8002ac6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a8c:	4b21      	ldr	r3, [pc, #132]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	4a20      	ldr	r2, [pc, #128]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002a92:	f043 0320 	orr.w	r3, r3, #32
 8002a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a98:	4b1e      	ldr	r3, [pc, #120]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8002aa4:	2380      	movs	r3, #128	@ 0x80
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	4619      	mov	r1, r3
 8002abe:	4818      	ldr	r0, [pc, #96]	@ (8002b20 <HAL_TIM_MspPostInit+0x140>)
 8002ac0:	f005 fa82 	bl	8007fc8 <HAL_GPIO_Init>
}
 8002ac4:	e020      	b.n	8002b08 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a17      	ldr	r2, [pc, #92]	@ (8002b28 <HAL_TIM_MspPostInit+0x148>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ad0:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8002adc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <HAL_TIM_MspPostInit+0x134>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002ae8:	2340      	movs	r3, #64	@ 0x40
 8002aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002af8:	2309      	movs	r3, #9
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4619      	mov	r1, r3
 8002b02:	480a      	ldr	r0, [pc, #40]	@ (8002b2c <HAL_TIM_MspPostInit+0x14c>)
 8002b04:	f005 fa60 	bl	8007fc8 <HAL_GPIO_Init>
}
 8002b08:	bf00      	nop
 8002b0a:	3730      	adds	r7, #48	@ 0x30
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40000400 	.word	0x40000400
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40014400 	.word	0x40014400
 8002b20:	40021400 	.word	0x40021400
 8002b24:	40014800 	.word	0x40014800
 8002b28:	40001800 	.word	0x40001800
 8002b2c:	40021c00 	.word	0x40021c00

08002b30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b0b2      	sub	sp, #200	@ 0xc8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4c:	2290      	movs	r2, #144	@ 0x90
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f00e f915 	bl	8010d80 <memset>
  if(huart->Instance==UART5)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7f      	ldr	r2, [pc, #508]	@ (8002d58 <HAL_UART_MspInit+0x228>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d15e      	bne.n	8002c1e <HAL_UART_MspInit+0xee>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002b66:	2300      	movs	r3, #0
 8002b68:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f007 ff4a 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b7a:	f7ff f997 	bl	8001eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b7e:	4b77      	ldr	r3, [pc, #476]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	4a76      	ldr	r2, [pc, #472]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002b84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8a:	4b74      	ldr	r3, [pc, #464]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b92:	623b      	str	r3, [r7, #32]
 8002b94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b96:	4b71      	ldr	r3, [pc, #452]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	4a70      	ldr	r2, [pc, #448]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bae:	4b6b      	ldr	r3, [pc, #428]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	4a6a      	ldr	r2, [pc, #424]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002bb4:	f043 0308 	orr.w	r3, r3, #8
 8002bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bba:	4b68      	ldr	r3, [pc, #416]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8002bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002be0:	2308      	movs	r3, #8
 8002be2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8002be6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002bea:	4619      	mov	r1, r3
 8002bec:	485c      	ldr	r0, [pc, #368]	@ (8002d60 <HAL_UART_MspInit+0x230>)
 8002bee:	f005 f9eb 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8002c10:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002c14:	4619      	mov	r1, r3
 8002c16:	4853      	ldr	r0, [pc, #332]	@ (8002d64 <HAL_UART_MspInit+0x234>)
 8002c18:	f005 f9d6 	bl	8007fc8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c1c:	e098      	b.n	8002d50 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a51      	ldr	r2, [pc, #324]	@ (8002d68 <HAL_UART_MspInit+0x238>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d152      	bne.n	8002cce <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c28:	2340      	movs	r3, #64	@ 0x40
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c34:	4618      	mov	r0, r3
 8002c36:	f007 fee7 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002c40:	f7ff f934 	bl	8001eac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c44:	4b45      	ldr	r3, [pc, #276]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c48:	4a44      	ldr	r2, [pc, #272]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002c4a:	f043 0310 	orr.w	r3, r3, #16
 8002c4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c50:	4b42      	ldr	r3, [pc, #264]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	4a3e      	ldr	r2, [pc, #248]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c68:	4b3c      	ldr	r3, [pc, #240]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c8e:	2307      	movs	r3, #7
 8002c90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002c94:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4834      	ldr	r0, [pc, #208]	@ (8002d6c <HAL_UART_MspInit+0x23c>)
 8002c9c:	f005 f994 	bl	8007fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002ca0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cba:	2307      	movs	r3, #7
 8002cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002cc0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4829      	ldr	r0, [pc, #164]	@ (8002d6c <HAL_UART_MspInit+0x23c>)
 8002cc8:	f005 f97e 	bl	8007fc8 <HAL_GPIO_Init>
}
 8002ccc:	e040      	b.n	8002d50 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART6)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a27      	ldr	r2, [pc, #156]	@ (8002d70 <HAL_UART_MspInit+0x240>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d13b      	bne.n	8002d50 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002cd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f007 fe8e 	bl	800aa08 <HAL_RCCEx_PeriphCLKConfig>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 8002cf2:	f7ff f8db 	bl	8001eac <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cf6:	4b19      	ldr	r3, [pc, #100]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	4a18      	ldr	r2, [pc, #96]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002cfc:	f043 0320 	orr.w	r3, r3, #32
 8002d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d02:	4b16      	ldr	r3, [pc, #88]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4a12      	ldr	r2, [pc, #72]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002d14:	f043 0304 	orr.w	r3, r3, #4
 8002d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_UART_MspInit+0x22c>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8002d26:	23c0      	movs	r3, #192	@ 0xc0
 8002d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d3e:	2308      	movs	r3, #8
 8002d40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d44:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4805      	ldr	r0, [pc, #20]	@ (8002d60 <HAL_UART_MspInit+0x230>)
 8002d4c:	f005 f93c 	bl	8007fc8 <HAL_GPIO_Init>
}
 8002d50:	bf00      	nop
 8002d52:	37c8      	adds	r7, #200	@ 0xc8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40005000 	.word	0x40005000
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020800 	.word	0x40020800
 8002d64:	40020c00 	.word	0x40020c00
 8002d68:	40011000 	.word	0x40011000
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40011400 	.word	0x40011400

08002d74 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08e      	sub	sp, #56	@ 0x38
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_HS)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a5a      	ldr	r2, [pc, #360]	@ (8002efc <HAL_PCD_MspInit+0x188>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	f040 80ae 	bne.w	8002ef4 <HAL_PCD_MspInit+0x180>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d98:	4b59      	ldr	r3, [pc, #356]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9c:	4a58      	ldr	r2, [pc, #352]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002d9e:	f043 0302 	orr.w	r3, r3, #2
 8002da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da4:	4b56      	ldr	r3, [pc, #344]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	623b      	str	r3, [r7, #32]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002db0:	4b53      	ldr	r3, [pc, #332]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	4a52      	ldr	r2, [pc, #328]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dbc:	4b50      	ldr	r3, [pc, #320]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de0:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	4a46      	ldr	r2, [pc, #280]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dec:	4b44      	ldr	r3, [pc, #272]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df8:	4b41      	ldr	r3, [pc, #260]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfc:	4a40      	ldr	r2, [pc, #256]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e04:	4b3e      	ldr	r3, [pc, #248]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	693b      	ldr	r3, [r7, #16]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002e10:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e22:	230a      	movs	r3, #10
 8002e24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4835      	ldr	r0, [pc, #212]	@ (8002f04 <HAL_PCD_MspInit+0x190>)
 8002e2e:	f005 f8cb 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8002e32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e44:	230a      	movs	r3, #10
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8002e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	482e      	ldr	r0, [pc, #184]	@ (8002f08 <HAL_PCD_MspInit+0x194>)
 8002e50:	f005 f8ba 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002e54:	2310      	movs	r3, #16
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e60:	2303      	movs	r3, #3
 8002e62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e64:	230a      	movs	r3, #10
 8002e66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4827      	ldr	r0, [pc, #156]	@ (8002f0c <HAL_PCD_MspInit+0x198>)
 8002e70:	f005 f8aa 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8002e74:	2301      	movs	r3, #1
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e80:	2303      	movs	r3, #3
 8002e82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e84:	230a      	movs	r3, #10
 8002e86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8002e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4820      	ldr	r0, [pc, #128]	@ (8002f10 <HAL_PCD_MspInit+0x19c>)
 8002e90:	f005 f89a 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002e94:	2328      	movs	r3, #40	@ 0x28
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ea4:	230a      	movs	r3, #10
 8002ea6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eac:	4619      	mov	r1, r3
 8002eae:	4819      	ldr	r0, [pc, #100]	@ (8002f14 <HAL_PCD_MspInit+0x1a0>)
 8002eb0:	f005 f88a 	bl	8007fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002eb4:	4b12      	ldr	r3, [pc, #72]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	4a11      	ldr	r2, [pc, #68]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002eba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002ed2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed8:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_PCD_MspInit+0x18c>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2105      	movs	r1, #5
 8002ee8:	204d      	movs	r0, #77	@ 0x4d
 8002eea:	f003 fbef 	bl	80066cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002eee:	204d      	movs	r0, #77	@ 0x4d
 8002ef0:	f003 fc08 	bl	8006704 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002ef4:	bf00      	nop
 8002ef6:	3738      	adds	r7, #56	@ 0x38
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40040000 	.word	0x40040000
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020400 	.word	0x40020400
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40021c00 	.word	0x40021c00
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40020000 	.word	0x40020000

08002f18 <HAL_WWDG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hwwdg: WWDG handle pointer
  * @retval None
  */
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <HAL_WWDG_MspInit+0x38>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10b      	bne.n	8002f42 <HAL_WWDG_MspInit+0x2a>
  {
    /* USER CODE BEGIN WWDG_MspInit 0 */

    /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_WWDG_MspInit+0x3c>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	4a09      	ldr	r2, [pc, #36]	@ (8002f54 <HAL_WWDG_MspInit+0x3c>)
 8002f30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f36:	4b07      	ldr	r3, [pc, #28]	@ (8002f54 <HAL_WWDG_MspInit+0x3c>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END WWDG_MspInit 1 */

  }

}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40002c00 	.word	0x40002c00
 8002f54:	40023800 	.word	0x40023800

08002f58 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800305c <HAL_FMC_MspInit+0x104>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d16f      	bne.n	8003054 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002f74:	4b39      	ldr	r3, [pc, #228]	@ (800305c <HAL_FMC_MspInit+0x104>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002f7a:	4b39      	ldr	r3, [pc, #228]	@ (8003060 <HAL_FMC_MspInit+0x108>)
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	4a38      	ldr	r2, [pc, #224]	@ (8003060 <HAL_FMC_MspInit+0x108>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6393      	str	r3, [r2, #56]	@ 0x38
 8002f86:	4b36      	ldr	r3, [pc, #216]	@ (8003060 <HAL_FMC_MspInit+0x108>)
 8002f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002f92:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002f96:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fa4:	230c      	movs	r3, #12
 8002fa6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	4619      	mov	r1, r3
 8002fac:	482d      	ldr	r0, [pc, #180]	@ (8003064 <HAL_FMC_MspInit+0x10c>)
 8002fae:	f005 f80b 	bl	8007fc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8002fb2:	f248 1337 	movw	r3, #33079	@ 0x8137
 8002fb6:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fc4:	230c      	movs	r3, #12
 8002fc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4826      	ldr	r0, [pc, #152]	@ (8003068 <HAL_FMC_MspInit+0x110>)
 8002fce:	f004 fffb 	bl	8007fc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002fd2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002fd6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fe4:	230c      	movs	r3, #12
 8002fe6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	4619      	mov	r1, r3
 8002fec:	481f      	ldr	r0, [pc, #124]	@ (800306c <HAL_FMC_MspInit+0x114>)
 8002fee:	f004 ffeb 	bl	8007fc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8002ff2:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8002ff6:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003000:	2303      	movs	r3, #3
 8003002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003004:	230c      	movs	r3, #12
 8003006:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003008:	1d3b      	adds	r3, r7, #4
 800300a:	4619      	mov	r1, r3
 800300c:	4818      	ldr	r0, [pc, #96]	@ (8003070 <HAL_FMC_MspInit+0x118>)
 800300e:	f004 ffdb 	bl	8007fc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003012:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003016:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003020:	2303      	movs	r3, #3
 8003022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003024:	230c      	movs	r3, #12
 8003026:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	4619      	mov	r1, r3
 800302c:	4811      	ldr	r0, [pc, #68]	@ (8003074 <HAL_FMC_MspInit+0x11c>)
 800302e:	f004 ffcb 	bl	8007fc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8003032:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 8003036:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003040:	2303      	movs	r3, #3
 8003042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003044:	230c      	movs	r3, #12
 8003046:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	4619      	mov	r1, r3
 800304c:	480a      	ldr	r0, [pc, #40]	@ (8003078 <HAL_FMC_MspInit+0x120>)
 800304e:	f004 ffbb 	bl	8007fc8 <HAL_GPIO_Init>
 8003052:	e000      	b.n	8003056 <HAL_FMC_MspInit+0xfe>
    return;
 8003054:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20001440 	.word	0x20001440
 8003060:	40023800 	.word	0x40023800
 8003064:	40021000 	.word	0x40021000
 8003068:	40021800 	.word	0x40021800
 800306c:	40020c00 	.word	0x40020c00
 8003070:	40022000 	.word	0x40022000
 8003074:	40021400 	.word	0x40021400
 8003078:	40021c00 	.word	0x40021c00

0800307c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003084:	f7ff ff68 	bl	8002f58 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	@ 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a48      	ldr	r2, [pc, #288]	@ (80031c0 <HAL_SAI_MspInit+0x130>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d134      	bne.n	800310c <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80030a2:	4b48      	ldr	r3, [pc, #288]	@ (80031c4 <HAL_SAI_MspInit+0x134>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80030aa:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <HAL_SAI_MspInit+0x138>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	4a46      	ldr	r2, [pc, #280]	@ (80031c8 <HAL_SAI_MspInit+0x138>)
 80030b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030b6:	4b44      	ldr	r3, [pc, #272]	@ (80031c8 <HAL_SAI_MspInit+0x138>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80030c2:	4b40      	ldr	r3, [pc, #256]	@ (80031c4 <HAL_SAI_MspInit+0x134>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3301      	adds	r3, #1
 80030c8:	4a3e      	ldr	r2, [pc, #248]	@ (80031c4 <HAL_SAI_MspInit+0x134>)
 80030ca:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 80030cc:	2370      	movs	r3, #112	@ 0x70
 80030ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80030dc:	2306      	movs	r3, #6
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4619      	mov	r1, r3
 80030e6:	4839      	ldr	r0, [pc, #228]	@ (80031cc <HAL_SAI_MspInit+0x13c>)
 80030e8:	f004 ff6e 	bl	8007fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80030ec:	2380      	movs	r3, #128	@ 0x80
 80030ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f8:	2300      	movs	r3, #0
 80030fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80030fc:	2306      	movs	r3, #6
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	4619      	mov	r1, r3
 8003106:	4832      	ldr	r0, [pc, #200]	@ (80031d0 <HAL_SAI_MspInit+0x140>)
 8003108:	f004 ff5e 	bl	8007fc8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a30      	ldr	r2, [pc, #192]	@ (80031d4 <HAL_SAI_MspInit+0x144>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d124      	bne.n	8003160 <HAL_SAI_MspInit+0xd0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8003116:	4b2b      	ldr	r3, [pc, #172]	@ (80031c4 <HAL_SAI_MspInit+0x134>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10b      	bne.n	8003136 <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800311e:	4b2a      	ldr	r3, [pc, #168]	@ (80031c8 <HAL_SAI_MspInit+0x138>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	4a29      	ldr	r2, [pc, #164]	@ (80031c8 <HAL_SAI_MspInit+0x138>)
 8003124:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003128:	6453      	str	r3, [r2, #68]	@ 0x44
 800312a:	4b27      	ldr	r3, [pc, #156]	@ (80031c8 <HAL_SAI_MspInit+0x138>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003136:	4b23      	ldr	r3, [pc, #140]	@ (80031c4 <HAL_SAI_MspInit+0x134>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3301      	adds	r3, #1
 800313c:	4a21      	ldr	r2, [pc, #132]	@ (80031c4 <HAL_SAI_MspInit+0x134>)
 800313e:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8003140:	2308      	movs	r3, #8
 8003142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2300      	movs	r3, #0
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003150:	2306      	movs	r3, #6
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	481c      	ldr	r0, [pc, #112]	@ (80031cc <HAL_SAI_MspInit+0x13c>)
 800315c:	f004 ff34 	bl	8007fc8 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1c      	ldr	r2, [pc, #112]	@ (80031d8 <HAL_SAI_MspInit+0x148>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d125      	bne.n	80031b6 <HAL_SAI_MspInit+0x126>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800316a:	4b1c      	ldr	r3, [pc, #112]	@ (80031dc <HAL_SAI_MspInit+0x14c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <HAL_SAI_MspInit+0xfa>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003172:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <HAL_SAI_MspInit+0x138>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	4a14      	ldr	r2, [pc, #80]	@ (80031c8 <HAL_SAI_MspInit+0x138>)
 8003178:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800317c:	6453      	str	r3, [r2, #68]	@ 0x44
 800317e:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <HAL_SAI_MspInit+0x138>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 800318a:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <HAL_SAI_MspInit+0x14c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	4a12      	ldr	r2, [pc, #72]	@ (80031dc <HAL_SAI_MspInit+0x14c>)
 8003192:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8003194:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80031a6:	230a      	movs	r3, #10
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	4619      	mov	r1, r3
 80031b0:	480b      	ldr	r0, [pc, #44]	@ (80031e0 <HAL_SAI_MspInit+0x150>)
 80031b2:	f004 ff09 	bl	8007fc8 <HAL_GPIO_Init>

    }
}
 80031b6:	bf00      	nop
 80031b8:	3728      	adds	r7, #40	@ 0x28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40015804 	.word	0x40015804
 80031c4:	20001444 	.word	0x20001444
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40021800 	.word	0x40021800
 80031d4:	40015824 	.word	0x40015824
 80031d8:	40015c04 	.word	0x40015c04
 80031dc:	20001448 	.word	0x20001448
 80031e0:	40020c00 	.word	0x40020c00

080031e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	@ 0x38
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80031f4:	4b33      	ldr	r3, [pc, #204]	@ (80032c4 <HAL_InitTick+0xe0>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	4a32      	ldr	r2, [pc, #200]	@ (80032c4 <HAL_InitTick+0xe0>)
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003200:	4b30      	ldr	r3, [pc, #192]	@ (80032c4 <HAL_InitTick+0xe0>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800320c:	f107 0210 	add.w	r2, r7, #16
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f007 fbc4 	bl	800a9a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003226:	f007 fb95 	bl	800a954 <HAL_RCC_GetPCLK1Freq>
 800322a:	6378      	str	r0, [r7, #52]	@ 0x34
 800322c:	e004      	b.n	8003238 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800322e:	f007 fb91 	bl	800a954 <HAL_RCC_GetPCLK1Freq>
 8003232:	4603      	mov	r3, r0
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323a:	4a23      	ldr	r2, [pc, #140]	@ (80032c8 <HAL_InitTick+0xe4>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	0c9b      	lsrs	r3, r3, #18
 8003242:	3b01      	subs	r3, #1
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003246:	4b21      	ldr	r3, [pc, #132]	@ (80032cc <HAL_InitTick+0xe8>)
 8003248:	4a21      	ldr	r2, [pc, #132]	@ (80032d0 <HAL_InitTick+0xec>)
 800324a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800324c:	4b1f      	ldr	r3, [pc, #124]	@ (80032cc <HAL_InitTick+0xe8>)
 800324e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003252:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003254:	4a1d      	ldr	r2, [pc, #116]	@ (80032cc <HAL_InitTick+0xe8>)
 8003256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003258:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800325a:	4b1c      	ldr	r3, [pc, #112]	@ (80032cc <HAL_InitTick+0xe8>)
 800325c:	2200      	movs	r2, #0
 800325e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003260:	4b1a      	ldr	r3, [pc, #104]	@ (80032cc <HAL_InitTick+0xe8>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003266:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_InitTick+0xe8>)
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800326c:	4817      	ldr	r0, [pc, #92]	@ (80032cc <HAL_InitTick+0xe8>)
 800326e:	f008 ffbc 	bl	800c1ea <HAL_TIM_Base_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003278:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800327c:	2b00      	cmp	r3, #0
 800327e:	d11b      	bne.n	80032b8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003280:	4812      	ldr	r0, [pc, #72]	@ (80032cc <HAL_InitTick+0xe8>)
 8003282:	f009 f809 	bl	800c298 <HAL_TIM_Base_Start_IT>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800328c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003290:	2b00      	cmp	r3, #0
 8003292:	d111      	bne.n	80032b8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003294:	2036      	movs	r0, #54	@ 0x36
 8003296:	f003 fa35 	bl	8006704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b0f      	cmp	r3, #15
 800329e:	d808      	bhi.n	80032b2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80032a0:	2200      	movs	r2, #0
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	2036      	movs	r0, #54	@ 0x36
 80032a6:	f003 fa11 	bl	80066cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032aa:	4a0a      	ldr	r2, [pc, #40]	@ (80032d4 <HAL_InitTick+0xf0>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	e002      	b.n	80032b8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80032b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3738      	adds	r7, #56	@ 0x38
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	431bde83 	.word	0x431bde83
 80032cc:	2000144c 	.word	0x2000144c
 80032d0:	40001000 	.word	0x40001000
 80032d4:	20000004 	.word	0x20000004

080032d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032dc:	bf00      	nop
 80032de:	e7fd      	b.n	80032dc <NMI_Handler+0x4>

080032e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <HardFault_Handler+0x4>

080032e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <MemManage_Handler+0x4>

080032f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <BusFault_Handler+0x4>

080032f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <UsageFault_Handler+0x4>

08003300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003314:	4802      	ldr	r0, [pc, #8]	@ (8003320 <TIM6_DAC_IRQHandler+0x10>)
 8003316:	f009 f88e 	bl	800c436 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000144c 	.word	0x2000144c

08003324 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003328:	4802      	ldr	r0, [pc, #8]	@ (8003334 <OTG_HS_IRQHandler+0x10>)
 800332a:	f005 fdc1 	bl	8008eb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000efc 	.word	0x20000efc

08003338 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800333c:	4802      	ldr	r0, [pc, #8]	@ (8003348 <LTDC_IRQHandler+0x10>)
 800333e:	f005 fa2a 	bl	8008796 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000898 	.word	0x20000898

0800334c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003350:	4802      	ldr	r0, [pc, #8]	@ (800335c <DMA2D_IRQHandler+0x10>)
 8003352:	f003 fb31 	bl	80069b8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000678 	.word	0x20000678

08003360 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8003364:	4802      	ldr	r0, [pc, #8]	@ (8003370 <CEC_IRQHandler+0x10>)
 8003366:	f002 fffe 	bl	8006366 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	2000079c 	.word	0x2000079c

08003374 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8003378:	4802      	ldr	r0, [pc, #8]	@ (8003384 <DSI_IRQHandler+0x10>)
 800337a:	f003 ff07 	bl	800718c <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200006d0 	.word	0x200006d0

08003388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return 1;
 800338c:	2301      	movs	r3, #1
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <_kill>:

int _kill(int pid, int sig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033a2:	f00d fd4f 	bl	8010e44 <__errno>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2216      	movs	r2, #22
 80033aa:	601a      	str	r2, [r3, #0]
  return -1;
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <_exit>:

void _exit (int status)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ffe7 	bl	8003398 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033ca:	bf00      	nop
 80033cc:	e7fd      	b.n	80033ca <_exit+0x12>

080033ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e00a      	b.n	80033f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033e0:	f3af 8000 	nop.w
 80033e4:	4601      	mov	r1, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	60ba      	str	r2, [r7, #8]
 80033ec:	b2ca      	uxtb	r2, r1
 80033ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3301      	adds	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	dbf0      	blt.n	80033e0 <_read+0x12>
  }

  return len;
 80033fe:	687b      	ldr	r3, [r7, #4]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e009      	b.n	800342e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	60ba      	str	r2, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	3301      	adds	r3, #1
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	dbf1      	blt.n	800341a <_write+0x12>
  }
  return len;
 8003436:	687b      	ldr	r3, [r7, #4]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_close>:

int _close(int file)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003468:	605a      	str	r2, [r3, #4]
  return 0;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <_isatty>:

int _isatty(int file)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003480:	2301      	movs	r3, #1
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b0:	4a14      	ldr	r2, [pc, #80]	@ (8003504 <_sbrk+0x5c>)
 80034b2:	4b15      	ldr	r3, [pc, #84]	@ (8003508 <_sbrk+0x60>)
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034bc:	4b13      	ldr	r3, [pc, #76]	@ (800350c <_sbrk+0x64>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034c4:	4b11      	ldr	r3, [pc, #68]	@ (800350c <_sbrk+0x64>)
 80034c6:	4a12      	ldr	r2, [pc, #72]	@ (8003510 <_sbrk+0x68>)
 80034c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ca:	4b10      	ldr	r3, [pc, #64]	@ (800350c <_sbrk+0x64>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d207      	bcs.n	80034e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034d8:	f00d fcb4 	bl	8010e44 <__errno>
 80034dc:	4603      	mov	r3, r0
 80034de:	220c      	movs	r2, #12
 80034e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	e009      	b.n	80034fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034e8:	4b08      	ldr	r3, [pc, #32]	@ (800350c <_sbrk+0x64>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ee:	4b07      	ldr	r3, [pc, #28]	@ (800350c <_sbrk+0x64>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	4a05      	ldr	r2, [pc, #20]	@ (800350c <_sbrk+0x64>)
 80034f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034fa:	68fb      	ldr	r3, [r7, #12]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20080000 	.word	0x20080000
 8003508:	00000400 	.word	0x00000400
 800350c:	20001498 	.word	0x20001498
 8003510:	20009738 	.word	0x20009738

08003514 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003518:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <SystemInit+0x20>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	4a05      	ldr	r2, [pc, #20]	@ (8003534 <SystemInit+0x20>)
 8003520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003570 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800353c:	f7ff ffea 	bl	8003514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003540:	480c      	ldr	r0, [pc, #48]	@ (8003574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003542:	490d      	ldr	r1, [pc, #52]	@ (8003578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003544:	4a0d      	ldr	r2, [pc, #52]	@ (800357c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003548:	e002      	b.n	8003550 <LoopCopyDataInit>

0800354a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800354a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800354c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354e:	3304      	adds	r3, #4

08003550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003554:	d3f9      	bcc.n	800354a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003556:	4a0a      	ldr	r2, [pc, #40]	@ (8003580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003558:	4c0a      	ldr	r4, [pc, #40]	@ (8003584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800355c:	e001      	b.n	8003562 <LoopFillZerobss>

0800355e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003560:	3204      	adds	r2, #4

08003562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003564:	d3fb      	bcc.n	800355e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8003566:	f00d fc73 	bl	8010e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800356a:	f7fd f8eb 	bl	8000744 <main>
  bx  lr    
 800356e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003570:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003578:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800357c:	08026e40 	.word	0x08026e40
  ldr r2, =_sbss
 8003580:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8003584:	20009738 	.word	0x20009738

08003588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003588:	e7fe      	b.n	8003588 <ADC_IRQHandler>

0800358a <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b0a0      	sub	sp, #128	@ 0x80
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	66bb      	str	r3, [r7, #104]	@ 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 800359a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4413      	add	r3, r2
 80035a2:	677b      	str	r3, [r7, #116]	@ 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	673b      	str	r3, [r7, #112]	@ 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	667b      	str	r3, [r7, #100]	@ 0x64
    pCol2 = p2;
 80035ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035b0:	663b      	str	r3, [r7, #96]	@ 0x60

    //    Define new length
    L >>= 1;
 80035b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 80035b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	4413      	add	r3, r2
 80035c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pMid2 = p2 + L;
 80035c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035c8:	4413      	add	r3, r2
 80035ca:	67bb      	str	r3, [r7, #120]	@ 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 80035cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035d2:	e1b6      	b.n	8003942 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	63bb      	str	r3, [r7, #56]	@ 0x38
        t1[1] = p1[1];
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        t1[2] = p1[2];
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	643b      	str	r3, [r7, #64]	@ 0x40
        t1[3] = p1[3];
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	647b      	str	r3, [r7, #68]	@ 0x44

        t2[0] = p2[0];
 80035ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        t2[1] = p2[1];
 80035f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        t2[2] = p2[2];
 80035f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	633b      	str	r3, [r7, #48]	@ 0x30
        t2[3] = p2[3];
 80035fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	637b      	str	r3, [r7, #52]	@ 0x34

        t3[0] = pMid1[0];
 8003604:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 800360a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8003610:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8003616:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24

        t4[0] = pMid2[0];
 800361c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8003622:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8003628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 800362e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8003634:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003638:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	1d1a      	adds	r2, r3, #4
 8003640:	603a      	str	r2, [r7, #0]
 8003642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003646:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 800364a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800364e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	1d1a      	adds	r2, r3, #4
 8003656:	603a      	str	r2, [r7, #0]
 8003658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8003660:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003664:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1d1a      	adds	r2, r3, #4
 800366c:	603a      	str	r2, [r7, #0]
 800366e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003672:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8003676:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800367a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	603a      	str	r2, [r7, #0]
 8003684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003688:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 800368c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003690:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003698:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        t2[1] = t1[1] - t2[1];
 800369c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80036a0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80036a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036a8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        t2[2] = t1[2] - t2[2];
 80036ac:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80036b0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80036b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 80036bc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80036c0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80036c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036c8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

        *pMid1++ = t3[0] + t4[0];
 80036cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80036d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80036d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036de:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 80036e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036ec:	1d1a      	adds	r2, r3, #4
 80036ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f4:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80036f8:	ed97 7a08 	vldr	s14, [r7, #32]
 80036fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003700:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370a:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 800370e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003712:	edd7 7a05 	vldr	s15, [r7, #20]
 8003716:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003718:	1d1a      	adds	r2, r3, #4
 800371a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800371c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003720:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8003724:	ed97 7a02 	vldr	s14, [r7, #8]
 8003728:	edd7 7a06 	vldr	s15, [r7, #24]
 800372c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003730:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8003734:	ed97 7a03 	vldr	s14, [r7, #12]
 8003738:	edd7 7a07 	vldr	s15, [r7, #28]
 800373c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003740:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8003744:	ed97 7a04 	vldr	s14, [r7, #16]
 8003748:	edd7 7a08 	vldr	s15, [r7, #32]
 800374c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003750:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8003754:	ed97 7a05 	vldr	s14, [r7, #20]
 8003758:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800375c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003760:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8003764:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003766:	1d1a      	adds	r2, r3, #4
 8003768:	673a      	str	r2, [r7, #112]	@ 0x70
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        twI = *tw++;
 800376e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	673a      	str	r2, [r7, #112]	@ 0x70
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	65bb      	str	r3, [r7, #88]	@ 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8003778:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800377c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003784:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
        m1 = t2[1] * twI;
 8003788:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800378c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003794:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        m2 = t2[1] * twR;
 8003798:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800379c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80037a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        m3 = t2[0] * twI;
 80037a8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80037ac:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80037b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80037b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ba:	1d1a      	adds	r2, r3, #4
 80037bc:	677a      	str	r2, [r7, #116]	@ 0x74
 80037be:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80037c2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80037c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ca:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80037ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037d0:	1d1a      	adds	r2, r3, #4
 80037d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80037d4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80037d8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80037dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e0:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80037e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80037e8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80037ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
        m1 = t4[1] * twR;
 80037f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80037f8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80037fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003800:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        m2 = t4[1] * twI;
 8003804:	edd7 7a03 	vldr	s15, [r7, #12]
 8003808:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800380c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003810:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        m3 = t4[0] * twR;
 8003814:	edd7 7a02 	vldr	s15, [r7, #8]
 8003818:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800381c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003820:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

        *pMid2++ = m0 - m1;
 8003824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003826:	1d1a      	adds	r2, r3, #4
 8003828:	67ba      	str	r2, [r7, #120]	@ 0x78
 800382a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800382e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003836:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 800383a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800383c:	1d1a      	adds	r2, r3, #4
 800383e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003840:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003844:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384c:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8003850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003852:	1d1a      	adds	r2, r3, #4
 8003854:	673a      	str	r2, [r7, #112]	@ 0x70
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	65fb      	str	r3, [r7, #92]	@ 0x5c
        twI = *tw++;
 800385a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800385c:	1d1a      	adds	r2, r3, #4
 800385e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	65bb      	str	r3, [r7, #88]	@ 0x58

        m0 = t2[2] * twR;
 8003864:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003868:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800386c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003870:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
        m1 = t2[3] * twI;
 8003874:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003878:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800387c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003880:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        m2 = t2[3] * twR;
 8003884:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003888:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800388c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003890:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        m3 = t2[2] * twI;
 8003894:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003898:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

        *p2++ = m0 + m1;
 80038a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80038aa:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80038ae:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80038b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b6:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80038ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038bc:	1d1a      	adds	r2, r3, #4
 80038be:	677a      	str	r2, [r7, #116]	@ 0x74
 80038c0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80038c4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80038c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038cc:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 80038d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80038d4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80038d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038dc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
        m1 = t4[3] * twR;
 80038e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038e4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80038e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ec:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        m2 = t4[3] * twI;
 80038f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038f4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80038f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fc:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        m3 = t4[2] * twR;
 8003900:	edd7 7a04 	vldr	s15, [r7, #16]
 8003904:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

        *pMid2++ = m0 - m1;
 8003910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003916:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800391a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800391e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003922:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8003926:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003928:	1d1a      	adds	r2, r3, #4
 800392a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800392c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003930:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003938:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 800393c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800393e:	3b01      	subs	r3, #1
 8003940:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003944:	2b00      	cmp	r3, #0
 8003946:	f47f ae45 	bne.w	80035d4 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800394a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800394c:	b299      	uxth	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	2302      	movs	r3, #2
 8003954:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003956:	f000 fef7 	bl	8004748 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800395a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800395c:	b299      	uxth	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	2302      	movs	r3, #2
 8003964:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003966:	f000 feef 	bl	8004748 <arm_radix8_butterfly_f32>
}
 800396a:	bf00      	nop
 800396c:	3780      	adds	r7, #128	@ 0x80
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b0ac      	sub	sp, #176	@ 0xb0
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	b29b      	uxth	r3, r3
 8003984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8003988:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	4413      	add	r3, r2
 8003992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 8003996:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80039a0:	4413      	add	r3, r2
 80039a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 80039a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80039b0:	4413      	add	r3, r2
 80039b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 80039ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039be:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 80039c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c4:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 80039c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039ca:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80039cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039d0:	3b04      	subs	r3, #4
 80039d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 80039d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039da:	3b04      	subs	r3, #4
 80039dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 80039e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039e4:	3b04      	subs	r3, #4
 80039e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 80039ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80039f4:	4413      	add	r3, r2
 80039f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 8003a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 8003a20:	2304      	movs	r3, #4
 8003a22:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 8003a24:	2306      	movs	r3, #6
 8003a26:	667b      	str	r3, [r7, #100]	@ 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	ed93 7a00 	vldr	s14, [r3]
 8003a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a32:	edd3 7a00 	vldr	s15, [r3]
 8003a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a3a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	ed93 7a00 	vldr	s14, [r3]
 8003a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a50:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	3304      	adds	r3, #4
 8003a58:	ed93 7a00 	vldr	s14, [r3]
 8003a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a60:	3304      	adds	r3, #4
 8003a62:	edd3 7a00 	vldr	s15, [r3]
 8003a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a6a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	3304      	adds	r3, #4
 8003a72:	ed93 7a00 	vldr	s14, [r3]
 8003a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a84:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003a88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	ed93 7a00 	vldr	s14, [r3]
 8003a92:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	edd3 7a00 	vldr	s15, [r3]
 8003aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ac0:	edd3 7a00 	vldr	s15, [r3]
 8003ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003acc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ad0:	edd3 7a00 	vldr	s15, [r3]
 8003ad4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ae0:	edd3 7a00 	vldr	s15, [r3]
 8003ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae8:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003af0:	3304      	adds	r3, #4
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003afa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b02:	3304      	adds	r3, #4
 8003b04:	edd3 7a00 	vldr	s15, [r3]
 8003b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b0c:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b14:	3304      	adds	r3, #4
 8003b16:	edd3 7a00 	vldr	s15, [r3]
 8003b1a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b26:	3304      	adds	r3, #4
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b30:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003b34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b38:	ed93 7a00 	vldr	s14, [r3]
 8003b3c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003b40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b50:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b58:	ed93 7a00 	vldr	s14, [r3]
 8003b5c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003b60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	1d1a      	adds	r2, r3, #4
 8003b70:	603a      	str	r2, [r7, #0]
 8003b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b76:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b7e:	3304      	adds	r3, #4
 8003b80:	ed93 7a00 	vldr	s14, [r3]
 8003b84:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b90:	3304      	adds	r3, #4
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	1d1a      	adds	r2, r3, #4
 8003b9a:	603a      	str	r2, [r7, #0]
 8003b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba0:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8003ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ba8:	1d1a      	adds	r2, r3, #4
 8003baa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bb0:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8003bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bbe:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8003bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bc4:	1d1a      	adds	r2, r3, #4
 8003bc6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8003bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8003bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003be0:	1d1a      	adds	r2, r3, #4
 8003be2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8003bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bee:	1d1a      	adds	r2, r3, #4
 8003bf0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8003bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003c00:	4413      	add	r3, r2
 8003c02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8003c06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003c0e:	4413      	add	r3, r2
 8003c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8003c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8003c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c26:	3b02      	subs	r3, #2
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c2e:	e31c      	b.n	800426a <arm_cfft_radix8by4_f32+0x8f8>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	ed93 7a00 	vldr	s14, [r3]
 8003c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c3a:	edd3 7a00 	vldr	s15, [r3]
 8003c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c42:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        p1sp3_0 = p1[0] - p3[0];
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	ed93 7a00 	vldr	s14, [r3]
 8003c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c50:	edd3 7a00 	vldr	s15, [r3]
 8003c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c58:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	ed93 7a00 	vldr	s14, [r3]
 8003c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c68:	3304      	adds	r3, #4
 8003c6a:	edd3 7a00 	vldr	s15, [r3]
 8003c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c72:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
        p1sp3_1 = p1[1] - p3[1];
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	ed93 7a00 	vldr	s14, [r3]
 8003c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c82:	3304      	adds	r3, #4
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c8c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003c90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c94:	3304      	adds	r3, #4
 8003c96:	ed93 7a00 	vldr	s14, [r3]
 8003c9a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003cb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cb8:	edd3 7a00 	vldr	s15, [r3]
 8003cbc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cd8:	edd3 7a00 	vldr	s15, [r3]
 8003cdc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003ce0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ce8:	edd3 7a00 	vldr	s15, [r3]
 8003cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf0:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003cf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	edd3 7a00 	vldr	s15, [r3]
 8003cfe:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003d02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	edd3 7a00 	vldr	s15, [r3]
 8003d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d14:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	edd3 7a00 	vldr	s15, [r3]
 8003d22:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d2e:	3304      	adds	r3, #4
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d38:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003d3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d40:	ed93 7a00 	vldr	s14, [r3]
 8003d44:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d50:	edd3 7a00 	vldr	s15, [r3]
 8003d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d58:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d60:	ed93 7a00 	vldr	s14, [r3]
 8003d64:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d70:	edd3 7a00 	vldr	s15, [r3]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	1d1a      	adds	r2, r3, #4
 8003d78:	603a      	str	r2, [r7, #0]
 8003d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d7e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d86:	3304      	adds	r3, #4
 8003d88:	ed93 7a00 	vldr	s14, [r3]
 8003d8c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d98:	3304      	adds	r3, #4
 8003d9a:	edd3 7a00 	vldr	s15, [r3]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	1d1a      	adds	r2, r3, #4
 8003da2:	603a      	str	r2, [r7, #0]
 8003da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da8:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8003dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003db0:	3b04      	subs	r3, #4
 8003db2:	ed93 7a00 	vldr	s14, [r3]
 8003db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc4:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8003dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dcc:	3b04      	subs	r3, #4
 8003dce:	ed93 7a00 	vldr	s14, [r3]
 8003dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dd6:	3b04      	subs	r3, #4
 8003dd8:	edd3 7a00 	vldr	s15, [r3]
 8003ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8003de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003de8:	ed93 7a00 	vldr	s14, [r3]
 8003dec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003df0:	edd3 7a00 	vldr	s15, [r3]
 8003df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003df8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8003dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e00:	ed93 7a00 	vldr	s14, [r3]
 8003e04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e10:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8003e14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e18:	ed93 7a00 	vldr	s14, [r3]
 8003e1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e28:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e30:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8003e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e38:	ed93 7a00 	vldr	s14, [r3]
 8003e3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e40:	edd3 7a00 	vldr	s15, [r3]
 8003e44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e4c:	3b04      	subs	r3, #4
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	edd3 7a00 	vldr	s15, [r3]
 8003e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e64:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8003e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e6c:	3b04      	subs	r3, #4
 8003e6e:	edd3 7a00 	vldr	s15, [r3]
 8003e72:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003e76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e7e:	3b04      	subs	r3, #4
 8003e80:	edd3 7a00 	vldr	s15, [r3]
 8003e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8003e8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e90:	edd3 7a00 	vldr	s15, [r3]
 8003e94:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003e98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ea0:	edd3 7a00 	vldr	s15, [r3]
 8003ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8003eac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003eb0:	ed93 7a00 	vldr	s14, [r3]
 8003eb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ec0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec8:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8003ecc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ed0:	3b04      	subs	r3, #4
 8003ed2:	ed93 7a00 	vldr	s14, [r3]
 8003ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003eda:	3b04      	subs	r3, #4
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ee4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eec:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8003ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ef4:	ed93 7a00 	vldr	s14, [r3]
 8003ef8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f04:	edd3 7a00 	vldr	s15, [r3]
 8003f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f0c:	1f1a      	subs	r2, r3, #4
 8003f0e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f16:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8003f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f1e:	3b04      	subs	r3, #4
 8003f20:	ed93 7a00 	vldr	s14, [r3]
 8003f24:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f30:	3b04      	subs	r3, #4
 8003f32:	edd3 7a00 	vldr	s15, [r3]
 8003f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f3a:	1f1a      	subs	r2, r3, #4
 8003f3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f44:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8003f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f4c:	1d1a      	adds	r2, r3, #4
 8003f4e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	653b      	str	r3, [r7, #80]	@ 0x50
        twI = *tw2++;
 8003f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 8003f64:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f68:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f70:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        m1 = t2[1] * twI;
 8003f74:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003f78:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f80:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        m2 = t2[1] * twR;
 8003f84:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003f88:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f90:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        m3 = t2[0] * twI;
 8003f94:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f98:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        *p2++ = m0 + m1;
 8003fa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fa8:	1d1a      	adds	r2, r3, #4
 8003faa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003fae:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003fb2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fba:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8003fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fc2:	1d1a      	adds	r2, r3, #4
 8003fc4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003fc8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003fcc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fd4:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8003fd8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003fdc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        m1 = t2[2] * twR;
 8003fe8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003fec:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        m2 = t2[2] * twI;
 8003ff8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003ffc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004004:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        m3 = t2[3] * twR;
 8004008:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800400c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004014:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        *pEnd2-- = m0 - m1;
 8004018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800401c:	1f1a      	subs	r2, r3, #4
 800401e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004022:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004026:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800402a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800402e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8004032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004036:	1f1a      	subs	r2, r3, #4
 8004038:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800403c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004040:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004048:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 800404c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	653b      	str	r3, [r7, #80]	@ 0x50
        twI = tw3[1];
 8004054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004058:	3304      	adds	r3, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        tw3 += twMod3;
 800405e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004066:	4413      	add	r3, r2
 8004068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        // Top
        m0 = t3[0] * twR;
 800406c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004070:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004078:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        m1 = t3[1] * twI;
 800407c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004080:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004088:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        m2 = t3[1] * twR;
 800408c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004090:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004098:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        m3 = t3[0] * twI;
 800409c:	edd7 7a07 	vldr	s15, [r7, #28]
 80040a0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80040a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        *p3++ = m0 + m1;
 80040ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040b0:	1d1a      	adds	r2, r3, #4
 80040b2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040b6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80040ba:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80040be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c2:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 80040c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ca:	1d1a      	adds	r2, r3, #4
 80040cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040d0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80040d4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80040d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040dc:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 80040e0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80040e4:	eef1 7a67 	vneg.f32	s15, s15
 80040e8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80040ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        m1 = t3[2] * twI;
 80040f4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040f8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80040fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004100:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        m2 = t3[2] * twR;
 8004104:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004108:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800410c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004110:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        m3 = t3[3] * twI;
 8004114:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004118:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800411c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004120:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        *pEnd3-- = m0 - m1;
 8004124:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004128:	1f1a      	subs	r2, r3, #4
 800412a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800412e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004132:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800413a:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 800413e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004142:	1f1a      	subs	r2, r3, #4
 8004144:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004148:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800414c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004154:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 8004158:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	653b      	str	r3, [r7, #80]	@ 0x50
        twI = tw4[1];
 8004160:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004164:	3304      	adds	r3, #4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	64fb      	str	r3, [r7, #76]	@ 0x4c
        tw4 += twMod4;
 800416a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004172:	4413      	add	r3, r2
 8004174:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        // Top
        m0 = t4[0] * twR;
 8004178:	edd7 7a03 	vldr	s15, [r7, #12]
 800417c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004184:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        m1 = t4[1] * twI;
 8004188:	edd7 7a04 	vldr	s15, [r7, #16]
 800418c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004194:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        m2 = t4[1] * twR;
 8004198:	edd7 7a04 	vldr	s15, [r7, #16]
 800419c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80041a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        m3 = t4[0] * twI;
 80041a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80041ac:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80041b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        *p4++ = m0 + m1;
 80041b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041bc:	1d1a      	adds	r2, r3, #4
 80041be:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80041c2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80041c6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80041ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ce:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 80041d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041d6:	1d1a      	adds	r2, r3, #4
 80041d8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80041dc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80041e0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80041e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e8:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 80041ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80041f0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80041f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        m1 = t4[2] * twR;
 80041fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004200:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004208:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        m2 = t4[2] * twI;
 800420c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004210:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004218:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        m3 = t4[3] * twR;
 800421c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004220:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004228:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        *pEnd4-- = m0 - m1;
 800422c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004230:	1f1a      	subs	r2, r3, #4
 8004232:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8004236:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800423a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800423e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004242:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8004246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800424a:	1f1a      	subs	r2, r3, #4
 800424c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8004250:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004254:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425c:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8004260:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004264:	3b01      	subs	r3, #1
 8004266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800426a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800426e:	2b00      	cmp	r3, #0
 8004270:	f47f acde 	bne.w	8003c30 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	ed93 7a00 	vldr	s14, [r3]
 800427a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800427e:	edd3 7a00 	vldr	s15, [r3]
 8004282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004286:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	ed93 7a00 	vldr	s14, [r3]
 8004290:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004294:	edd3 7a00 	vldr	s15, [r3]
 8004298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800429c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	3304      	adds	r3, #4
 80042a4:	ed93 7a00 	vldr	s14, [r3]
 80042a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ac:	3304      	adds	r3, #4
 80042ae:	edd3 7a00 	vldr	s15, [r3]
 80042b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	3304      	adds	r3, #4
 80042be:	ed93 7a00 	vldr	s14, [r3]
 80042c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042c6:	3304      	adds	r3, #4
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042d0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80042d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042d8:	3304      	adds	r3, #4
 80042da:	ed93 7a00 	vldr	s14, [r3]
 80042de:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80042e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042ea:	3304      	adds	r3, #4
 80042ec:	edd3 7a00 	vldr	s15, [r3]
 80042f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80042f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042fc:	edd3 7a00 	vldr	s15, [r3]
 8004300:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8004304:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004308:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800430c:	edd3 7a00 	vldr	s15, [r3]
 8004310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004314:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004318:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800431c:	edd3 7a00 	vldr	s15, [r3]
 8004320:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8004324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004328:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800432c:	edd3 7a00 	vldr	s15, [r3]
 8004330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004334:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004338:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800433c:	3304      	adds	r3, #4
 800433e:	edd3 7a00 	vldr	s15, [r3]
 8004342:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8004346:	ee37 7a67 	vsub.f32	s14, s14, s15
 800434a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800434e:	3304      	adds	r3, #4
 8004350:	edd3 7a00 	vldr	s15, [r3]
 8004354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004358:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800435c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004360:	3304      	adds	r3, #4
 8004362:	edd3 7a00 	vldr	s15, [r3]
 8004366:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800436a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800436e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004372:	3304      	adds	r3, #4
 8004374:	edd3 7a00 	vldr	s15, [r3]
 8004378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800437c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004380:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004384:	ed93 7a00 	vldr	s14, [r3]
 8004388:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800438c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004390:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004394:	edd3 7a00 	vldr	s15, [r3]
 8004398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800439c:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80043a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043a4:	ed93 7a00 	vldr	s14, [r3]
 80043a8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80043ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043b4:	edd3 7a00 	vldr	s15, [r3]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	603a      	str	r2, [r7, #0]
 80043be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043c2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80043c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043ca:	3304      	adds	r3, #4
 80043cc:	ed93 7a00 	vldr	s14, [r3]
 80043d0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80043d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043dc:	3304      	adds	r3, #4
 80043de:	edd3 7a00 	vldr	s15, [r3]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	1d1a      	adds	r2, r3, #4
 80043e6:	603a      	str	r2, [r7, #0]
 80043e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ec:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 80043f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 80043f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043fc:	3304      	adds	r3, #4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 8004402:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004406:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 8004412:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004416:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800441a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 8004422:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004426:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800442a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 8004432:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004436:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 8004442:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004446:	1d1a      	adds	r2, r3, #4
 8004448:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800444c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004450:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004458:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800445c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004460:	1d1a      	adds	r2, r3, #4
 8004462:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004466:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800446a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800446e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004472:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8004476:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 800447e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004482:	3304      	adds	r3, #4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 8004488:	edd7 7a07 	vldr	s15, [r7, #28]
 800448c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004494:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 8004498:	edd7 7a08 	vldr	s15, [r7, #32]
 800449c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80044a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 80044a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80044ac:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80044b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 80044b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80044bc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80044c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 80044c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044cc:	1d1a      	adds	r2, r3, #4
 80044ce:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044d2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80044d6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80044da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044de:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80044e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044ec:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80044f0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80044f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044f8:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 80044fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 8004504:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004508:	3304      	adds	r3, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 800450e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004512:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 800451e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004522:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 800452e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004532:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 800453e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004542:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 800454e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004552:	1d1a      	adds	r2, r3, #4
 8004554:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8004558:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800455c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004564:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8004568:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800456c:	1d1a      	adds	r2, r3, #4
 800456e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8004572:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004576:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800457a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800457e:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8004582:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004586:	b299      	uxth	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	2304      	movs	r3, #4
 800458e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004590:	f000 f8da 	bl	8004748 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8004594:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004598:	b299      	uxth	r1, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	2304      	movs	r3, #4
 80045a0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80045a2:	f000 f8d1 	bl	8004748 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80045a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045aa:	b299      	uxth	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	2304      	movs	r3, #4
 80045b2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80045b4:	f000 f8c8 	bl	8004748 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80045b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045bc:	b299      	uxth	r1, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	2304      	movs	r3, #4
 80045c4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80045c6:	f000 f8bf 	bl	8004748 <arm_radix8_butterfly_f32>
}
 80045ca:	bf00      	nop
 80045cc:	37b0      	adds	r7, #176	@ 0xb0
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b088      	sub	sp, #32
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	4611      	mov	r1, r2
 80045de:	461a      	mov	r2, r3
 80045e0:	460b      	mov	r3, r1
 80045e2:	71fb      	strb	r3, [r7, #7]
 80045e4:	4613      	mov	r3, r2
 80045e6:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d117      	bne.n	8004624 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	3304      	adds	r3, #4
 80045f8:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e00d      	b.n	800461c <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	edd3 7a00 	vldr	s15, [r3]
 8004606:	eef1 7a67 	vneg.f32	s15, s15
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	3308      	adds	r3, #8
 8004614:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3301      	adds	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	429a      	cmp	r2, r3
 8004622:	d3ed      	bcc.n	8004600 <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800462a:	d040      	beq.n	80046ae <arm_cfft_f32+0xdc>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004632:	d845      	bhi.n	80046c0 <arm_cfft_f32+0xee>
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800463a:	d033      	beq.n	80046a4 <arm_cfft_f32+0xd2>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004642:	d83d      	bhi.n	80046c0 <arm_cfft_f32+0xee>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464a:	d026      	beq.n	800469a <arm_cfft_f32+0xc8>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004652:	d835      	bhi.n	80046c0 <arm_cfft_f32+0xee>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800465a:	d028      	beq.n	80046ae <arm_cfft_f32+0xdc>
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004662:	d82d      	bhi.n	80046c0 <arm_cfft_f32+0xee>
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800466a:	d01b      	beq.n	80046a4 <arm_cfft_f32+0xd2>
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004672:	d825      	bhi.n	80046c0 <arm_cfft_f32+0xee>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b80      	cmp	r3, #128	@ 0x80
 8004678:	d00f      	beq.n	800469a <arm_cfft_f32+0xc8>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b80      	cmp	r3, #128	@ 0x80
 800467e:	d81f      	bhi.n	80046c0 <arm_cfft_f32+0xee>
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b40      	cmp	r3, #64	@ 0x40
 8004684:	d013      	beq.n	80046ae <arm_cfft_f32+0xdc>
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d819      	bhi.n	80046c0 <arm_cfft_f32+0xee>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b10      	cmp	r3, #16
 8004690:	d003      	beq.n	800469a <arm_cfft_f32+0xc8>
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b20      	cmp	r3, #32
 8004696:	d005      	beq.n	80046a4 <arm_cfft_f32+0xd2>
 8004698:	e012      	b.n	80046c0 <arm_cfft_f32+0xee>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7fe ff74 	bl	800358a <arm_cfft_radix8by2_f32>
        break;
 80046a2:	e00d      	b.n	80046c0 <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff f963 	bl	8003972 <arm_cfft_radix8by4_f32>
        break;
 80046ac:	e008      	b.n	80046c0 <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	b299      	uxth	r1, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	2301      	movs	r3, #1
 80046b8:	68b8      	ldr	r0, [r7, #8]
 80046ba:	f000 f845 	bl	8004748 <arm_radix8_butterfly_f32>
        break;
 80046be:	bf00      	nop
    }

    if ( bitReverseFlag )
 80046c0:	79bb      	ldrb	r3, [r7, #6]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8999      	ldrh	r1, [r3, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	461a      	mov	r2, r3
 80046d0:	68b8      	ldr	r0, [r7, #8]
 80046d2:	f7fb fdb5 	bl	8000240 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d130      	bne.n	800473e <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ee:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	e01c      	b.n	8004736 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1d1a      	adds	r2, r3, #4
 8004700:	61ba      	str	r2, [r7, #24]
 8004702:	ed93 7a00 	vldr	s14, [r3]
 8004706:	edd7 7a04 	vldr	s15, [r7, #16]
 800470a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470e:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	edd3 7a00 	vldr	s15, [r3]
 8004718:	eeb1 7a67 	vneg.f32	s14, s15
 800471c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	3304      	adds	r3, #4
 800472e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	3301      	adds	r3, #1
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	429a      	cmp	r2, r3
 800473c:	d3de      	bcc.n	80046fc <arm_cfft_f32+0x12a>
        }
    }
}
 800473e:	bf00      	nop
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8004748:	b480      	push	{r7}
 800474a:	b0bd      	sub	sp, #244	@ 0xf4
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	461a      	mov	r2, r3
 8004754:	460b      	mov	r3, r1
 8004756:	817b      	strh	r3, [r7, #10]
 8004758:	4613      	mov	r3, r2
 800475a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <arm_radix8_butterfly_f32+0x3c>)
 800475e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 8004762:	897b      	ldrh	r3, [r7, #10]
 8004764:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 8004768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004774:	08db      	lsrs	r3, r3, #3
 8004776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004780:	e002      	b.n	8004788 <arm_radix8_butterfly_f32+0x40>
 8004782:	bf00      	nop
 8004784:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8004788:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800478c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004790:	4413      	add	r3, r2
 8004792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 8004796:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479e:	4413      	add	r3, r2
 80047a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 80047a4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ac:	4413      	add	r3, r2
 80047ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 80047b2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80047b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ba:	4413      	add	r3, r2
 80047bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 80047c0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c8:	4413      	add	r3, r2
 80047ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 80047ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d6:	4413      	add	r3, r2
 80047d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 80047dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80047e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e4:	4413      	add	r3, r2
 80047e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80047ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	ed93 7a00 	vldr	s14, [r3]
 80047f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	edd3 7a00 	vldr	s15, [r3]
 8004806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800480a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800480e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	ed93 7a00 	vldr	s14, [r3]
 800481c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4413      	add	r3, r2
 8004826:	edd3 7a00 	vldr	s15, [r3]
 800482a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800482e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8004832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	ed93 7a00 	vldr	s14, [r3]
 8004840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	edd3 7a00 	vldr	s15, [r3]
 800484e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004852:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8004856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	ed93 7a00 	vldr	s14, [r3]
 8004864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	edd3 7a00 	vldr	s15, [r3]
 8004872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004876:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800487a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	ed93 7a00 	vldr	s14, [r3]
 8004888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	edd3 7a00 	vldr	s15, [r3]
 8004896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800489a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800489e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	ed93 7a00 	vldr	s14, [r3]
 80048ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048be:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80048c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	ed93 7a00 	vldr	s14, [r3]
 80048d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	edd3 7a00 	vldr	s15, [r3]
 80048de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e2:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80048e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	ed93 7a00 	vldr	s14, [r3]
 80048f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	edd3 7a00 	vldr	s15, [r3]
 8004902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004906:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 800490a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800490e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004916:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 800491a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800491e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004926:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 800492a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800492e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004936:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 800493a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800493e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004946:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 800494a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004958:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800495c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004960:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8004964:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004972:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800497a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800497e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	3304      	adds	r3, #4
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	ed93 7a00 	vldr	s14, [r3]
 800498e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	3304      	adds	r3, #4
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049a2:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80049a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	3304      	adds	r3, #4
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	ed93 7a00 	vldr	s14, [r3]
 80049b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	3304      	adds	r3, #4
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	edd3 7a00 	vldr	s15, [r3]
 80049c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ca:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80049ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	3304      	adds	r3, #4
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	ed93 7a00 	vldr	s14, [r3]
 80049de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	3304      	adds	r3, #4
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	edd3 7a00 	vldr	s15, [r3]
 80049ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80049f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	3304      	adds	r3, #4
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	ed93 7a00 	vldr	s14, [r3]
 8004a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	edd3 7a00 	vldr	s15, [r3]
 8004a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a1a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8004a1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	3304      	adds	r3, #4
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4413      	add	r3, r2
 8004a2a:	ed93 7a00 	vldr	s14, [r3]
 8004a2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	3304      	adds	r3, #4
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	edd3 7a00 	vldr	s15, [r3]
 8004a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a42:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8004a46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	ed93 7a00 	vldr	s14, [r3]
 8004a56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	edd3 7a00 	vldr	s15, [r3]
 8004a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a6a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8004a6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	3304      	adds	r3, #4
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	ed93 7a00 	vldr	s14, [r3]
 8004a7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	3304      	adds	r3, #4
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	edd3 7a00 	vldr	s15, [r3]
 8004a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a92:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8004a96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	ed93 7a00 	vldr	s14, [r3]
 8004aa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	3304      	adds	r3, #4
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	edd3 7a00 	vldr	s15, [r3]
 8004ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aba:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 8004abe:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004ac2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aca:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 8004ace:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004ad2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ada:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 8004ade:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8004ae2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aea:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 8004aee:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8004af2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004afa:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8004afe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	3304      	adds	r3, #4
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004b0e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b16:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8004b1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	3304      	adds	r3, #4
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004b2a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b32:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8004b36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004b44:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b4c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8004b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004b5e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b66:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8004b6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	3304      	adds	r3, #4
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8004b7a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b82:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8004b86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8004b96:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b9e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8004ba2:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004ba6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bae:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb6:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 8004bba:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004bbe:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 8004bd2:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8004bd6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bde:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 8004bea:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8004bee:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bf6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 8004c02:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8004c06:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c0e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 8004c12:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8004c16:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c1e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 8004c22:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8004c26:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c2e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 8004c32:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8004c36:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c3e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 8004c42:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004c46:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c4e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 8004c52:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004c56:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c5e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 8004c62:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8004c66:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c6e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 8004c72:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8004c76:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c7e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 8004c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8004c90:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8004c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c98:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8004c9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8004caa:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8004cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cb2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8004cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004cc4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ccc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8004cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004cde:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ce6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8004cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004cfa:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d02:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8004d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004d16:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d1e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8004d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	3304      	adds	r3, #4
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8004d32:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d3a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8004d3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	3304      	adds	r3, #4
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8004d4e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d56:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8004d5a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d62:	4413      	add	r3, r2
 8004d64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8004d68:	897b      	ldrh	r3, [r7, #10]
 8004d6a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	f4ff ad0a 	bcc.w	8004788 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8004d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d78:	2b07      	cmp	r3, #7
 8004d7a:	f240 84e3 	bls.w	8005744 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8004d8a:	893b      	ldrh	r3, [r7, #8]
 8004d8c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004d90:	4413      	add	r3, r2
 8004d92:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 8004d94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 8004d9a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004d9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004da0:	4413      	add	r3, r2
 8004da2:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 8004da4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004da6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004da8:	4413      	add	r3, r2
 8004daa:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 8004dac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004dae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004db0:	4413      	add	r3, r2
 8004db2:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 8004db4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004db6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004db8:	4413      	add	r3, r2
 8004dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 8004dbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dc0:	4413      	add	r3, r2
 8004dc2:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 8004dc4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004dc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dc8:	4413      	add	r3, r2
 8004dca:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 8004dcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 8004dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 8004de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8004df2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8004dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	4413      	add	r3, r2
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8004e0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4413      	add	r3, r2
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8004e16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8004e22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	3304      	adds	r3, #4
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8004e32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	3304      	adds	r3, #4
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8004e40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	3304      	adds	r3, #4
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4413      	add	r3, r2
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8004e4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	3304      	adds	r3, #4
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	4413      	add	r3, r2
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8004e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	3304      	adds	r3, #4
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8004e6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	3304      	adds	r3, #4
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8004e78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8004e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8004e8e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e96:	4413      	add	r3, r2
 8004e98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 8004e9c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 8004eaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 8004eb8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 8004ec6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ece:	4413      	add	r3, r2
 8004ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8004ed4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004edc:	4413      	add	r3, r2
 8004ede:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 8004ee2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eea:	4413      	add	r3, r2
 8004eec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8004ef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	ed93 7a00 	vldr	s14, [r3]
 8004efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	edd3 7a00 	vldr	s15, [r3]
 8004f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f10:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8004f14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	ed93 7a00 	vldr	s14, [r3]
 8004f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	edd3 7a00 	vldr	s15, [r3]
 8004f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f34:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8004f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	ed93 7a00 	vldr	s14, [r3]
 8004f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	edd3 7a00 	vldr	s15, [r3]
 8004f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f58:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8004f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	ed93 7a00 	vldr	s14, [r3]
 8004f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	edd3 7a00 	vldr	s15, [r3]
 8004f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f7c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8004f80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	ed93 7a00 	vldr	s14, [r3]
 8004f8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	edd3 7a00 	vldr	s15, [r3]
 8004f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fa0:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8004fa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	ed93 7a00 	vldr	s14, [r3]
 8004fb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	edd3 7a00 	vldr	s15, [r3]
 8004fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fc4:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8004fc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	ed93 7a00 	vldr	s14, [r3]
 8004fd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	edd3 7a00 	vldr	s15, [r3]
 8004fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fe8:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8004fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	ed93 7a00 	vldr	s14, [r3]
 8004ffa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	edd3 7a00 	vldr	s15, [r3]
 8005008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800500c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8005010:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8005014:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8005018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800501c:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8005020:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8005024:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8005028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800502c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8005030:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8005034:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8005038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800503c:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8005040:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8005044:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8005048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800504c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8005050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800505e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8005062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005066:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800506a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800506e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8005072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005076:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800507a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	3304      	adds	r3, #4
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4413      	add	r3, r2
 8005086:	ed93 7a00 	vldr	s14, [r3]
 800508a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	3304      	adds	r3, #4
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	edd3 7a00 	vldr	s15, [r3]
 800509a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800509e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80050a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	3304      	adds	r3, #4
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	ed93 7a00 	vldr	s14, [r3]
 80050b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	3304      	adds	r3, #4
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	edd3 7a00 	vldr	s15, [r3]
 80050c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050c6:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80050ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	3304      	adds	r3, #4
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	ed93 7a00 	vldr	s14, [r3]
 80050da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	3304      	adds	r3, #4
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	edd3 7a00 	vldr	s15, [r3]
 80050ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80050f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	3304      	adds	r3, #4
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	ed93 7a00 	vldr	s14, [r3]
 8005102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	3304      	adds	r3, #4
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	edd3 7a00 	vldr	s15, [r3]
 8005112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005116:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800511a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	3304      	adds	r3, #4
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	ed93 7a00 	vldr	s14, [r3]
 800512a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	3304      	adds	r3, #4
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	edd3 7a00 	vldr	s15, [r3]
 800513a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800513e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005142:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	3304      	adds	r3, #4
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	ed93 7a00 	vldr	s14, [r3]
 8005152:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	3304      	adds	r3, #4
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	edd3 7a00 	vldr	s15, [r3]
 8005162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005166:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800516a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	3304      	adds	r3, #4
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	ed93 7a00 	vldr	s14, [r3]
 800517a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	3304      	adds	r3, #4
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	edd3 7a00 	vldr	s15, [r3]
 800518a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800518e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005192:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	3304      	adds	r3, #4
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	ed93 7a00 	vldr	s14, [r3]
 80051a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	3304      	adds	r3, #4
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	edd3 7a00 	vldr	s15, [r3]
 80051b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051b6:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 80051ba:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80051be:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80051c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051c6:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 80051ca:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80051ce:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80051d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 80051da:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80051de:	edd7 7a08 	vldr	s15, [r7, #32]
 80051e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051e6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 80051ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80051ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80051f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 80051fa:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80051fe:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8005202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005206:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 800520a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800520e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8005212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005216:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800521a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	3304      	adds	r3, #4
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800522a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800522e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005232:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8005236:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800523a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800523e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005242:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 8005246:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800524a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800524e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005252:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 8005256:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800525a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800525e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005262:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 8005266:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800526a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800526e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005272:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8005276:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800527a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800527e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005282:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8005286:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800528a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800528e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005292:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8005296:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800529a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 80052a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80052b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80052b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052bc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80052c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	3304      	adds	r3, #4
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80052d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80052d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80052dc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80052e0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80052e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80052ec:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80052f0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80052f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80052fc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8005300:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005308:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800530c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8005310:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8005314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005318:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800531c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	ed97 7a07 	vldr	s14, [r7, #28]
 800532a:	edd7 7a06 	vldr	s15, [r7, #24]
 800532e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005332:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8005336:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	3304      	adds	r3, #4
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	ed97 7a05 	vldr	s14, [r7, #20]
 8005346:	edd7 7a04 	vldr	s15, [r7, #16]
 800534a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800534e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8005352:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005356:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800535a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8005362:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005366:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800536a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8005372:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005376:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800537a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8005382:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005386:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8005392:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	ed97 7a07 	vldr	s14, [r7, #28]
 80053a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80053a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 80053ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	3304      	adds	r3, #4
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80053bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80053c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c4:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80053c8:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80053cc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80053d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80053d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053dc:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 80053e0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80053e4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80053e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ec:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80053f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f4:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 80053f8:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80053fc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8005400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005404:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8005408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 8005410:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8005414:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8005418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800541c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8005420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005424:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 8005428:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800542c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8005430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005434:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 8005438:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800543c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8005440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005444:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 8005448:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800544c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8005450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005454:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 8005458:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800545c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8005460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005464:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 8005468:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800546c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005474:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 8005478:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800547c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005484:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 8005488:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800548c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8005490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005494:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 8005498:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800549c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80054a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 80054a8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80054ac:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80054b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054b4:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 80054b8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80054bc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80054c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054c4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 80054c8:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80054cc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80054d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054d4:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 80054d8:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80054dc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80054e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054e4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 80054e8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80054ec:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80054f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054f4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 80054f8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80054fc:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8005500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005504:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 8005508:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800550c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8005510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005514:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 8005518:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800551c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8005520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005524:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 8005528:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800552c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8005530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005534:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8005538:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800553c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005544:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8005548:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800554c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005554:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005558:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800555c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8005560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005564:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005568:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	ed97 7a07 	vldr	s14, [r7, #28]
 8005576:	edd7 7a06 	vldr	s15, [r7, #24]
 800557a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800557e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	3304      	adds	r3, #4
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005592:	edd7 7a04 	vldr	s15, [r7, #16]
 8005596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800559a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800559e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80055a2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80055a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055aa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80055ae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80055b2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80055b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ba:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80055be:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80055c2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80055c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ca:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80055ce:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80055d2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80055d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055da:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80055de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80055ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80055f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055f4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80055f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	3304      	adds	r3, #4
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	ed97 7a05 	vldr	s14, [r7, #20]
 8005608:	edd7 7a04 	vldr	s15, [r7, #16]
 800560c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005610:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8005614:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8005618:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800561c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005620:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8005624:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8005628:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800562c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005630:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8005634:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8005638:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800563c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005640:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8005644:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8005648:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800564c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005650:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8005654:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005662:	edd7 7a06 	vldr	s15, [r7, #24]
 8005666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800566a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800566e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	3304      	adds	r3, #4
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	ed97 7a05 	vldr	s14, [r7, #20]
 800567e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005686:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800568a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800568e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8005692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005696:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800569a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800569e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80056aa:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80056ae:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80056b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80056ba:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80056be:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80056ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80056d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80056dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056e0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80056e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	3304      	adds	r3, #4
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80056f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80056f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056fc:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8005700:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8005704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005708:	4413      	add	r3, r2
 800570a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 800570e:	897b      	ldrh	r3, [r7, #10]
 8005710:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8005714:	429a      	cmp	r2, r3
 8005716:	f4ff abba 	bcc.w	8004e8e <arm_radix8_butterfly_f32+0x746>

         j++;
 800571a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571e:	3301      	adds	r3, #1
 8005720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 8005724:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800572c:	429a      	cmp	r2, r3
 800572e:	f4ff ab2c 	bcc.w	8004d8a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8005732:	893b      	ldrh	r3, [r7, #8]
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8005738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573c:	2b07      	cmp	r3, #7
 800573e:	f63f a813 	bhi.w	8004768 <arm_radix8_butterfly_f32+0x20>
}
 8005742:	e000      	b.n	8005746 <arm_radix8_butterfly_f32+0xffe>
         break;
 8005744:	bf00      	nop
}
 8005746:	bf00      	nop
 8005748:	37f4      	adds	r7, #244	@ 0xf4
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop

08005754 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8005754:	b480      	push	{r7}
 8005756:	b095      	sub	sp, #84	@ 0x54
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	64bb      	str	r3, [r7, #72]	@ 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	647b      	str	r3, [r7, #68]	@ 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	643b      	str	r3, [r7, #64]	@ 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	3b01      	subs	r3, #1
 8005774:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8005776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 800577c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 8005782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 8005788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 800578e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005790:	1d1a      	adds	r2, r3, #4
 8005792:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 8005798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80057a2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80057a6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80057aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80057b2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80057b6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80057ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057be:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80057c2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80057c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80057ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	1d1a      	adds	r2, r3, #4
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80057d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057dc:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80057e0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80057e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80057e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	1d1a      	adds	r2, r3, #4
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80057f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057fa:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80057fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	4413      	add	r3, r2
 8005806:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 8005808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800580a:	3308      	adds	r3, #8
 800580c:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800580e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 8005814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 800581a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 8005820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 8005826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 8005830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005832:	1d1a      	adds	r2, r3, #4
 8005834:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 800583a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800583e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005846:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 800584a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800584e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005856:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800585a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800585e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800586a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800586e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800587a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800587e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005886:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800588a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800588e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800589a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800589e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80058a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80058aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80058b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	1d1a      	adds	r2, r3, #4
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80058c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058c4:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80058c8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80058cc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80058d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80058d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80058e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	1d1a      	adds	r2, r3, #4
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80058ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058f2:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80058f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f8:	3308      	adds	r3, #8
 80058fa:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 80058fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058fe:	3b08      	subs	r3, #8
 8005900:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8005902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005904:	3b01      	subs	r3, #1
 8005906:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0U);
 8005908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800590a:	2b00      	cmp	r3, #0
 800590c:	f47f af7f 	bne.w	800580e <stage_rfft_f32+0xba>
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	3754      	adds	r7, #84	@ 0x54
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 800591e:	b480      	push	{r7}
 8005920:	b095      	sub	sp, #84	@ 0x54
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	64bb      	str	r3, [r7, #72]	@ 0x48
   float32_t *pA = p;						/* increasing pointer               */
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	647b      	str	r3, [r7, #68]	@ 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	643b      	str	r3, [r7, #64]	@ 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	3b01      	subs	r3, #1
 800593e:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 8005940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 8005946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 800594c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800594e:	3308      	adds	r3, #8
 8005950:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8005952:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005956:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800595a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	1d1a      	adds	r2, r3, #4
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800596c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8005970:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005974:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800598a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800598e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	4413      	add	r3, r2
 8005996:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 8005998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800599a:	3308      	adds	r3, #8
 800599c:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0U)
 800599e:	e07c      	b.n	8005a9a <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80059a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 80059a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 80059ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 80059b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 80059b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 80059c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059c4:	1d1a      	adds	r2, r3, #4
 80059c6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 80059cc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80059d0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80059d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059d8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 80059dc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80059e0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80059e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e8:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80059ec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80059f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80059f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f8:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80059fc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005a00:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a08:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8005a0c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005a10:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a18:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8005a1c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005a20:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a28:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8005a2c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005a30:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a38:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a40:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	1d1a      	adds	r2, r3, #4
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a56:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8005a5a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005a5e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005a62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a66:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	1d1a      	adds	r2, r3, #4
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a84:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8005a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 8005a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a90:	3b08      	subs	r3, #8
 8005a92:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8005a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a96:	3b01      	subs	r3, #1
 8005a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0U)
 8005a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f47f af7f 	bne.w	80059a0 <merge_rfft_f32+0x82>
   }

}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	3754      	adds	r7, #84	@ 0x54
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8a1b      	ldrh	r3, [r3, #16]
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff ff20 	bl	800591e <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	6978      	ldr	r0, [r7, #20]
 8005ae6:	f7fe fd74 	bl	80045d2 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8005aea:	e00a      	b.n	8005b02 <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	2301      	movs	r3, #1
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	6978      	ldr	r0, [r7, #20]
 8005af4:	f7fe fd6d 	bl	80045d2 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff fe29 	bl	8005754 <stage_rfft_f32>
}
 8005b02:	bf00      	nop
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 8005b20:	887b      	ldrh	r3, [r7, #2]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	887a      	ldrh	r2, [r7, #2]
 8005b2e:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b38:	d023      	beq.n	8005b82 <arm_rfft_fast_init_f32+0x76>
 8005b3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b3e:	f300 808c 	bgt.w	8005c5a <arm_rfft_fast_init_f32+0x14e>
 8005b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b46:	d02a      	beq.n	8005b9e <arm_rfft_fast_init_f32+0x92>
 8005b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b4c:	f300 8085 	bgt.w	8005c5a <arm_rfft_fast_init_f32+0x14e>
 8005b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b54:	d031      	beq.n	8005bba <arm_rfft_fast_init_f32+0xae>
 8005b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b5a:	dc7e      	bgt.n	8005c5a <arm_rfft_fast_init_f32+0x14e>
 8005b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b60:	d039      	beq.n	8005bd6 <arm_rfft_fast_init_f32+0xca>
 8005b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b66:	dc78      	bgt.n	8005c5a <arm_rfft_fast_init_f32+0x14e>
 8005b68:	2b80      	cmp	r3, #128	@ 0x80
 8005b6a:	d042      	beq.n	8005bf2 <arm_rfft_fast_init_f32+0xe6>
 8005b6c:	2b80      	cmp	r3, #128	@ 0x80
 8005b6e:	dc74      	bgt.n	8005c5a <arm_rfft_fast_init_f32+0x14e>
 8005b70:	2b40      	cmp	r3, #64	@ 0x40
 8005b72:	d04b      	beq.n	8005c0c <arm_rfft_fast_init_f32+0x100>
 8005b74:	2b40      	cmp	r3, #64	@ 0x40
 8005b76:	dc70      	bgt.n	8005c5a <arm_rfft_fast_init_f32+0x14e>
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d061      	beq.n	8005c40 <arm_rfft_fast_init_f32+0x134>
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d052      	beq.n	8005c26 <arm_rfft_fast_init_f32+0x11a>
 8005b80:	e06b      	b.n	8005c5a <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048U:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f44f 626e 	mov.w	r2, #3808	@ 0xee0
 8005b88:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	4a38      	ldr	r2, [pc, #224]	@ (8005c70 <arm_rfft_fast_init_f32+0x164>)
 8005b8e:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4a38      	ldr	r2, [pc, #224]	@ (8005c74 <arm_rfft_fast_init_f32+0x168>)
 8005b94:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a37      	ldr	r2, [pc, #220]	@ (8005c78 <arm_rfft_fast_init_f32+0x16c>)
 8005b9a:	615a      	str	r2, [r3, #20]
    break;
 8005b9c:	e060      	b.n	8005c60 <arm_rfft_fast_init_f32+0x154>
  case 1024U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8005ba4:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	4a34      	ldr	r2, [pc, #208]	@ (8005c7c <arm_rfft_fast_init_f32+0x170>)
 8005baa:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4a34      	ldr	r2, [pc, #208]	@ (8005c80 <arm_rfft_fast_init_f32+0x174>)
 8005bb0:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a33      	ldr	r2, [pc, #204]	@ (8005c84 <arm_rfft_fast_init_f32+0x178>)
 8005bb6:	615a      	str	r2, [r3, #20]
    break;
 8005bb8:	e052      	b.n	8005c60 <arm_rfft_fast_init_f32+0x154>
  case 512U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8005bc0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	4a30      	ldr	r2, [pc, #192]	@ (8005c88 <arm_rfft_fast_init_f32+0x17c>)
 8005bc6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4a30      	ldr	r2, [pc, #192]	@ (8005c8c <arm_rfft_fast_init_f32+0x180>)
 8005bcc:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8005c90 <arm_rfft_fast_init_f32+0x184>)
 8005bd2:	615a      	str	r2, [r3, #20]
    break;
 8005bd4:	e044      	b.n	8005c60 <arm_rfft_fast_init_f32+0x154>
  case 256U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8005bdc:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4a2c      	ldr	r2, [pc, #176]	@ (8005c94 <arm_rfft_fast_init_f32+0x188>)
 8005be2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4a2c      	ldr	r2, [pc, #176]	@ (8005c98 <arm_rfft_fast_init_f32+0x18c>)
 8005be8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2b      	ldr	r2, [pc, #172]	@ (8005c9c <arm_rfft_fast_init_f32+0x190>)
 8005bee:	615a      	str	r2, [r3, #20]
    break;
 8005bf0:	e036      	b.n	8005c60 <arm_rfft_fast_init_f32+0x154>
  case 128U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	22d0      	movs	r2, #208	@ 0xd0
 8005bf6:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4a29      	ldr	r2, [pc, #164]	@ (8005ca0 <arm_rfft_fast_init_f32+0x194>)
 8005bfc:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4a28      	ldr	r2, [pc, #160]	@ (8005ca4 <arm_rfft_fast_init_f32+0x198>)
 8005c02:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a28      	ldr	r2, [pc, #160]	@ (8005ca8 <arm_rfft_fast_init_f32+0x19c>)
 8005c08:	615a      	str	r2, [r3, #20]
    break;
 8005c0a:	e029      	b.n	8005c60 <arm_rfft_fast_init_f32+0x154>
  case 64U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_64_TABLE_LENGTH;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2238      	movs	r2, #56	@ 0x38
 8005c10:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4a25      	ldr	r2, [pc, #148]	@ (8005cac <arm_rfft_fast_init_f32+0x1a0>)
 8005c16:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4a25      	ldr	r2, [pc, #148]	@ (8005cb0 <arm_rfft_fast_init_f32+0x1a4>)
 8005c1c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a24      	ldr	r2, [pc, #144]	@ (8005cb4 <arm_rfft_fast_init_f32+0x1a8>)
 8005c22:	615a      	str	r2, [r3, #20]
    break;
 8005c24:	e01c      	b.n	8005c60 <arm_rfft_fast_init_f32+0x154>
  case 32U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2230      	movs	r2, #48	@ 0x30
 8005c2a:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4a22      	ldr	r2, [pc, #136]	@ (8005cb8 <arm_rfft_fast_init_f32+0x1ac>)
 8005c30:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4a21      	ldr	r2, [pc, #132]	@ (8005cbc <arm_rfft_fast_init_f32+0x1b0>)
 8005c36:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a21      	ldr	r2, [pc, #132]	@ (8005cc0 <arm_rfft_fast_init_f32+0x1b4>)
 8005c3c:	615a      	str	r2, [r3, #20]
    break;
 8005c3e:	e00f      	b.n	8005c60 <arm_rfft_fast_init_f32+0x154>
  case 16U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2214      	movs	r2, #20
 8005c44:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4a1e      	ldr	r2, [pc, #120]	@ (8005cc4 <arm_rfft_fast_init_f32+0x1b8>)
 8005c4a:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8005cc8 <arm_rfft_fast_init_f32+0x1bc>)
 8005c50:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	@ (8005ccc <arm_rfft_fast_init_f32+0x1c0>)
 8005c56:	615a      	str	r2, [r3, #20]
    break;
 8005c58:	e002      	b.n	8005c60 <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 8005c5a:	23ff      	movs	r3, #255	@ 0xff
 8005c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8005c5e:	bf00      	nop
  }

  return (status);
 8005c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	0801cb9c 	.word	0x0801cb9c
 8005c74:	08017404 	.word	0x08017404
 8005c78:	080228dc 	.word	0x080228dc
 8005c7c:	0801bd8c 	.word	0x0801bd8c
 8005c80:	08015404 	.word	0x08015404
 8005c84:	080208dc 	.word	0x080208dc
 8005c88:	0801ba0c 	.word	0x0801ba0c
 8005c8c:	08014404 	.word	0x08014404
 8005c90:	0801f8dc 	.word	0x0801f8dc
 8005c94:	0801b69c 	.word	0x0801b69c
 8005c98:	08013c04 	.word	0x08013c04
 8005c9c:	0801f0dc 	.word	0x0801f0dc
 8005ca0:	0801b4fc 	.word	0x0801b4fc
 8005ca4:	08013804 	.word	0x08013804
 8005ca8:	0801ecdc 	.word	0x0801ecdc
 8005cac:	0801b48c 	.word	0x0801b48c
 8005cb0:	08013604 	.word	0x08013604
 8005cb4:	0801eadc 	.word	0x0801eadc
 8005cb8:	0801b42c 	.word	0x0801b42c
 8005cbc:	08013504 	.word	0x08013504
 8005cc0:	0801e9dc 	.word	0x0801e9dc
 8005cc4:	0801b404 	.word	0x0801b404
 8005cc8:	08013484 	.word	0x08013484
 8005ccc:	0801e95c 	.word	0x0801e95c

08005cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cd4:	2003      	movs	r0, #3
 8005cd6:	f000 fcee 	bl	80066b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cda:	2000      	movs	r0, #0
 8005cdc:	f7fd fa82 	bl	80031e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ce0:	f7fc f8ee 	bl	8001ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005cf0:	4b06      	ldr	r3, [pc, #24]	@ (8005d0c <HAL_IncTick+0x20>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4b06      	ldr	r3, [pc, #24]	@ (8005d10 <HAL_IncTick+0x24>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	4a04      	ldr	r2, [pc, #16]	@ (8005d10 <HAL_IncTick+0x24>)
 8005cfe:	6013      	str	r3, [r2, #0]
}
 8005d00:	bf00      	nop
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000008 	.word	0x20000008
 8005d10:	2000149c 	.word	0x2000149c

08005d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  return uwTick;
 8005d18:	4b03      	ldr	r3, [pc, #12]	@ (8005d28 <HAL_GetTick+0x14>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	2000149c 	.word	0x2000149c

08005d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d34:	f7ff ffee 	bl	8005d14 <HAL_GetTick>
 8005d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d005      	beq.n	8005d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d46:	4b0a      	ldr	r3, [pc, #40]	@ (8005d70 <HAL_Delay+0x44>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d52:	bf00      	nop
 8005d54:	f7ff ffde 	bl	8005d14 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d8f7      	bhi.n	8005d54 <HAL_Delay+0x28>
  {
  }
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000008 	.word	0x20000008

08005d74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e031      	b.n	8005dee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fc f8bc 	bl	8001f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005db6:	4b10      	ldr	r3, [pc, #64]	@ (8005df8 <HAL_ADC_Init+0x84>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	f043 0202 	orr.w	r2, r3, #2
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f974 	bl	80060b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	f043 0201 	orr.w	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	641a      	str	r2, [r3, #64]	@ 0x40
 8005dde:	e001      	b.n	8005de4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	ffffeefd 	.word	0xffffeefd

08005dfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_ADC_ConfigChannel+0x1c>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e13a      	b.n	800608e <HAL_ADC_ConfigChannel+0x292>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b09      	cmp	r3, #9
 8005e26:	d93a      	bls.n	8005e9e <HAL_ADC_ConfigChannel+0xa2>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e30:	d035      	beq.n	8005e9e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68d9      	ldr	r1, [r3, #12]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4613      	mov	r3, r2
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4413      	add	r3, r2
 8005e46:	3b1e      	subs	r3, #30
 8005e48:	2207      	movs	r2, #7
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43da      	mvns	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	400a      	ands	r2, r1
 8005e56:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a8f      	ldr	r2, [pc, #572]	@ (800609c <HAL_ADC_ConfigChannel+0x2a0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d10a      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68d9      	ldr	r1, [r3, #12]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	061a      	lsls	r2, r3, #24
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e76:	e039      	b.n	8005eec <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68d9      	ldr	r1, [r3, #12]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	4618      	mov	r0, r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	4403      	add	r3, r0
 8005e90:	3b1e      	subs	r3, #30
 8005e92:	409a      	lsls	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e9c:	e026      	b.n	8005eec <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6919      	ldr	r1, [r3, #16]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	4613      	mov	r3, r2
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2207      	movs	r2, #7
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43da      	mvns	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	400a      	ands	r2, r1
 8005ec4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6919      	ldr	r1, [r3, #16]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	4603      	mov	r3, r0
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	4403      	add	r3, r0
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b06      	cmp	r3, #6
 8005ef2:	d824      	bhi.n	8005f3e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	3b05      	subs	r3, #5
 8005f06:	221f      	movs	r2, #31
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43da      	mvns	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	400a      	ands	r2, r1
 8005f14:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	4618      	mov	r0, r3
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3b05      	subs	r3, #5
 8005f30:	fa00 f203 	lsl.w	r2, r0, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f3c:	e04c      	b.n	8005fd8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b0c      	cmp	r3, #12
 8005f44:	d824      	bhi.n	8005f90 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	3b23      	subs	r3, #35	@ 0x23
 8005f58:	221f      	movs	r2, #31
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	43da      	mvns	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	400a      	ands	r2, r1
 8005f66:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	4618      	mov	r0, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	3b23      	subs	r3, #35	@ 0x23
 8005f82:	fa00 f203 	lsl.w	r2, r0, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f8e:	e023      	b.n	8005fd8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	3b41      	subs	r3, #65	@ 0x41
 8005fa2:	221f      	movs	r2, #31
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43da      	mvns	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	400a      	ands	r2, r1
 8005fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	3b41      	subs	r3, #65	@ 0x41
 8005fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a30      	ldr	r2, [pc, #192]	@ (80060a0 <HAL_ADC_ConfigChannel+0x2a4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d10a      	bne.n	8005ff8 <HAL_ADC_ConfigChannel+0x1fc>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fea:	d105      	bne.n	8005ff8 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005fec:	4b2d      	ldr	r3, [pc, #180]	@ (80060a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80060a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ff2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005ff6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a28      	ldr	r2, [pc, #160]	@ (80060a0 <HAL_ADC_ConfigChannel+0x2a4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d10f      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x226>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b12      	cmp	r3, #18
 8006008:	d10b      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800600a:	4b26      	ldr	r3, [pc, #152]	@ (80060a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	4a25      	ldr	r2, [pc, #148]	@ (80060a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006010:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006014:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006016:	4b23      	ldr	r3, [pc, #140]	@ (80060a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4a22      	ldr	r2, [pc, #136]	@ (80060a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800601c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006020:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a1e      	ldr	r2, [pc, #120]	@ (80060a0 <HAL_ADC_ConfigChannel+0x2a4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d12b      	bne.n	8006084 <HAL_ADC_ConfigChannel+0x288>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a1a      	ldr	r2, [pc, #104]	@ (800609c <HAL_ADC_ConfigChannel+0x2a0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d003      	beq.n	800603e <HAL_ADC_ConfigChannel+0x242>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b11      	cmp	r3, #17
 800603c:	d122      	bne.n	8006084 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800603e:	4b19      	ldr	r3, [pc, #100]	@ (80060a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	4a18      	ldr	r2, [pc, #96]	@ (80060a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006044:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006048:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800604a:	4b16      	ldr	r3, [pc, #88]	@ (80060a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4a15      	ldr	r2, [pc, #84]	@ (80060a4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006050:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006054:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a10      	ldr	r2, [pc, #64]	@ (800609c <HAL_ADC_ConfigChannel+0x2a0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d111      	bne.n	8006084 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006060:	4b11      	ldr	r3, [pc, #68]	@ (80060a8 <HAL_ADC_ConfigChannel+0x2ac>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a11      	ldr	r2, [pc, #68]	@ (80060ac <HAL_ADC_ConfigChannel+0x2b0>)
 8006066:	fba2 2303 	umull	r2, r3, r2, r3
 800606a:	0c9a      	lsrs	r2, r3, #18
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006076:	e002      	b.n	800607e <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3b01      	subs	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f9      	bne.n	8006078 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	10000012 	.word	0x10000012
 80060a0:	40012000 	.word	0x40012000
 80060a4:	40012300 	.word	0x40012300
 80060a8:	20000000 	.word	0x20000000
 80060ac:	431bde83 	.word	0x431bde83

080060b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80060b8:	4b78      	ldr	r3, [pc, #480]	@ (800629c <ADC_Init+0x1ec>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	4a77      	ldr	r2, [pc, #476]	@ (800629c <ADC_Init+0x1ec>)
 80060be:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80060c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80060c4:	4b75      	ldr	r3, [pc, #468]	@ (800629c <ADC_Init+0x1ec>)
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	4973      	ldr	r1, [pc, #460]	@ (800629c <ADC_Init+0x1ec>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6859      	ldr	r1, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	021a      	lsls	r2, r3, #8
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6859      	ldr	r1, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6899      	ldr	r1, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613e:	4a58      	ldr	r2, [pc, #352]	@ (80062a0 <ADC_Init+0x1f0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d022      	beq.n	800618a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006152:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6899      	ldr	r1, [r3, #8]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6899      	ldr	r1, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	e00f      	b.n	80061aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80061a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0202 	bic.w	r2, r2, #2
 80061b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6899      	ldr	r1, [r3, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	005a      	lsls	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01b      	beq.n	8006210 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80061f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	3b01      	subs	r3, #1
 8006204:	035a      	lsls	r2, r3, #13
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	e007      	b.n	8006220 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800621e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800622e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	3b01      	subs	r3, #1
 800623c:	051a      	lsls	r2, r3, #20
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6899      	ldr	r1, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006262:	025a      	lsls	r2, r3, #9
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800627a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6899      	ldr	r1, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	029a      	lsls	r2, r3, #10
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	609a      	str	r2, [r3, #8]
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	40012300 	.word	0x40012300
 80062a0:	0f000001 	.word	0x0f000001

080062a4 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_CEC_Init+0x16>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e04f      	b.n	800635e <HAL_CEC_Init+0xba>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fb ffd0 	bl	8002274 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2224      	movs	r2, #36	@ 0x24
 80062d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 80062fe:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 800630a:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8006310:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006316:	041b      	lsls	r3, r3, #16
 8006318:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8006324:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8006326:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6959      	ldr	r1, [r3, #20]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8006336:	430b      	orrs	r3, r1
 8006338:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f042 0201 	orr.w	r2, r2, #1
 8006348:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2280      	movs	r2, #128	@ 0x80
 8006384:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006394:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01c      	beq.n	80063da <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2222      	movs	r2, #34	@ 0x22
 80063a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80063aa:	3301      	adds	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0201 	orr.w	r2, r2, #1
 80063d8:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01e      	beq.n	8006422 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0202 	orr.w	r2, r2, #2
 80063f2:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006408:	425b      	negs	r3, r3
 800640a:	441a      	add	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f88b 	bl	8006532 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006428:	2b00      	cmp	r3, #0
 800642a:	d024      	beq.n	8006476 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800643c:	2b00      	cmp	r3, #0
 800643e:	d107      	bne.n	8006450 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0204 	orr.w	r2, r2, #4
 800644e:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006474:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800647c:	2b00      	cmp	r3, #0
 800647e:	d014      	beq.n	80064aa <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800648e:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f83a 	bl	800651e <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d02f      	beq.n	8006516 <HAL_CEC_IRQHandler+0x1b0>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6919      	ldr	r1, [r3, #16]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 80064ca:	430b      	orrs	r3, r1
 80064cc:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00e      	beq.n	80064f6 <HAL_CEC_IRQHandler+0x190>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064e0:	425b      	negs	r3, r3
 80064e2:	441a      	add	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80064f4:	e00c      	b.n	8006510 <HAL_CEC_IRQHandler+0x1aa>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <HAL_CEC_IRQHandler+0x1aa>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <HAL_CEC_IRQHandler+0x1aa>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f819 	bl	8006548 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8006516:	bf00      	nop
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800656c:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <__NVIC_SetPriorityGrouping+0x40>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006578:	4013      	ands	r3, r2
 800657a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006584:	4b06      	ldr	r3, [pc, #24]	@ (80065a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006586:	4313      	orrs	r3, r2
 8006588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800658a:	4a04      	ldr	r2, [pc, #16]	@ (800659c <__NVIC_SetPriorityGrouping+0x40>)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	60d3      	str	r3, [r2, #12]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	e000ed00 	.word	0xe000ed00
 80065a0:	05fa0000 	.word	0x05fa0000

080065a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065a8:	4b04      	ldr	r3, [pc, #16]	@ (80065bc <__NVIC_GetPriorityGrouping+0x18>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	0a1b      	lsrs	r3, r3, #8
 80065ae:	f003 0307 	and.w	r3, r3, #7
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	e000ed00 	.word	0xe000ed00

080065c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	db0b      	blt.n	80065ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	f003 021f 	and.w	r2, r3, #31
 80065d8:	4907      	ldr	r1, [pc, #28]	@ (80065f8 <__NVIC_EnableIRQ+0x38>)
 80065da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	2001      	movs	r0, #1
 80065e2:	fa00 f202 	lsl.w	r2, r0, r2
 80065e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	e000e100 	.word	0xe000e100

080065fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	6039      	str	r1, [r7, #0]
 8006606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800660c:	2b00      	cmp	r3, #0
 800660e:	db0a      	blt.n	8006626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	b2da      	uxtb	r2, r3
 8006614:	490c      	ldr	r1, [pc, #48]	@ (8006648 <__NVIC_SetPriority+0x4c>)
 8006616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661a:	0112      	lsls	r2, r2, #4
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	440b      	add	r3, r1
 8006620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006624:	e00a      	b.n	800663c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	b2da      	uxtb	r2, r3
 800662a:	4908      	ldr	r1, [pc, #32]	@ (800664c <__NVIC_SetPriority+0x50>)
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	3b04      	subs	r3, #4
 8006634:	0112      	lsls	r2, r2, #4
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	440b      	add	r3, r1
 800663a:	761a      	strb	r2, [r3, #24]
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	e000e100 	.word	0xe000e100
 800664c:	e000ed00 	.word	0xe000ed00

08006650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006650:	b480      	push	{r7}
 8006652:	b089      	sub	sp, #36	@ 0x24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	f1c3 0307 	rsb	r3, r3, #7
 800666a:	2b04      	cmp	r3, #4
 800666c:	bf28      	it	cs
 800666e:	2304      	movcs	r3, #4
 8006670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	3304      	adds	r3, #4
 8006676:	2b06      	cmp	r3, #6
 8006678:	d902      	bls.n	8006680 <NVIC_EncodePriority+0x30>
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	3b03      	subs	r3, #3
 800667e:	e000      	b.n	8006682 <NVIC_EncodePriority+0x32>
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006684:	f04f 32ff 	mov.w	r2, #4294967295
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	43da      	mvns	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	401a      	ands	r2, r3
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006698:	f04f 31ff 	mov.w	r1, #4294967295
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	fa01 f303 	lsl.w	r3, r1, r3
 80066a2:	43d9      	mvns	r1, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066a8:	4313      	orrs	r3, r2
         );
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3724      	adds	r7, #36	@ 0x24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff ff4c 	bl	800655c <__NVIC_SetPriorityGrouping>
}
 80066c4:	bf00      	nop
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80066da:	2300      	movs	r3, #0
 80066dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80066de:	f7ff ff61 	bl	80065a4 <__NVIC_GetPriorityGrouping>
 80066e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	6978      	ldr	r0, [r7, #20]
 80066ea:	f7ff ffb1 	bl	8006650 <NVIC_EncodePriority>
 80066ee:	4602      	mov	r2, r0
 80066f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f4:	4611      	mov	r1, r2
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff ff80 	bl	80065fc <__NVIC_SetPriority>
}
 80066fc:	bf00      	nop
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800670e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff ff54 	bl	80065c0 <__NVIC_EnableIRQ>
}
 8006718:	bf00      	nop
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e054      	b.n	80067dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	7f5b      	ldrb	r3, [r3, #29]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fb fc6c 	bl	8002020 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	791b      	ldrb	r3, [r3, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10c      	bne.n	8006770 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a22      	ldr	r2, [pc, #136]	@ (80067e4 <HAL_CRC_Init+0xc4>)
 800675c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0218 	bic.w	r2, r2, #24
 800676c:	609a      	str	r2, [r3, #8]
 800676e:	e00c      	b.n	800678a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6899      	ldr	r1, [r3, #8]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	461a      	mov	r2, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f834 	bl	80067e8 <HAL_CRCEx_Polynomial_Set>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e028      	b.n	80067dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	795b      	ldrb	r3, [r3, #5]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d105      	bne.n	800679e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	611a      	str	r2, [r3, #16]
 800679c:	e004      	b.n	80067a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6912      	ldr	r2, [r2, #16]
 80067a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	04c11db7 	.word	0x04c11db7

080067e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80067f8:	231f      	movs	r3, #31
 80067fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	75fb      	strb	r3, [r7, #23]
 800680a:	e063      	b.n	80068d4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800680c:	bf00      	nop
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1e5a      	subs	r2, r3, #1
 8006812:	613a      	str	r2, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d009      	beq.n	800682c <HAL_CRCEx_Polynomial_Set+0x44>
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f003 031f 	and.w	r3, r3, #31
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	fa22 f303 	lsr.w	r3, r2, r3
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0f0      	beq.n	800680e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b18      	cmp	r3, #24
 8006830:	d846      	bhi.n	80068c0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8006832:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	080068c7 	.word	0x080068c7
 800683c:	080068c1 	.word	0x080068c1
 8006840:	080068c1 	.word	0x080068c1
 8006844:	080068c1 	.word	0x080068c1
 8006848:	080068c1 	.word	0x080068c1
 800684c:	080068c1 	.word	0x080068c1
 8006850:	080068c1 	.word	0x080068c1
 8006854:	080068c1 	.word	0x080068c1
 8006858:	080068b5 	.word	0x080068b5
 800685c:	080068c1 	.word	0x080068c1
 8006860:	080068c1 	.word	0x080068c1
 8006864:	080068c1 	.word	0x080068c1
 8006868:	080068c1 	.word	0x080068c1
 800686c:	080068c1 	.word	0x080068c1
 8006870:	080068c1 	.word	0x080068c1
 8006874:	080068c1 	.word	0x080068c1
 8006878:	080068a9 	.word	0x080068a9
 800687c:	080068c1 	.word	0x080068c1
 8006880:	080068c1 	.word	0x080068c1
 8006884:	080068c1 	.word	0x080068c1
 8006888:	080068c1 	.word	0x080068c1
 800688c:	080068c1 	.word	0x080068c1
 8006890:	080068c1 	.word	0x080068c1
 8006894:	080068c1 	.word	0x080068c1
 8006898:	0800689d 	.word	0x0800689d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b06      	cmp	r3, #6
 80068a0:	d913      	bls.n	80068ca <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80068a6:	e010      	b.n	80068ca <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b07      	cmp	r3, #7
 80068ac:	d90f      	bls.n	80068ce <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80068b2:	e00c      	b.n	80068ce <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b0f      	cmp	r3, #15
 80068b8:	d90b      	bls.n	80068d2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80068be:	e008      	b.n	80068d2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	75fb      	strb	r3, [r7, #23]
        break;
 80068c4:	e006      	b.n	80068d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80068c6:	bf00      	nop
 80068c8:	e004      	b.n	80068d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80068ca:	bf00      	nop
 80068cc:	e002      	b.n	80068d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80068ce:	bf00      	nop
 80068d0:	e000      	b.n	80068d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80068d2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80068d4:	7dfb      	ldrb	r3, [r7, #23]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10d      	bne.n	80068f6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f023 0118 	bic.w	r1, r3, #24
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e049      	b.n	80069aa <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fb fb98 	bl	8002060 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006954:	f023 0107 	bic.w	r1, r3, #7
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800696a:	4b12      	ldr	r3, [pc, #72]	@ (80069b4 <HAL_DMA2D_Init+0xb0>)
 800696c:	4013      	ands	r3, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	68d1      	ldr	r1, [r2, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	430b      	orrs	r3, r1
 8006978:	6413      	str	r3, [r2, #64]	@ 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006980:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	051a      	lsls	r2, r3, #20
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	055b      	lsls	r3, r3, #21
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	635a      	str	r2, [r3, #52]	@ 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	ffffc000 	.word	0xffffc000

080069b8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d026      	beq.n	8006a28 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d021      	beq.n	8006a28 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069f2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f8:	f043 0201 	orr.w	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2201      	movs	r2, #1
 8006a06:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d026      	beq.n	8006a80 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d021      	beq.n	8006a80 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a4a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2220      	movs	r2, #32
 8006a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a58:	f043 0202 	orr.w	r2, r3, #2
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2204      	movs	r2, #4
 8006a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d026      	beq.n	8006ad8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d021      	beq.n	8006ad8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006aa2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab0:	f043 0204 	orr.w	r2, r3, #4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2204      	movs	r2, #4
 8006abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d013      	beq.n	8006b0a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00e      	beq.n	8006b0a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006afa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2204      	movs	r2, #4
 8006b02:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f853 	bl	8006bb0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d024      	beq.n	8006b5e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01f      	beq.n	8006b5e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006b2c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2202      	movs	r2, #2
 8006b34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01f      	beq.n	8006ba8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d01a      	beq.n	8006ba8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b80:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2210      	movs	r2, #16
 8006b88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f80e 	bl	8006bc4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_DMA2D_ConfigLayer+0x20>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e084      	b.n	8006d02 <HAL_DMA2D_ConfigLayer+0x12a>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	4413      	add	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	3320      	adds	r3, #32
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4413      	add	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	041b      	lsls	r3, r3, #16
 8006c24:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c2c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006c38:	4b35      	ldr	r3, [pc, #212]	@ (8006d10 <HAL_DMA2D_ConfigLayer+0x138>)
 8006c3a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b0a      	cmp	r3, #10
 8006c42:	d003      	beq.n	8006c4c <HAL_DMA2D_ConfigLayer+0x74>
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	2b09      	cmp	r3, #9
 8006c4a:	d107      	bne.n	8006c5c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]
 8006c5a:	e005      	b.n	8006c68 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	061b      	lsls	r3, r3, #24
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d120      	bne.n	8006cb0 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	43db      	mvns	r3, r3
 8006c78:	ea02 0103 	and.w	r1, r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b0a      	cmp	r3, #10
 8006c96:	d003      	beq.n	8006ca0 <HAL_DMA2D_ConfigLayer+0xc8>
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b09      	cmp	r3, #9
 8006c9e:	d127      	bne.n	8006cf0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cae:	e01f      	b.n	8006cf0 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69da      	ldr	r2, [r3, #28]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	ea02 0103 	and.w	r1, r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b0a      	cmp	r3, #10
 8006cd8:	d003      	beq.n	8006ce2 <HAL_DMA2D_ConfigLayer+0x10a>
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b09      	cmp	r3, #9
 8006ce0:	d106      	bne.n	8006cf0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006cee:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	ff33000f 	.word	0xff33000f

08006d14 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	@ 0x28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e16c      	b.n	8007002 <HAL_DSI_Init+0x2ee>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7c5b      	ldrb	r3, [r3, #17]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d102      	bne.n	8006d38 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fb f9ba 	bl	80020ac <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2203      	movs	r2, #3
 8006d3c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006d52:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006d5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d66:	f7fe ffd5 	bl	8005d14 <HAL_GetTick>
 8006d6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006d6c:	e009      	b.n	8006d82 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006d6e:	f7fe ffd1 	bl	8005d14 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d7c:	d901      	bls.n	8006d82 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e13f      	b.n	8007002 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0ed      	beq.n	8006d6e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4b9b      	ldr	r3, [pc, #620]	@ (800700c <HAL_DSI_Init+0x2f8>)
 8006da0:	400b      	ands	r3, r1
 8006da2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006dba:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006dc2:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8006df6:	2001      	movs	r0, #1
 8006df8:	f7fe ff98 	bl	8005d2c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dfc:	f7fe ff8a 	bl	8005d14 <HAL_GetTick>
 8006e00:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006e02:	e009      	b.n	8006e18 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006e04:	f7fe ff86 	bl	8005d14 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e12:	d901      	bls.n	8006e18 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e0f4      	b.n	8007002 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0ed      	beq.n	8006e04 <HAL_DSI_Init+0xf0>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8006e28:	2300      	movs	r3, #0
 8006e2a:	613b      	str	r3, [r7, #16]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	605a      	str	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006e58:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6899      	ldr	r1, [r3, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0202 	orr.w	r2, r2, #2
 8006e7c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0204 	orr.w	r2, r2, #4
 8006e90:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0203 	bic.w	r2, r2, #3
 8006ea4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ebe:	f7fe ff29 	bl	8005d14 <HAL_GetTick>
 8006ec2:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d123      	bne.n	8006f1c <HAL_DSI_Init+0x208>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006ed4:	e00c      	b.n	8006ef0 <HAL_DSI_Init+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006ed6:	f7fe ff1d 	bl	8005d14 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ee4:	d904      	bls.n	8006ef0 <HAL_DSI_Init+0x1dc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e088      	b.n	8007002 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ef8:	f003 0314 	and.w	r3, r3, #20
 8006efc:	2b14      	cmp	r3, #20
 8006efe:	d1ea      	bne.n	8006ed6 <HAL_DSI_Init+0x1c2>
 8006f00:	e014      	b.n	8006f2c <HAL_DSI_Init+0x218>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006f02:	f7fe ff07 	bl	8005d14 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f10:	d904      	bls.n	8006f1c <HAL_DSI_Init+0x208>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e072      	b.n	8007002 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f24:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8006f28:	2b94      	cmp	r3, #148	@ 0x94
 8006f2a:	d1ea      	bne.n	8006f02 <HAL_DSI_Init+0x1ee>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_DSI_Init+0x226>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	e000      	b.n	8006f3c <HAL_DSI_Init+0x228>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	4a33      	ldr	r2, [pc, #204]	@ (8007010 <HAL_DSI_Init+0x2fc>)
 8006f42:	fb03 f202 	mul.w	r2, r3, r2
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	409a      	lsls	r2, r3
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8006f58:	fb01 f303 	mul.w	r3, r1, r3
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006f72:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0201 	bic.w	r2, r2, #1
 8006fb6:	605a      	str	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0203 	bic.w	r2, r2, #3
 8006fd6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0201 	orr.w	r2, r2, #1
 8006ff0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3728      	adds	r7, #40	@ 0x28
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	fffc8603 	.word	0xfffc8603
 8007010:	003d0900 	.word	0x003d0900

08007014 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	7c1b      	ldrb	r3, [r3, #16]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d101      	bne.n	800702a <HAL_DSI_ConfigErrorMonitor+0x16>
 8007026:	2302      	movs	r3, #2
 8007028:	e0aa      	b.n	8007180 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2200      	movs	r2, #0
 8007036:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007064:	430b      	orrs	r3, r1
 8007066:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d009      	beq.n	8007088 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8007084:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0202 	orr.w	r2, r2, #2
 80070c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	f003 0310 	and.w	r3, r3, #16
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d009      	beq.n	80070e2 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 020c 	orr.w	r2, r2, #12
 80070de:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d009      	beq.n	8007100 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f042 0210 	orr.w	r2, r2, #16
 80070fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0220 	orr.w	r2, r2, #32
 800711a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007124:	2b00      	cmp	r3, #0
 8007126:	d009      	beq.n	800713c <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007138:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007156:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007160:	2b00      	cmp	r3, #0
 8007162:	d009      	beq.n	8007178 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8007174:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00f      	beq.n	80071c4 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d007      	beq.n	80071c4 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8ad 	bl	800731e <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00f      	beq.n	80071f4 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d007      	beq.n	80071f4 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2202      	movs	r2, #2
 80071ea:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f89f 	bl	8007332 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 808c 	beq.w	8007316 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007206:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4013      	ands	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800721e:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	4013      	ands	r3, r2
 800722c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f043 0201 	orr.w	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	f043 0202 	orr.w	r2, r3, #2
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d005      	beq.n	800726e <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	f043 0204 	orr.w	r2, r3, #4
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	f043 0208 	orr.w	r2, r3, #8
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f003 030c 	and.w	r3, r3, #12
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	f043 0210 	orr.w	r2, r3, #16
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	f043 0220 	orr.w	r2, r3, #32
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d005      	beq.n	80072f2 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f818 	bl	8007346 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8007316:	bf00      	nop
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	7c1b      	ldrb	r3, [r3, #16]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_DSI_SetGenericVCID+0x16>
 800736c:	2302      	movs	r3, #2
 800736e:	e016      	b.n	800739e <HAL_DSI_SetGenericVCID+0x44>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0203 	bic.w	r2, r2, #3
 8007384:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
	...

080073ac <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	7c1b      	ldrb	r3, [r3, #16]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80073be:	2302      	movs	r3, #2
 80073c0:	e0c5      	b.n	800754e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0201 	bic.w	r2, r2, #1
 80073e8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f042 0201 	orr.w	r2, r2, #1
 80073fc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0203 	bic.w	r2, r2, #3
 800740e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68d9      	ldr	r1, [r3, #12]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	695a      	ldr	r2, [r3, #20]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0207 	bic.w	r2, r2, #7
 8007430:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6959      	ldr	r1, [r3, #20]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	431a      	orrs	r2, r3
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691a      	ldr	r2, [r3, #16]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 020f 	bic.w	r2, r2, #15
 800745e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6919      	ldr	r1, [r3, #16]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 020e 	bic.w	r2, r2, #14
 8007482:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	005a      	lsls	r2, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	4b2c      	ldr	r3, [pc, #176]	@ (800755c <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 80074aa:	400b      	ands	r3, r1
 80074ac:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80074d0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	431a      	orrs	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80074f0:	431a      	orrs	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f042 0202 	orr.w	r2, r2, #2
 8007542:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	ffff0000 	.word	0xffff0000

08007560 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	7c1b      	ldrb	r3, [r3, #16]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_DSI_ConfigCommand+0x16>
 8007572:	2302      	movs	r3, #2
 8007574:	e049      	b.n	800760a <HAL_DSI_ConfigCommand+0xaa>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4b24      	ldr	r3, [pc, #144]	@ (8007618 <HAL_DSI_ConfigCommand+0xb8>)
 8007588:	400b      	ands	r3, r1
 800758a:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800759a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80075a0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80075a6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80075ac:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80075b2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80075b8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80075be:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80075c4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80075ca:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80075d0:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80075d6:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0202 	bic.w	r2, r2, #2
 80075ee:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	fef080ff 	.word	0xfef080ff

0800761c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7c1b      	ldrb	r3, [r3, #16]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <HAL_DSI_ConfigFlowControl+0x16>
 800762e:	2302      	movs	r3, #2
 8007630:	e016      	b.n	8007660 <HAL_DSI_ConfigFlowControl+0x44>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 021f 	bic.w	r2, r2, #31
 8007646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	7c1b      	ldrb	r3, [r3, #16]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_DSI_ConfigPhyTimer+0x16>
 800767e:	2302      	movs	r3, #2
 8007680:	e058      	b.n	8007734 <HAL_DSI_ConfigPhyTimer+0xc8>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	4293      	cmp	r3, r2
 8007692:	bf38      	it	cc
 8007694:	4613      	movcc	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80076a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	041a      	lsls	r2, r3, #16
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80076d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	691a      	ldr	r2, [r3, #16]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	041b      	lsls	r3, r3, #16
 80076ec:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80076f4:	431a      	orrs	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007710:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	021a      	lsls	r2, r3, #8
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7c1b      	ldrb	r3, [r3, #16]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_DSI_ConfigHostTimeouts+0x16>
 8007752:	2302      	movs	r3, #2
 8007754:	e0b4      	b.n	80078c0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800776a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6899      	ldr	r1, [r3, #8]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	021a      	lsls	r2, r3, #8
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	b292      	uxth	r2, r2
 800778c:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	041a      	lsls	r2, r3, #16
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	4b47      	ldr	r3, [pc, #284]	@ (80078cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80077ae:	400b      	ands	r3, r1
 80077b0:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	4b3f      	ldr	r3, [pc, #252]	@ (80078cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80077d0:	400b      	ands	r3, r1
 80077d2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	4b36      	ldr	r3, [pc, #216]	@ (80078cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80077f4:	400b      	ands	r3, r1
 80077f6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	4b2b      	ldr	r3, [pc, #172]	@ (80078cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800781e:	400b      	ands	r3, r1
 8007820:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	695a      	ldr	r2, [r3, #20]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800784a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	4b16      	ldr	r3, [pc, #88]	@ (80078cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8007872:	400b      	ands	r3, r1
 8007874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4b0c      	ldr	r3, [pc, #48]	@ (80078cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800789c:	400b      	ands	r3, r1
 800789e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6a1a      	ldr	r2, [r3, #32]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	ffff0000 	.word	0xffff0000

080078d0 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7c1b      	ldrb	r3, [r3, #16]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d101      	bne.n	80078e6 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e01b      	b.n	800791e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 80078fc:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	065a      	lsls	r2, r3, #25
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
	...

0800792c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e086      	b.n	8007a4c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007944:	2b00      	cmp	r3, #0
 8007946:	d106      	bne.n	8007956 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7fa fbf7 	bl	8002144 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007956:	4b3f      	ldr	r3, [pc, #252]	@ (8007a54 <HAL_ETH_Init+0x128>)
 8007958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795a:	4a3e      	ldr	r2, [pc, #248]	@ (8007a54 <HAL_ETH_Init+0x128>)
 800795c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007960:	6453      	str	r3, [r2, #68]	@ 0x44
 8007962:	4b3c      	ldr	r3, [pc, #240]	@ (8007a54 <HAL_ETH_Init+0x128>)
 8007964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800796a:	60bb      	str	r3, [r7, #8]
 800796c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800796e:	4b3a      	ldr	r3, [pc, #232]	@ (8007a58 <HAL_ETH_Init+0x12c>)
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	4a39      	ldr	r2, [pc, #228]	@ (8007a58 <HAL_ETH_Init+0x12c>)
 8007974:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007978:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800797a:	4b37      	ldr	r3, [pc, #220]	@ (8007a58 <HAL_ETH_Init+0x12c>)
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	4935      	ldr	r1, [pc, #212]	@ (8007a58 <HAL_ETH_Init+0x12c>)
 8007984:	4313      	orrs	r3, r2
 8007986:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007988:	4b33      	ldr	r3, [pc, #204]	@ (8007a58 <HAL_ETH_Init+0x12c>)
 800798a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079a4:	f7fe f9b6 	bl	8005d14 <HAL_GetTick>
 80079a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80079aa:	e011      	b.n	80079d0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80079ac:	f7fe f9b2 	bl	8005d14 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80079ba:	d909      	bls.n	80079d0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2204      	movs	r2, #4
 80079c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	22e0      	movs	r2, #224	@ 0xe0
 80079c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e03d      	b.n	8007a4c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e4      	bne.n	80079ac <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f97a 	bl	8007cdc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa25 	bl	8007e38 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fa7b 	bl	8007eea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	461a      	mov	r2, r3
 80079fa:	2100      	movs	r1, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f9e3 	bl	8007dc8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8007a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a5c <HAL_ETH_Init+0x130>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8007a36:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2210      	movs	r2, #16
 8007a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	40023800 	.word	0x40023800
 8007a58:	40013800 	.word	0x40013800
 8007a5c:	00020060 	.word	0x00020060

08007a60 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4b53      	ldr	r3, [pc, #332]	@ (8007bc4 <ETH_SetMACConfig+0x164>)
 8007a76:	4013      	ands	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	7b9b      	ldrb	r3, [r3, #14]
 8007a7e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	7c12      	ldrb	r2, [r2, #16]
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	d102      	bne.n	8007a8e <ETH_SetMACConfig+0x2e>
 8007a88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007a8c:	e000      	b.n	8007a90 <ETH_SetMACConfig+0x30>
 8007a8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007a90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	7c52      	ldrb	r2, [r2, #17]
 8007a96:	2a00      	cmp	r2, #0
 8007a98:	d102      	bne.n	8007aa0 <ETH_SetMACConfig+0x40>
 8007a9a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007a9e:	e000      	b.n	8007aa2 <ETH_SetMACConfig+0x42>
 8007aa0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007aa2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007aa8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	7fdb      	ldrb	r3, [r3, #31]
 8007aae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007ab0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007ab6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	7f92      	ldrb	r2, [r2, #30]
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	d102      	bne.n	8007ac6 <ETH_SetMACConfig+0x66>
 8007ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007ac4:	e000      	b.n	8007ac8 <ETH_SetMACConfig+0x68>
 8007ac6:	2200      	movs	r2, #0
                        macconf->Speed |
 8007ac8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	7f1b      	ldrb	r3, [r3, #28]
 8007ace:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007ad0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007ad6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	791b      	ldrb	r3, [r3, #4]
 8007adc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007ade:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	d102      	bne.n	8007af0 <ETH_SetMACConfig+0x90>
 8007aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aee:	e000      	b.n	8007af2 <ETH_SetMACConfig+0x92>
 8007af0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007af2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	7bdb      	ldrb	r3, [r3, #15]
 8007af8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007afa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007b00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b08:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007b22:	2001      	movs	r0, #1
 8007b24:	f7fe f902 	bl	8005d2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007b3e:	4013      	ands	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b46:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	d101      	bne.n	8007b56 <ETH_SetMACConfig+0xf6>
 8007b52:	2280      	movs	r2, #128	@ 0x80
 8007b54:	e000      	b.n	8007b58 <ETH_SetMACConfig+0xf8>
 8007b56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007b58:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007b5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007b66:	2a01      	cmp	r2, #1
 8007b68:	d101      	bne.n	8007b6e <ETH_SetMACConfig+0x10e>
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	e000      	b.n	8007b70 <ETH_SetMACConfig+0x110>
 8007b6e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007b70:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007b78:	2a01      	cmp	r2, #1
 8007b7a:	d101      	bne.n	8007b80 <ETH_SetMACConfig+0x120>
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	e000      	b.n	8007b82 <ETH_SetMACConfig+0x122>
 8007b80:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007b82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007b8a:	2a01      	cmp	r2, #1
 8007b8c:	d101      	bne.n	8007b92 <ETH_SetMACConfig+0x132>
 8007b8e:	2202      	movs	r2, #2
 8007b90:	e000      	b.n	8007b94 <ETH_SetMACConfig+0x134>
 8007b92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007b94:	4313      	orrs	r3, r2
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007bac:	2001      	movs	r0, #1
 8007bae:	f7fe f8bd 	bl	8005d2c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	619a      	str	r2, [r3, #24]
}
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	fd20810f 	.word	0xfd20810f

08007bc8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4b3d      	ldr	r3, [pc, #244]	@ (8007cd8 <ETH_SetDMAConfig+0x110>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	7b1b      	ldrb	r3, [r3, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <ETH_SetDMAConfig+0x2c>
 8007bee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007bf2:	e000      	b.n	8007bf6 <ETH_SetDMAConfig+0x2e>
 8007bf4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	7b5b      	ldrb	r3, [r3, #13]
 8007bfa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007bfc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	7f52      	ldrb	r2, [r2, #29]
 8007c02:	2a00      	cmp	r2, #0
 8007c04:	d102      	bne.n	8007c0c <ETH_SetDMAConfig+0x44>
 8007c06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007c0a:	e000      	b.n	8007c0e <ETH_SetDMAConfig+0x46>
 8007c0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007c0e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	7b9b      	ldrb	r3, [r3, #14]
 8007c14:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007c16:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007c1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	7f1b      	ldrb	r3, [r3, #28]
 8007c22:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007c24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	7f9b      	ldrb	r3, [r3, #30]
 8007c2a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007c2c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007c32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c3a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c5e:	2001      	movs	r0, #1
 8007c60:	f7fe f864 	bl	8005d2c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	791b      	ldrb	r3, [r3, #4]
 8007c76:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007c7c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007c82:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007c88:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c90:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007c92:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c98:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007c9a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007ca0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007caa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007cae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	f7fe f835 	bl	8005d2c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cca:	461a      	mov	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6013      	str	r3, [r2, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	f8de3f23 	.word	0xf8de3f23

08007cdc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b0a6      	sub	sp, #152	@ 0x98
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007d00:	2300      	movs	r3, #0
 8007d02:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007d32:	2300      	movs	r3, #0
 8007d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007d44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d48:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007d4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007d56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff fe7f 	bl	8007a60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007d62:	2301      	movs	r3, #1
 8007d64:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007d66:	2301      	movs	r3, #1
 8007d68:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007d70:	2301      	movs	r3, #1
 8007d72:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007d74:	2300      	movs	r3, #0
 8007d76:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007d84:	2300      	movs	r3, #0
 8007d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007d92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007d96:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007d98:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007d9c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007da2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007dae:	2300      	movs	r3, #0
 8007db0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007db2:	f107 0308 	add.w	r3, r7, #8
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff ff05 	bl	8007bc8 <ETH_SetDMAConfig>
}
 8007dbe:	bf00      	nop
 8007dc0:	3798      	adds	r7, #152	@ 0x98
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3305      	adds	r3, #5
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	3204      	adds	r2, #4
 8007de0:	7812      	ldrb	r2, [r2, #0]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	4b11      	ldr	r3, [pc, #68]	@ (8007e30 <ETH_MACAddressConfig+0x68>)
 8007dea:	4413      	add	r3, r2
 8007dec:	461a      	mov	r2, r3
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3303      	adds	r3, #3
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	061a      	lsls	r2, r3, #24
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	041b      	lsls	r3, r3, #16
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3301      	adds	r3, #1
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	7812      	ldrb	r2, [r2, #0]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4b06      	ldr	r3, [pc, #24]	@ (8007e34 <ETH_MACAddressConfig+0x6c>)
 8007e1a:	4413      	add	r3, r2
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	6013      	str	r3, [r2, #0]
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40028040 	.word	0x40028040
 8007e34:	40028044 	.word	0x40028044

08007e38 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e03e      	b.n	8007ec4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68d9      	ldr	r1, [r3, #12]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	440b      	add	r3, r1
 8007e56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2200      	movs	r2, #0
 8007e62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2200      	movs	r2, #0
 8007e68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	3206      	adds	r2, #6
 8007e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d80c      	bhi.n	8007ea8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68d9      	ldr	r1, [r3, #12]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	440b      	add	r3, r1
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	60da      	str	r2, [r3, #12]
 8007ea6:	e004      	b.n	8007eb2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	461a      	mov	r2, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d9bd      	bls.n	8007e46 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007edc:	611a      	str	r2, [r3, #16]
}
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	e048      	b.n	8007f8a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6919      	ldr	r1, [r3, #16]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	440b      	add	r3, r1
 8007f08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2200      	movs	r2, #0
 8007f14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2200      	movs	r2, #0
 8007f26:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f34:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	3212      	adds	r2, #18
 8007f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d80c      	bhi.n	8007f7a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6919      	ldr	r1, [r3, #16]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	440b      	add	r3, r1
 8007f72:	461a      	mov	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	60da      	str	r2, [r3, #12]
 8007f78:	e004      	b.n	8007f84 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3301      	adds	r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d9b3      	bls.n	8007ef8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fba:	60da      	str	r2, [r3, #12]
}
 8007fbc:	bf00      	nop
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b089      	sub	sp, #36	@ 0x24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61fb      	str	r3, [r7, #28]
 8007fe6:	e175      	b.n	80082d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007fe8:	2201      	movs	r2, #1
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	429a      	cmp	r2, r3
 8008002:	f040 8164 	bne.w	80082ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f003 0303 	and.w	r3, r3, #3
 800800e:	2b01      	cmp	r3, #1
 8008010:	d005      	beq.n	800801e <HAL_GPIO_Init+0x56>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d130      	bne.n	8008080 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	2203      	movs	r2, #3
 800802a:	fa02 f303 	lsl.w	r3, r2, r3
 800802e:	43db      	mvns	r3, r3
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	4013      	ands	r3, r2
 8008034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	fa02 f303 	lsl.w	r3, r2, r3
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	4313      	orrs	r3, r2
 8008046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008054:	2201      	movs	r2, #1
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	fa02 f303 	lsl.w	r3, r2, r3
 800805c:	43db      	mvns	r3, r3
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	4013      	ands	r3, r2
 8008062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	091b      	lsrs	r3, r3, #4
 800806a:	f003 0201 	and.w	r2, r3, #1
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	fa02 f303 	lsl.w	r3, r2, r3
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	4313      	orrs	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f003 0303 	and.w	r3, r3, #3
 8008088:	2b03      	cmp	r3, #3
 800808a:	d017      	beq.n	80080bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	2203      	movs	r2, #3
 8008098:	fa02 f303 	lsl.w	r3, r2, r3
 800809c:	43db      	mvns	r3, r3
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	4013      	ands	r3, r2
 80080a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	fa02 f303 	lsl.w	r3, r2, r3
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f003 0303 	and.w	r3, r3, #3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d123      	bne.n	8008110 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	08da      	lsrs	r2, r3, #3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3208      	adds	r2, #8
 80080d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	220f      	movs	r2, #15
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	43db      	mvns	r3, r3
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	4013      	ands	r3, r2
 80080ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	fa02 f303 	lsl.w	r3, r2, r3
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	4313      	orrs	r3, r2
 8008100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	08da      	lsrs	r2, r3, #3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	3208      	adds	r2, #8
 800810a:	69b9      	ldr	r1, [r7, #24]
 800810c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	2203      	movs	r2, #3
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	43db      	mvns	r3, r3
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	4013      	ands	r3, r2
 8008126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f003 0203 	and.w	r2, r3, #3
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	4313      	orrs	r3, r2
 800813c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 80be 	beq.w	80082ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008152:	4b66      	ldr	r3, [pc, #408]	@ (80082ec <HAL_GPIO_Init+0x324>)
 8008154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008156:	4a65      	ldr	r2, [pc, #404]	@ (80082ec <HAL_GPIO_Init+0x324>)
 8008158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800815c:	6453      	str	r3, [r2, #68]	@ 0x44
 800815e:	4b63      	ldr	r3, [pc, #396]	@ (80082ec <HAL_GPIO_Init+0x324>)
 8008160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800816a:	4a61      	ldr	r2, [pc, #388]	@ (80082f0 <HAL_GPIO_Init+0x328>)
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	089b      	lsrs	r3, r3, #2
 8008170:	3302      	adds	r3, #2
 8008172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008176:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	220f      	movs	r2, #15
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	43db      	mvns	r3, r3
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	4013      	ands	r3, r2
 800818c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a58      	ldr	r2, [pc, #352]	@ (80082f4 <HAL_GPIO_Init+0x32c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d037      	beq.n	8008206 <HAL_GPIO_Init+0x23e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a57      	ldr	r2, [pc, #348]	@ (80082f8 <HAL_GPIO_Init+0x330>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d031      	beq.n	8008202 <HAL_GPIO_Init+0x23a>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a56      	ldr	r2, [pc, #344]	@ (80082fc <HAL_GPIO_Init+0x334>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d02b      	beq.n	80081fe <HAL_GPIO_Init+0x236>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a55      	ldr	r2, [pc, #340]	@ (8008300 <HAL_GPIO_Init+0x338>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d025      	beq.n	80081fa <HAL_GPIO_Init+0x232>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a54      	ldr	r2, [pc, #336]	@ (8008304 <HAL_GPIO_Init+0x33c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d01f      	beq.n	80081f6 <HAL_GPIO_Init+0x22e>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a53      	ldr	r2, [pc, #332]	@ (8008308 <HAL_GPIO_Init+0x340>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d019      	beq.n	80081f2 <HAL_GPIO_Init+0x22a>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a52      	ldr	r2, [pc, #328]	@ (800830c <HAL_GPIO_Init+0x344>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d013      	beq.n	80081ee <HAL_GPIO_Init+0x226>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a51      	ldr	r2, [pc, #324]	@ (8008310 <HAL_GPIO_Init+0x348>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00d      	beq.n	80081ea <HAL_GPIO_Init+0x222>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a50      	ldr	r2, [pc, #320]	@ (8008314 <HAL_GPIO_Init+0x34c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d007      	beq.n	80081e6 <HAL_GPIO_Init+0x21e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a4f      	ldr	r2, [pc, #316]	@ (8008318 <HAL_GPIO_Init+0x350>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d101      	bne.n	80081e2 <HAL_GPIO_Init+0x21a>
 80081de:	2309      	movs	r3, #9
 80081e0:	e012      	b.n	8008208 <HAL_GPIO_Init+0x240>
 80081e2:	230a      	movs	r3, #10
 80081e4:	e010      	b.n	8008208 <HAL_GPIO_Init+0x240>
 80081e6:	2308      	movs	r3, #8
 80081e8:	e00e      	b.n	8008208 <HAL_GPIO_Init+0x240>
 80081ea:	2307      	movs	r3, #7
 80081ec:	e00c      	b.n	8008208 <HAL_GPIO_Init+0x240>
 80081ee:	2306      	movs	r3, #6
 80081f0:	e00a      	b.n	8008208 <HAL_GPIO_Init+0x240>
 80081f2:	2305      	movs	r3, #5
 80081f4:	e008      	b.n	8008208 <HAL_GPIO_Init+0x240>
 80081f6:	2304      	movs	r3, #4
 80081f8:	e006      	b.n	8008208 <HAL_GPIO_Init+0x240>
 80081fa:	2303      	movs	r3, #3
 80081fc:	e004      	b.n	8008208 <HAL_GPIO_Init+0x240>
 80081fe:	2302      	movs	r3, #2
 8008200:	e002      	b.n	8008208 <HAL_GPIO_Init+0x240>
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <HAL_GPIO_Init+0x240>
 8008206:	2300      	movs	r3, #0
 8008208:	69fa      	ldr	r2, [r7, #28]
 800820a:	f002 0203 	and.w	r2, r2, #3
 800820e:	0092      	lsls	r2, r2, #2
 8008210:	4093      	lsls	r3, r2
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	4313      	orrs	r3, r2
 8008216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008218:	4935      	ldr	r1, [pc, #212]	@ (80082f0 <HAL_GPIO_Init+0x328>)
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	089b      	lsrs	r3, r3, #2
 800821e:	3302      	adds	r3, #2
 8008220:	69ba      	ldr	r2, [r7, #24]
 8008222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008226:	4b3d      	ldr	r3, [pc, #244]	@ (800831c <HAL_GPIO_Init+0x354>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	43db      	mvns	r3, r3
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	4013      	ands	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800824a:	4a34      	ldr	r2, [pc, #208]	@ (800831c <HAL_GPIO_Init+0x354>)
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008250:	4b32      	ldr	r3, [pc, #200]	@ (800831c <HAL_GPIO_Init+0x354>)
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	43db      	mvns	r3, r3
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	4013      	ands	r3, r2
 800825e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	4313      	orrs	r3, r2
 8008272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008274:	4a29      	ldr	r2, [pc, #164]	@ (800831c <HAL_GPIO_Init+0x354>)
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800827a:	4b28      	ldr	r3, [pc, #160]	@ (800831c <HAL_GPIO_Init+0x354>)
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	43db      	mvns	r3, r3
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	4013      	ands	r3, r2
 8008288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800829e:	4a1f      	ldr	r2, [pc, #124]	@ (800831c <HAL_GPIO_Init+0x354>)
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80082a4:	4b1d      	ldr	r3, [pc, #116]	@ (800831c <HAL_GPIO_Init+0x354>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	43db      	mvns	r3, r3
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	4013      	ands	r3, r2
 80082b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80082c8:	4a14      	ldr	r2, [pc, #80]	@ (800831c <HAL_GPIO_Init+0x354>)
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	3301      	adds	r3, #1
 80082d2:	61fb      	str	r3, [r7, #28]
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	2b0f      	cmp	r3, #15
 80082d8:	f67f ae86 	bls.w	8007fe8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	3724      	adds	r7, #36	@ 0x24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	40023800 	.word	0x40023800
 80082f0:	40013800 	.word	0x40013800
 80082f4:	40020000 	.word	0x40020000
 80082f8:	40020400 	.word	0x40020400
 80082fc:	40020800 	.word	0x40020800
 8008300:	40020c00 	.word	0x40020c00
 8008304:	40021000 	.word	0x40021000
 8008308:	40021400 	.word	0x40021400
 800830c:	40021800 	.word	0x40021800
 8008310:	40021c00 	.word	0x40021c00
 8008314:	40022000 	.word	0x40022000
 8008318:	40022400 	.word	0x40022400
 800831c:	40013c00 	.word	0x40013c00

08008320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	807b      	strh	r3, [r7, #2]
 800832c:	4613      	mov	r3, r2
 800832e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008330:	787b      	ldrb	r3, [r7, #1]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008336:	887a      	ldrh	r2, [r7, #2]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800833c:	e003      	b.n	8008346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800833e:	887b      	ldrh	r3, [r7, #2]
 8008340:	041a      	lsls	r2, r3, #16
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	619a      	str	r2, [r3, #24]
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
	...

08008354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e08b      	b.n	800847e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d106      	bne.n	8008380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7f9 ffe4 	bl	8002348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2224      	movs	r2, #36	@ 0x24
 8008384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0201 	bic.w	r2, r2, #1
 8008396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80083a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d107      	bne.n	80083ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689a      	ldr	r2, [r3, #8]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083ca:	609a      	str	r2, [r3, #8]
 80083cc:	e006      	b.n	80083dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80083da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d108      	bne.n	80083f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083f2:	605a      	str	r2, [r3, #4]
 80083f4:	e007      	b.n	8008406 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6859      	ldr	r1, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	4b1d      	ldr	r3, [pc, #116]	@ (8008488 <HAL_I2C_Init+0x134>)
 8008412:	430b      	orrs	r3, r1
 8008414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691a      	ldr	r2, [r3, #16]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	69d9      	ldr	r1, [r3, #28]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1a      	ldr	r2, [r3, #32]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0201 	orr.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	02008000 	.word	0x02008000

0800848c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b20      	cmp	r3, #32
 80084a0:	d138      	bne.n	8008514 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80084ac:	2302      	movs	r3, #2
 80084ae:	e032      	b.n	8008516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2224      	movs	r2, #36	@ 0x24
 80084bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80084de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6819      	ldr	r1, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0201 	orr.w	r2, r2, #1
 80084fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	e000      	b.n	8008516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008514:	2302      	movs	r3, #2
  }
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b20      	cmp	r3, #32
 8008536:	d139      	bne.n	80085ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800853e:	2b01      	cmp	r3, #1
 8008540:	d101      	bne.n	8008546 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008542:	2302      	movs	r3, #2
 8008544:	e033      	b.n	80085ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2224      	movs	r2, #36	@ 0x24
 8008552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0201 	bic.w	r2, r2, #1
 8008564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008574:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4313      	orrs	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0201 	orr.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e000      	b.n	80085ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80085ac:	2302      	movs	r3, #2
  }
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e043      	b.n	8008654 <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80085d4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f245 5255 	movw	r2, #21845	@ 0x5555
 80085de:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6852      	ldr	r2, [r2, #4]
 80085e8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	6892      	ldr	r2, [r2, #8]
 80085f2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80085f4:	f7fd fb8e 	bl	8005d14 <HAL_GetTick>
 80085f8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80085fa:	e011      	b.n	8008620 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80085fc:	f7fd fb8a 	bl	8005d14 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	f641 0201 	movw	r2, #6145	@ 0x1801
 800860a:	4293      	cmp	r3, r2
 800860c:	d908      	bls.n	8008620 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f003 0307 	and.w	r3, r3, #7
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e019      	b.n	8008654 <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e6      	bne.n	80085fc <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	691a      	ldr	r2, [r3, #16]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	429a      	cmp	r2, r3
 800863a:	d005      	beq.n	8008648 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	68d2      	ldr	r2, [r2, #12]
 8008644:	611a      	str	r2, [r3, #16]
 8008646:	e004      	b.n	8008652 <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8008650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e08f      	b.n	800878e <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7f9 ff2a 	bl	80024dc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699a      	ldr	r2, [r3, #24]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800869e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6999      	ldr	r1, [r3, #24]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80086b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6999      	ldr	r1, [r3, #24]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	041b      	lsls	r3, r3, #16
 80086e0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a19      	ldr	r1, [r3, #32]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f4:	041b      	lsls	r3, r3, #16
 80086f6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	430a      	orrs	r2, r1
 8008704:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870a:	041b      	lsls	r3, r3, #16
 800870c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	430a      	orrs	r2, r1
 800871a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800872c:	041b      	lsls	r3, r3, #16
 800872e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800873e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4313      	orrs	r3, r2
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008752:	431a      	orrs	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f042 0206 	orr.w	r2, r2, #6
 800876a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0201 	orr.w	r2, r2, #1
 800877a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ac:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d023      	beq.n	8008800 <HAL_LTDC_IRQHandler+0x6a>
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f003 0304 	and.w	r3, r3, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d01e      	beq.n	8008800 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0204 	bic.w	r2, r2, #4
 80087d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2204      	movs	r2, #4
 80087d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087e0:	f043 0201 	orr.w	r2, r3, #1
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2204      	movs	r2, #4
 80087ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f86f 	bl	80088de <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d023      	beq.n	8008852 <HAL_LTDC_IRQHandler+0xbc>
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01e      	beq.n	8008852 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0202 	bic.w	r2, r2, #2
 8008822:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2202      	movs	r2, #2
 800882a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008832:	f043 0202 	orr.w	r2, r3, #2
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2204      	movs	r2, #4
 8008840:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f846 	bl	80088de <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d01b      	beq.n	8008894 <HAL_LTDC_IRQHandler+0xfe>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d016      	beq.n	8008894 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0201 	bic.w	r2, r2, #1
 8008874:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2201      	movs	r2, #1
 800887c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f82f 	bl	80088f2 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01b      	beq.n	80088d6 <HAL_LTDC_IRQHandler+0x140>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f003 0308 	and.w	r3, r3, #8
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d016      	beq.n	80088d6 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0208 	bic.w	r2, r2, #8
 80088b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2208      	movs	r2, #8
 80088be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f818 	bl	8008906 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008906:	b480      	push	{r7}
 8008908:	b083      	sub	sp, #12
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800891a:	b5b0      	push	{r4, r5, r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	60f8      	str	r0, [r7, #12]
 8008922:	60b9      	str	r1, [r7, #8]
 8008924:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_LTDC_ConfigLayer+0x1a>
 8008930:	2302      	movs	r3, #2
 8008932:	e02c      	b.n	800898e <HAL_LTDC_ConfigLayer+0x74>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2134      	movs	r1, #52	@ 0x34
 800894a:	fb01 f303 	mul.w	r3, r1, r3
 800894e:	4413      	add	r3, r2
 8008950:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4614      	mov	r4, r2
 8008958:	461d      	mov	r5, r3
 800895a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800895c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800895e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 f812 	bl	8008998 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2201      	movs	r2, #1
 800897a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008998 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008998:	b480      	push	{r7}
 800899a:	b089      	sub	sp, #36	@ 0x24
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089b4:	4413      	add	r3, r2
 80089b6:	041b      	lsls	r3, r3, #16
 80089b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	01db      	lsls	r3, r3, #7
 80089c4:	4413      	add	r3, r2
 80089c6:	3384      	adds	r3, #132	@ 0x84
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	4611      	mov	r1, r2
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	01d2      	lsls	r2, r2, #7
 80089d4:	440a      	add	r2, r1
 80089d6:	3284      	adds	r2, #132	@ 0x84
 80089d8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80089dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	0c1b      	lsrs	r3, r3, #16
 80089ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089ee:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80089f0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4619      	mov	r1, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	01db      	lsls	r3, r3, #7
 80089fc:	440b      	add	r3, r1
 80089fe:	3384      	adds	r3, #132	@ 0x84
 8008a00:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008a06:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a16:	4413      	add	r3, r2
 8008a18:	041b      	lsls	r3, r3, #16
 8008a1a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	461a      	mov	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	01db      	lsls	r3, r3, #7
 8008a26:	4413      	add	r3, r2
 8008a28:	3384      	adds	r3, #132	@ 0x84
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	6812      	ldr	r2, [r2, #0]
 8008a30:	4611      	mov	r1, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	01d2      	lsls	r2, r2, #7
 8008a36:	440a      	add	r2, r1
 8008a38:	3284      	adds	r2, #132	@ 0x84
 8008a3a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008a3e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a4e:	4413      	add	r3, r2
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4619      	mov	r1, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	01db      	lsls	r3, r3, #7
 8008a5c:	440b      	add	r3, r1
 8008a5e:	3384      	adds	r3, #132	@ 0x84
 8008a60:	4619      	mov	r1, r3
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	01db      	lsls	r3, r3, #7
 8008a72:	4413      	add	r3, r2
 8008a74:	3384      	adds	r3, #132	@ 0x84
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	6812      	ldr	r2, [r2, #0]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	01d2      	lsls	r2, r2, #7
 8008a82:	440a      	add	r2, r1
 8008a84:	3284      	adds	r2, #132	@ 0x84
 8008a86:	f023 0307 	bic.w	r3, r3, #7
 8008a8a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	01db      	lsls	r3, r3, #7
 8008a96:	4413      	add	r3, r2
 8008a98:	3384      	adds	r3, #132	@ 0x84
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008aa8:	021b      	lsls	r3, r3, #8
 8008aaa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008ab2:	041b      	lsls	r3, r3, #16
 8008ab4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	061b      	lsls	r3, r3, #24
 8008abc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	431a      	orrs	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	01db      	lsls	r3, r3, #7
 8008ad8:	440b      	add	r3, r1
 8008ada:	3384      	adds	r3, #132	@ 0x84
 8008adc:	4619      	mov	r1, r3
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	01db      	lsls	r3, r3, #7
 8008aee:	4413      	add	r3, r2
 8008af0:	3384      	adds	r3, #132	@ 0x84
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	4611      	mov	r1, r2
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	01d2      	lsls	r2, r2, #7
 8008afe:	440a      	add	r2, r1
 8008b00:	3284      	adds	r2, #132	@ 0x84
 8008b02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008b06:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	01db      	lsls	r3, r3, #7
 8008b12:	4413      	add	r3, r2
 8008b14:	3384      	adds	r3, #132	@ 0x84
 8008b16:	461a      	mov	r2, r3
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	01db      	lsls	r3, r3, #7
 8008b28:	4413      	add	r3, r2
 8008b2a:	3384      	adds	r3, #132	@ 0x84
 8008b2c:	69da      	ldr	r2, [r3, #28]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4619      	mov	r1, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	01db      	lsls	r3, r3, #7
 8008b38:	440b      	add	r3, r1
 8008b3a:	3384      	adds	r3, #132	@ 0x84
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4b4f      	ldr	r3, [pc, #316]	@ (8008c7c <LTDC_SetConfig+0x2e4>)
 8008b40:	4013      	ands	r3, r2
 8008b42:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	69da      	ldr	r2, [r3, #28]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	68f9      	ldr	r1, [r7, #12]
 8008b4e:	6809      	ldr	r1, [r1, #0]
 8008b50:	4608      	mov	r0, r1
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	01c9      	lsls	r1, r1, #7
 8008b56:	4401      	add	r1, r0
 8008b58:	3184      	adds	r1, #132	@ 0x84
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	01db      	lsls	r3, r3, #7
 8008b68:	4413      	add	r3, r2
 8008b6a:	3384      	adds	r3, #132	@ 0x84
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b72:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d102      	bne.n	8008b82 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8008b7c:	2304      	movs	r3, #4
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	e01b      	b.n	8008bba <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d102      	bne.n	8008b90 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	61fb      	str	r3, [r7, #28]
 8008b8e:	e014      	b.n	8008bba <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d00b      	beq.n	8008bb0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d007      	beq.n	8008bb0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d003      	beq.n	8008bb0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008bac:	2b07      	cmp	r3, #7
 8008bae:	d102      	bne.n	8008bb6 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	61fb      	str	r3, [r7, #28]
 8008bb4:	e001      	b.n	8008bba <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	01db      	lsls	r3, r3, #7
 8008bc4:	4413      	add	r3, r2
 8008bc6:	3384      	adds	r3, #132	@ 0x84
 8008bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	4611      	mov	r1, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	01d2      	lsls	r2, r2, #7
 8008bd4:	440a      	add	r2, r1
 8008bd6:	3284      	adds	r2, #132	@ 0x84
 8008bd8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be2:	69fa      	ldr	r2, [r7, #28]
 8008be4:	fb02 f303 	mul.w	r3, r2, r3
 8008be8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	6859      	ldr	r1, [r3, #4]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	1acb      	subs	r3, r1, r3
 8008bf4:	69f9      	ldr	r1, [r7, #28]
 8008bf6:	fb01 f303 	mul.w	r3, r1, r3
 8008bfa:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008bfc:	68f9      	ldr	r1, [r7, #12]
 8008bfe:	6809      	ldr	r1, [r1, #0]
 8008c00:	4608      	mov	r0, r1
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	01c9      	lsls	r1, r1, #7
 8008c06:	4401      	add	r1, r0
 8008c08:	3184      	adds	r1, #132	@ 0x84
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	01db      	lsls	r3, r3, #7
 8008c18:	4413      	add	r3, r2
 8008c1a:	3384      	adds	r3, #132	@ 0x84
 8008c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4619      	mov	r1, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	01db      	lsls	r3, r3, #7
 8008c28:	440b      	add	r3, r1
 8008c2a:	3384      	adds	r3, #132	@ 0x84
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4b14      	ldr	r3, [pc, #80]	@ (8008c80 <LTDC_SetConfig+0x2e8>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	01db      	lsls	r3, r3, #7
 8008c3e:	4413      	add	r3, r2
 8008c40:	3384      	adds	r3, #132	@ 0x84
 8008c42:	461a      	mov	r2, r3
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c48:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	01db      	lsls	r3, r3, #7
 8008c54:	4413      	add	r3, r2
 8008c56:	3384      	adds	r3, #132	@ 0x84
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	6812      	ldr	r2, [r2, #0]
 8008c5e:	4611      	mov	r1, r2
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	01d2      	lsls	r2, r2, #7
 8008c64:	440a      	add	r2, r1
 8008c66:	3284      	adds	r2, #132	@ 0x84
 8008c68:	f043 0301 	orr.w	r3, r3, #1
 8008c6c:	6013      	str	r3, [r2, #0]
}
 8008c6e:	bf00      	nop
 8008c70:	3724      	adds	r7, #36	@ 0x24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	fffff8f8 	.word	0xfffff8f8
 8008c80:	fffff800 	.word	0xfffff800

08008c84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af02      	add	r7, sp, #8
 8008c8a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e108      	b.n	8008ea8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d106      	bne.n	8008cb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7fa f85f 	bl	8002d74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2203      	movs	r2, #3
 8008cba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cc4:	d102      	bne.n	8008ccc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f005 f9bb 	bl	800e04c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	7c1a      	ldrb	r2, [r3, #16]
 8008cde:	f88d 2000 	strb.w	r2, [sp]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ce6:	f005 f8b5 	bl	800de54 <USB_CoreInit>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e0d5      	b.n	8008ea8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2100      	movs	r1, #0
 8008d02:	4618      	mov	r0, r3
 8008d04:	f005 f9b3 	bl	800e06e <USB_SetCurrentMode>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d005      	beq.n	8008d1a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2202      	movs	r2, #2
 8008d12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e0c6      	b.n	8008ea8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
 8008d1e:	e04a      	b.n	8008db6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008d20:	7bfa      	ldrb	r2, [r7, #15]
 8008d22:	6879      	ldr	r1, [r7, #4]
 8008d24:	4613      	mov	r3, r2
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	3315      	adds	r3, #21
 8008d30:	2201      	movs	r2, #1
 8008d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008d34:	7bfa      	ldrb	r2, [r7, #15]
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	4413      	add	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	440b      	add	r3, r1
 8008d42:	3314      	adds	r3, #20
 8008d44:	7bfa      	ldrb	r2, [r7, #15]
 8008d46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008d48:	7bfa      	ldrb	r2, [r7, #15]
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	b298      	uxth	r0, r3
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	4413      	add	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	332e      	adds	r3, #46	@ 0x2e
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d60:	7bfa      	ldrb	r2, [r7, #15]
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	4613      	mov	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	3318      	adds	r3, #24
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008d74:	7bfa      	ldrb	r2, [r7, #15]
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	331c      	adds	r3, #28
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008d88:	7bfa      	ldrb	r2, [r7, #15]
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	3320      	adds	r3, #32
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008d9c:	7bfa      	ldrb	r2, [r7, #15]
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	4613      	mov	r3, r2
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	440b      	add	r3, r1
 8008daa:	3324      	adds	r3, #36	@ 0x24
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	3301      	adds	r3, #1
 8008db4:	73fb      	strb	r3, [r7, #15]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	791b      	ldrb	r3, [r3, #4]
 8008dba:	7bfa      	ldrb	r2, [r7, #15]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d3af      	bcc.n	8008d20 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]
 8008dc4:	e044      	b.n	8008e50 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008dc6:	7bfa      	ldrb	r2, [r7, #15]
 8008dc8:	6879      	ldr	r1, [r7, #4]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	4413      	add	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	440b      	add	r3, r1
 8008dd4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008dd8:	2200      	movs	r2, #0
 8008dda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008ddc:	7bfa      	ldrb	r2, [r7, #15]
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	4613      	mov	r3, r2
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008dee:	7bfa      	ldrb	r2, [r7, #15]
 8008df0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008df2:	7bfa      	ldrb	r2, [r7, #15]
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	4613      	mov	r3, r2
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	440b      	add	r3, r1
 8008e00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008e04:	2200      	movs	r2, #0
 8008e06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008e08:	7bfa      	ldrb	r2, [r7, #15]
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	440b      	add	r3, r1
 8008e16:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008e1e:	7bfa      	ldrb	r2, [r7, #15]
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	4613      	mov	r3, r2
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	440b      	add	r3, r1
 8008e2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008e34:	7bfa      	ldrb	r2, [r7, #15]
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	440b      	add	r3, r1
 8008e42:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008e46:	2200      	movs	r2, #0
 8008e48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	73fb      	strb	r3, [r7, #15]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	791b      	ldrb	r3, [r3, #4]
 8008e54:	7bfa      	ldrb	r2, [r7, #15]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d3b5      	bcc.n	8008dc6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	7c1a      	ldrb	r2, [r3, #16]
 8008e62:	f88d 2000 	strb.w	r2, [sp]
 8008e66:	3304      	adds	r3, #4
 8008e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e6a:	f005 f94d 	bl	800e108 <USB_DevInit>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d005      	beq.n	8008e80 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2202      	movs	r2, #2
 8008e78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e013      	b.n	8008ea8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7b1b      	ldrb	r3, [r3, #12]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d102      	bne.n	8008e9c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 ff3a 	bl	8009d10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f005 fc6d 	bl	800e780 <USB_DevDisconnect>

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008eb0:	b590      	push	{r4, r7, lr}
 8008eb2:	b08d      	sub	sp, #52	@ 0x34
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f005 fd0e 	bl	800e8e8 <USB_GetMode>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f040 84b9 	bne.w	8009846 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f005 fc72 	bl	800e7c2 <USB_ReadInterrupts>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 84af 	beq.w	8009844 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	0a1b      	lsrs	r3, r3, #8
 8008ef0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f005 fc5f 	bl	800e7c2 <USB_ReadInterrupts>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d107      	bne.n	8008f1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	695a      	ldr	r2, [r3, #20]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f002 0202 	and.w	r2, r2, #2
 8008f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f005 fc4d 	bl	800e7c2 <USB_ReadInterrupts>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	f003 0310 	and.w	r3, r3, #16
 8008f2e:	2b10      	cmp	r3, #16
 8008f30:	d161      	bne.n	8008ff6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	699a      	ldr	r2, [r3, #24]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0210 	bic.w	r2, r2, #16
 8008f40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	f003 020f 	and.w	r2, r3, #15
 8008f4e:	4613      	mov	r3, r2
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	3304      	adds	r3, #4
 8008f60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008f68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f6c:	d124      	bne.n	8008fb8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008f74:	4013      	ands	r3, r2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d035      	beq.n	8008fe6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	091b      	lsrs	r3, r3, #4
 8008f82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	6a38      	ldr	r0, [r7, #32]
 8008f8e:	f005 fb9f 	bl	800e6d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	091b      	lsrs	r3, r3, #4
 8008f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f9e:	441a      	add	r2, r3
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	695a      	ldr	r2, [r3, #20]
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	091b      	lsrs	r3, r3, #4
 8008fac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fb0:	441a      	add	r2, r3
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	615a      	str	r2, [r3, #20]
 8008fb6:	e016      	b.n	8008fe6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008fbe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008fc2:	d110      	bne.n	8008fe6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008fca:	2208      	movs	r2, #8
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6a38      	ldr	r0, [r7, #32]
 8008fd0:	f005 fb7e 	bl	800e6d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	695a      	ldr	r2, [r3, #20]
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	091b      	lsrs	r3, r3, #4
 8008fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fe0:	441a      	add	r2, r3
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	699a      	ldr	r2, [r3, #24]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f042 0210 	orr.w	r2, r2, #16
 8008ff4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f005 fbe1 	bl	800e7c2 <USB_ReadInterrupts>
 8009000:	4603      	mov	r3, r0
 8009002:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009006:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800900a:	f040 80a7 	bne.w	800915c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800900e:	2300      	movs	r3, #0
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4618      	mov	r0, r3
 8009018:	f005 fbe6 	bl	800e7e8 <USB_ReadDevAllOutEpInterrupt>
 800901c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800901e:	e099      	b.n	8009154 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 808e 	beq.w	8009148 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009032:	b2d2      	uxtb	r2, r2
 8009034:	4611      	mov	r1, r2
 8009036:	4618      	mov	r0, r3
 8009038:	f005 fc0a 	bl	800e850 <USB_ReadDevOutEPInterrupt>
 800903c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00c      	beq.n	8009062 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009054:	461a      	mov	r2, r3
 8009056:	2301      	movs	r3, #1
 8009058:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800905a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fd29 	bl	8009ab4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00c      	beq.n	8009086 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800906c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009078:	461a      	mov	r2, r3
 800907a:	2308      	movs	r3, #8
 800907c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800907e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fdff 	bl	8009c84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b00      	cmp	r3, #0
 800908e:	d008      	beq.n	80090a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800909c:	461a      	mov	r2, r3
 800909e:	2310      	movs	r3, #16
 80090a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d030      	beq.n	800910e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b4:	2b80      	cmp	r3, #128	@ 0x80
 80090b6:	d109      	bne.n	80090cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80090ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80090cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090ce:	4613      	mov	r3, r2
 80090d0:	00db      	lsls	r3, r3, #3
 80090d2:	4413      	add	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	3304      	adds	r3, #4
 80090e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	78db      	ldrb	r3, [r3, #3]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d108      	bne.n	80090fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2200      	movs	r2, #0
 80090ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80090f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fbf2 	bl	80098e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009108:	461a      	mov	r2, r3
 800910a:	2302      	movs	r3, #2
 800910c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f003 0320 	and.w	r3, r3, #32
 8009114:	2b00      	cmp	r3, #0
 8009116:	d008      	beq.n	800912a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009124:	461a      	mov	r2, r3
 8009126:	2320      	movs	r3, #32
 8009128:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d009      	beq.n	8009148 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009140:	461a      	mov	r2, r3
 8009142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009146:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	3301      	adds	r3, #1
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800914e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009150:	085b      	lsrs	r3, r3, #1
 8009152:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009156:	2b00      	cmp	r3, #0
 8009158:	f47f af62 	bne.w	8009020 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4618      	mov	r0, r3
 8009162:	f005 fb2e 	bl	800e7c2 <USB_ReadInterrupts>
 8009166:	4603      	mov	r3, r0
 8009168:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800916c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009170:	f040 80db 	bne.w	800932a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4618      	mov	r0, r3
 800917a:	f005 fb4f 	bl	800e81c <USB_ReadDevAllInEpInterrupt>
 800917e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8009184:	e0cd      	b.n	8009322 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 80c2 	beq.w	8009316 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009198:	b2d2      	uxtb	r2, r2
 800919a:	4611      	mov	r1, r2
 800919c:	4618      	mov	r0, r3
 800919e:	f005 fb75 	bl	800e88c <USB_ReadDevInEPInterrupt>
 80091a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d057      	beq.n	800925e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	f003 030f 	and.w	r3, r3, #15
 80091b4:	2201      	movs	r2, #1
 80091b6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	43db      	mvns	r3, r3
 80091c8:	69f9      	ldr	r1, [r7, #28]
 80091ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091ce:	4013      	ands	r3, r2
 80091d0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80091d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091de:	461a      	mov	r2, r3
 80091e0:	2301      	movs	r3, #1
 80091e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	799b      	ldrb	r3, [r3, #6]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d132      	bne.n	8009252 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091f0:	4613      	mov	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	3320      	adds	r3, #32
 80091fc:	6819      	ldr	r1, [r3, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009202:	4613      	mov	r3, r2
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4403      	add	r3, r0
 800920c:	331c      	adds	r3, #28
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4419      	add	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009216:	4613      	mov	r3, r2
 8009218:	00db      	lsls	r3, r3, #3
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4403      	add	r3, r0
 8009220:	3320      	adds	r3, #32
 8009222:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	2b00      	cmp	r3, #0
 8009228:	d113      	bne.n	8009252 <HAL_PCD_IRQHandler+0x3a2>
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800922e:	4613      	mov	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	3324      	adds	r3, #36	@ 0x24
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d108      	bne.n	8009252 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800924a:	461a      	mov	r2, r3
 800924c:	2101      	movs	r1, #1
 800924e:	f005 fb7d 	bl	800e94c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	b2db      	uxtb	r3, r3
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fb03 	bl	8009864 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	f003 0308 	and.w	r3, r3, #8
 8009264:	2b00      	cmp	r3, #0
 8009266:	d008      	beq.n	800927a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009274:	461a      	mov	r2, r3
 8009276:	2308      	movs	r3, #8
 8009278:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	f003 0310 	and.w	r3, r3, #16
 8009280:	2b00      	cmp	r3, #0
 8009282:	d008      	beq.n	8009296 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009290:	461a      	mov	r2, r3
 8009292:	2310      	movs	r3, #16
 8009294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d008      	beq.n	80092b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80092a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ac:	461a      	mov	r2, r3
 80092ae:	2340      	movs	r3, #64	@ 0x40
 80092b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d023      	beq.n	8009304 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80092bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092be:	6a38      	ldr	r0, [r7, #32]
 80092c0:	f005 f880 	bl	800e3c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80092c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c6:	4613      	mov	r3, r2
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	3310      	adds	r3, #16
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	4413      	add	r3, r2
 80092d4:	3304      	adds	r3, #4
 80092d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	78db      	ldrb	r3, [r3, #3]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d108      	bne.n	80092f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	2200      	movs	r2, #0
 80092e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80092e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fb03 	bl	80098f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80092f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092fe:	461a      	mov	r2, r3
 8009300:	2302      	movs	r3, #2
 8009302:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800930e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fb42 	bl	800999a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009318:	3301      	adds	r3, #1
 800931a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800931c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931e:	085b      	lsrs	r3, r3, #1
 8009320:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009324:	2b00      	cmp	r3, #0
 8009326:	f47f af2e 	bne.w	8009186 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f005 fa47 	bl	800e7c2 <USB_ReadInterrupts>
 8009334:	4603      	mov	r3, r0
 8009336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800933a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800933e:	d122      	bne.n	8009386 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	69fa      	ldr	r2, [r7, #28]
 800934a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800934e:	f023 0301 	bic.w	r3, r3, #1
 8009352:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800935a:	2b01      	cmp	r3, #1
 800935c:	d108      	bne.n	8009370 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009366:	2100      	movs	r1, #0
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fcf5 	bl	8009d58 <HAL_PCDEx_LPM_Callback>
 800936e:	e002      	b.n	8009376 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 faab 	bl	80098cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	695a      	ldr	r2, [r3, #20]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4618      	mov	r0, r3
 800938c:	f005 fa19 	bl	800e7c2 <USB_ReadInterrupts>
 8009390:	4603      	mov	r3, r0
 8009392:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009396:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800939a:	d112      	bne.n	80093c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d102      	bne.n	80093b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fa83 	bl	80098b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	695a      	ldr	r2, [r3, #20]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80093c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f005 f9fb 	bl	800e7c2 <USB_ReadInterrupts>
 80093cc:	4603      	mov	r3, r0
 80093ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093d6:	d121      	bne.n	800941c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	695a      	ldr	r2, [r3, #20]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80093e6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d111      	bne.n	8009416 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009400:	089b      	lsrs	r3, r3, #2
 8009402:	f003 020f 	and.w	r2, r3, #15
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800940c:	2101      	movs	r1, #1
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fca2 	bl	8009d58 <HAL_PCDEx_LPM_Callback>
 8009414:	e002      	b.n	800941c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa4e 	bl	80098b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4618      	mov	r0, r3
 8009422:	f005 f9ce 	bl	800e7c2 <USB_ReadInterrupts>
 8009426:	4603      	mov	r3, r0
 8009428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800942c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009430:	f040 80b7 	bne.w	80095a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009442:	f023 0301 	bic.w	r3, r3, #1
 8009446:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2110      	movs	r1, #16
 800944e:	4618      	mov	r0, r3
 8009450:	f004 ffb8 	bl	800e3c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009454:	2300      	movs	r3, #0
 8009456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009458:	e046      	b.n	80094e8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800945a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009466:	461a      	mov	r2, r3
 8009468:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800946c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800946e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800947e:	0151      	lsls	r1, r2, #5
 8009480:	69fa      	ldr	r2, [r7, #28]
 8009482:	440a      	add	r2, r1
 8009484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009488:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800948c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800948e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	4413      	add	r3, r2
 8009496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800949a:	461a      	mov	r2, r3
 800949c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80094a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80094a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094b2:	0151      	lsls	r1, r2, #5
 80094b4:	69fa      	ldr	r2, [r7, #28]
 80094b6:	440a      	add	r2, r1
 80094b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80094c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e4:	3301      	adds	r3, #1
 80094e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	791b      	ldrb	r3, [r3, #4]
 80094ec:	461a      	mov	r2, r3
 80094ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d3b2      	bcc.n	800945a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	69fa      	ldr	r2, [r7, #28]
 80094fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009502:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009506:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	7bdb      	ldrb	r3, [r3, #15]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d016      	beq.n	800953e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800951a:	69fa      	ldr	r2, [r7, #28]
 800951c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009520:	f043 030b 	orr.w	r3, r3, #11
 8009524:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800952e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009530:	69fa      	ldr	r2, [r7, #28]
 8009532:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009536:	f043 030b 	orr.w	r3, r3, #11
 800953a:	6453      	str	r3, [r2, #68]	@ 0x44
 800953c:	e015      	b.n	800956a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009544:	695a      	ldr	r2, [r3, #20]
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800954c:	4619      	mov	r1, r3
 800954e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8009552:	4313      	orrs	r3, r2
 8009554:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009564:	f043 030b 	orr.w	r3, r3, #11
 8009568:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	69fa      	ldr	r2, [r7, #28]
 8009574:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009578:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800957c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800958c:	461a      	mov	r2, r3
 800958e:	f005 f9dd 	bl	800e94c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	695a      	ldr	r2, [r3, #20]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80095a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f005 f90b 	bl	800e7c2 <USB_ReadInterrupts>
 80095ac:	4603      	mov	r3, r0
 80095ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095b6:	d123      	bne.n	8009600 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4618      	mov	r0, r3
 80095be:	f005 f9a1 	bl	800e904 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f004 ff75 	bl	800e4b6 <USB_GetDevSpeed>
 80095cc:	4603      	mov	r3, r0
 80095ce:	461a      	mov	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681c      	ldr	r4, [r3, #0]
 80095d8:	f001 f9b0 	bl	800a93c <HAL_RCC_GetHCLKFreq>
 80095dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80095e2:	461a      	mov	r2, r3
 80095e4:	4620      	mov	r0, r4
 80095e6:	f004 fc8f 	bl	800df08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f95a 	bl	80098a4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	695a      	ldr	r2, [r3, #20]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80095fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4618      	mov	r0, r3
 8009606:	f005 f8dc 	bl	800e7c2 <USB_ReadInterrupts>
 800960a:	4603      	mov	r3, r0
 800960c:	f003 0308 	and.w	r3, r3, #8
 8009610:	2b08      	cmp	r3, #8
 8009612:	d10a      	bne.n	800962a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f93b 	bl	8009890 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	695a      	ldr	r2, [r3, #20]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f002 0208 	and.w	r2, r2, #8
 8009628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4618      	mov	r0, r3
 8009630:	f005 f8c7 	bl	800e7c2 <USB_ReadInterrupts>
 8009634:	4603      	mov	r3, r0
 8009636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800963a:	2b80      	cmp	r3, #128	@ 0x80
 800963c:	d123      	bne.n	8009686 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800964a:	2301      	movs	r3, #1
 800964c:	627b      	str	r3, [r7, #36]	@ 0x24
 800964e:	e014      	b.n	800967a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009654:	4613      	mov	r3, r2
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	4413      	add	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	440b      	add	r3, r1
 800965e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d105      	bne.n	8009674 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966a:	b2db      	uxtb	r3, r3
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f962 	bl	8009938 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	3301      	adds	r3, #1
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	791b      	ldrb	r3, [r3, #4]
 800967e:	461a      	mov	r2, r3
 8009680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009682:	4293      	cmp	r3, r2
 8009684:	d3e4      	bcc.n	8009650 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4618      	mov	r0, r3
 800968c:	f005 f899 	bl	800e7c2 <USB_ReadInterrupts>
 8009690:	4603      	mov	r3, r0
 8009692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800969a:	d13c      	bne.n	8009716 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800969c:	2301      	movs	r3, #1
 800969e:	627b      	str	r3, [r7, #36]	@ 0x24
 80096a0:	e02b      	b.n	80096fa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80096a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b6:	4613      	mov	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	440b      	add	r3, r1
 80096c0:	3318      	adds	r3, #24
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d115      	bne.n	80096f4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80096c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	da12      	bge.n	80096f4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096d2:	4613      	mov	r3, r2
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	440b      	add	r3, r1
 80096dc:	3317      	adds	r3, #23
 80096de:	2201      	movs	r2, #1
 80096e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80096e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f922 	bl	8009938 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f6:	3301      	adds	r3, #1
 80096f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	791b      	ldrb	r3, [r3, #4]
 80096fe:	461a      	mov	r2, r3
 8009700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009702:	4293      	cmp	r3, r2
 8009704:	d3cd      	bcc.n	80096a2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	695a      	ldr	r2, [r3, #20]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4618      	mov	r0, r3
 800971c:	f005 f851 	bl	800e7c2 <USB_ReadInterrupts>
 8009720:	4603      	mov	r3, r0
 8009722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009726:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800972a:	d156      	bne.n	80097da <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800972c:	2301      	movs	r3, #1
 800972e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009730:	e045      	b.n	80097be <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009746:	4613      	mov	r3, r2
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d12e      	bne.n	80097b8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800975a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800975c:	2b00      	cmp	r3, #0
 800975e:	da2b      	bge.n	80097b8 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	0c1a      	lsrs	r2, r3, #16
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800976a:	4053      	eors	r3, r2
 800976c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009770:	2b00      	cmp	r3, #0
 8009772:	d121      	bne.n	80097b8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009778:	4613      	mov	r3, r2
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009786:	2201      	movs	r2, #1
 8009788:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097b4:	6053      	str	r3, [r2, #4]
            break;
 80097b6:	e008      	b.n	80097ca <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ba:	3301      	adds	r3, #1
 80097bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	791b      	ldrb	r3, [r3, #4]
 80097c2:	461a      	mov	r2, r3
 80097c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d3b3      	bcc.n	8009732 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	695a      	ldr	r2, [r3, #20]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80097d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4618      	mov	r0, r3
 80097e0:	f004 ffef 	bl	800e7c2 <USB_ReadInterrupts>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80097ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ee:	d10a      	bne.n	8009806 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f88d 	bl	8009910 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	695a      	ldr	r2, [r3, #20]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4618      	mov	r0, r3
 800980c:	f004 ffd9 	bl	800e7c2 <USB_ReadInterrupts>
 8009810:	4603      	mov	r3, r0
 8009812:	f003 0304 	and.w	r3, r3, #4
 8009816:	2b04      	cmp	r3, #4
 8009818:	d115      	bne.n	8009846 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f879 	bl	8009924 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6859      	ldr	r1, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	430a      	orrs	r2, r1
 8009840:	605a      	str	r2, [r3, #4]
 8009842:	e000      	b.n	8009846 <HAL_PCD_IRQHandler+0x996>
      return;
 8009844:	bf00      	nop
    }
  }
}
 8009846:	3734      	adds	r7, #52	@ 0x34
 8009848:	46bd      	mov	sp, r7
 800984a:	bd90      	pop	{r4, r7, pc}

0800984c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	460b      	mov	r3, r1
 8009942:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009948:	2b00      	cmp	r3, #0
 800994a:	da0c      	bge.n	8009966 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	f003 020f 	and.w	r2, r3, #15
 8009952:	4613      	mov	r3, r2
 8009954:	00db      	lsls	r3, r3, #3
 8009956:	4413      	add	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	3310      	adds	r3, #16
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	4413      	add	r3, r2
 8009960:	3304      	adds	r3, #4
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	e00c      	b.n	8009980 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009966:	78fb      	ldrb	r3, [r7, #3]
 8009968:	f003 020f 	and.w	r2, r3, #15
 800996c:	4613      	mov	r3, r2
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	4413      	add	r3, r2
 800997c:	3304      	adds	r3, #4
 800997e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68f9      	ldr	r1, [r7, #12]
 8009986:	4618      	mov	r0, r3
 8009988:	f004 fdba 	bl	800e500 <USB_EPStopXfer>
 800998c:	4603      	mov	r3, r0
 800998e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009990:	7afb      	ldrb	r3, [r7, #11]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b08a      	sub	sp, #40	@ 0x28
 800999e:	af02      	add	r7, sp, #8
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	4613      	mov	r3, r2
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	4413      	add	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	3310      	adds	r3, #16
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	4413      	add	r3, r2
 80099be:	3304      	adds	r3, #4
 80099c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	695a      	ldr	r2, [r3, #20]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d901      	bls.n	80099d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e06b      	b.n	8009aaa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	691a      	ldr	r2, [r3, #16]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d902      	bls.n	80099ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	3303      	adds	r3, #3
 80099f2:	089b      	lsrs	r3, r3, #2
 80099f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80099f6:	e02a      	b.n	8009a4e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	691a      	ldr	r2, [r3, #16]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	69fa      	ldr	r2, [r7, #28]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d902      	bls.n	8009a14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	3303      	adds	r3, #3
 8009a18:	089b      	lsrs	r3, r3, #2
 8009a1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68d9      	ldr	r1, [r3, #12]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	4603      	mov	r3, r0
 8009a30:	6978      	ldr	r0, [r7, #20]
 8009a32:	f004 fe0f 	bl	800e654 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	68da      	ldr	r2, [r3, #12]
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	441a      	add	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	695a      	ldr	r2, [r3, #20]
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	441a      	add	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d809      	bhi.n	8009a78 <PCD_WriteEmptyTxFifo+0xde>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	695a      	ldr	r2, [r3, #20]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d203      	bcs.n	8009a78 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1bf      	bne.n	80099f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	691a      	ldr	r2, [r3, #16]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d811      	bhi.n	8009aa8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	f003 030f 	and.w	r3, r3, #15
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a90:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	43db      	mvns	r3, r3
 8009a9e:	6939      	ldr	r1, [r7, #16]
 8009aa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3720      	adds	r7, #32
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b088      	sub	sp, #32
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	333c      	adds	r3, #60	@ 0x3c
 8009acc:	3304      	adds	r3, #4
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	799b      	ldrb	r3, [r3, #6]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d17b      	bne.n	8009be2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	f003 0308 	and.w	r3, r3, #8
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d015      	beq.n	8009b20 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	4a61      	ldr	r2, [pc, #388]	@ (8009c7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	f240 80b9 	bls.w	8009c70 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 80b3 	beq.w	8009c70 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b16:	461a      	mov	r2, r3
 8009b18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b1c:	6093      	str	r3, [r2, #8]
 8009b1e:	e0a7      	b.n	8009c70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d009      	beq.n	8009b3e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b36:	461a      	mov	r2, r3
 8009b38:	2320      	movs	r3, #32
 8009b3a:	6093      	str	r3, [r2, #8]
 8009b3c:	e098      	b.n	8009c70 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f040 8093 	bne.w	8009c70 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	4a4b      	ldr	r2, [pc, #300]	@ (8009c7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d90f      	bls.n	8009b72 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00a      	beq.n	8009b72 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b6e:	6093      	str	r3, [r2, #8]
 8009b70:	e07e      	b.n	8009c70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4613      	mov	r3, r2
 8009b76:	00db      	lsls	r3, r3, #3
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	4413      	add	r3, r2
 8009b84:	3304      	adds	r3, #4
 8009b86:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a1a      	ldr	r2, [r3, #32]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	0159      	lsls	r1, r3, #5
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	440b      	add	r3, r1
 8009b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d114      	bne.n	8009bd4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d109      	bne.n	8009bc6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	f004 fec4 	bl	800e94c <USB_EP0_OutStart>
 8009bc4:	e006      	b.n	8009bd4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	68da      	ldr	r2, [r3, #12]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	441a      	add	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff fe36 	bl	800984c <HAL_PCD_DataOutStageCallback>
 8009be0:	e046      	b.n	8009c70 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	4a26      	ldr	r2, [pc, #152]	@ (8009c80 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d124      	bne.n	8009c34 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c00:	461a      	mov	r2, r3
 8009c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c06:	6093      	str	r3, [r2, #8]
 8009c08:	e032      	b.n	8009c70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f003 0320 	and.w	r3, r3, #32
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d008      	beq.n	8009c26 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c20:	461a      	mov	r2, r3
 8009c22:	2320      	movs	r3, #32
 8009c24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7ff fe0d 	bl	800984c <HAL_PCD_DataOutStageCallback>
 8009c32:	e01d      	b.n	8009c70 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d114      	bne.n	8009c64 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	00db      	lsls	r3, r3, #3
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	440b      	add	r3, r1
 8009c48:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d108      	bne.n	8009c64 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	2100      	movs	r1, #0
 8009c60:	f004 fe74 	bl	800e94c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff fdee 	bl	800984c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	4f54300a 	.word	0x4f54300a
 8009c80:	4f54310a 	.word	0x4f54310a

08009c84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	333c      	adds	r3, #60	@ 0x3c
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	4a15      	ldr	r2, [pc, #84]	@ (8009d0c <PCD_EP_OutSetupPacket_int+0x88>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d90e      	bls.n	8009cd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d009      	beq.n	8009cd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff fdcf 	bl	800987c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8009d0c <PCD_EP_OutSetupPacket_int+0x88>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d90c      	bls.n	8009d00 <PCD_EP_OutSetupPacket_int+0x7c>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	799b      	ldrb	r3, [r3, #6]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d108      	bne.n	8009d00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	f004 fe26 	bl	800e94c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	4f54300a 	.word	0x4f54300a

08009d10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d3e:	4b05      	ldr	r3, [pc, #20]	@ (8009d54 <HAL_PCDEx_ActivateLPM+0x44>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	10000003 	.word	0x10000003

08009d58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d74:	4b05      	ldr	r3, [pc, #20]	@ (8009d8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a04      	ldr	r2, [pc, #16]	@ (8009d8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d7e:	6013      	str	r3, [r2, #0]
}
 8009d80:	bf00      	nop
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	40007000 	.word	0x40007000

08009d90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009d9a:	4b23      	ldr	r3, [pc, #140]	@ (8009e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d9e:	4a22      	ldr	r2, [pc, #136]	@ (8009e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8009da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8009da6:	4b20      	ldr	r3, [pc, #128]	@ (8009e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8009da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009dae:	603b      	str	r3, [r7, #0]
 8009db0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009db2:	4b1e      	ldr	r3, [pc, #120]	@ (8009e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a1d      	ldr	r2, [pc, #116]	@ (8009e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009dbe:	f7fb ffa9 	bl	8005d14 <HAL_GetTick>
 8009dc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009dc4:	e009      	b.n	8009dda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009dc6:	f7fb ffa5 	bl	8005d14 <HAL_GetTick>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009dd4:	d901      	bls.n	8009dda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e022      	b.n	8009e20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009dda:	4b14      	ldr	r3, [pc, #80]	@ (8009e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009de6:	d1ee      	bne.n	8009dc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009de8:	4b10      	ldr	r3, [pc, #64]	@ (8009e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a0f      	ldr	r2, [pc, #60]	@ (8009e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009df2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009df4:	f7fb ff8e 	bl	8005d14 <HAL_GetTick>
 8009df8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009dfa:	e009      	b.n	8009e10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009dfc:	f7fb ff8a 	bl	8005d14 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e0a:	d901      	bls.n	8009e10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e007      	b.n	8009e20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009e10:	4b06      	ldr	r3, [pc, #24]	@ (8009e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e1c:	d1ee      	bne.n	8009dfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	40023800 	.word	0x40023800
 8009e2c:	40007000 	.word	0x40007000

08009e30 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009e38:	f7fb ff6c 	bl	8005d14 <HAL_GetTick>
 8009e3c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e067      	b.n	8009f18 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10b      	bne.n	8009e6c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7f8 fb63 	bl	8002528 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009e62:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f85e 	bl	8009f28 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	021a      	lsls	r2, r3, #8
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2120      	movs	r1, #32
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f856 	bl	8009f44 <QSPI_WaitFlagStateUntilTimeout>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d135      	bne.n	8009f0e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8009f20 <HAL_QSPI_Init+0xf0>)
 8009eaa:	4013      	ands	r3, r2
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	6852      	ldr	r2, [r2, #4]
 8009eb0:	0611      	lsls	r1, r2, #24
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	68d2      	ldr	r2, [r2, #12]
 8009eb6:	4311      	orrs	r1, r2
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	69d2      	ldr	r2, [r2, #28]
 8009ebc:	4311      	orrs	r1, r2
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6a12      	ldr	r2, [r2, #32]
 8009ec2:	4311      	orrs	r1, r2
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	430b      	orrs	r3, r1
 8009eca:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	4b14      	ldr	r3, [pc, #80]	@ (8009f24 <HAL_QSPI_Init+0xf4>)
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	6912      	ldr	r2, [r2, #16]
 8009eda:	0411      	lsls	r1, r2, #16
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6952      	ldr	r2, [r2, #20]
 8009ee0:	4311      	orrs	r1, r2
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	6992      	ldr	r2, [r2, #24]
 8009ee6:	4311      	orrs	r1, r2
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6812      	ldr	r2, [r2, #0]
 8009eec:	430b      	orrs	r3, r1
 8009eee:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f042 0201 	orr.w	r2, r2, #1
 8009efe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8009f16:	7afb      	ldrb	r3, [r7, #11]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	00ffff2f 	.word	0x00ffff2f
 8009f24:	ffe0f8fe 	.word	0xffe0f8fe

08009f28 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	4613      	mov	r3, r2
 8009f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009f54:	e01a      	b.n	8009f8c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5c:	d016      	beq.n	8009f8c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f5e:	f7fb fed9 	bl	8005d14 <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d302      	bcc.n	8009f74 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10b      	bne.n	8009f8c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2204      	movs	r2, #4
 8009f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f80:	f043 0201 	orr.w	r2, r3, #1
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e00e      	b.n	8009faa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	689a      	ldr	r2, [r3, #8]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	4013      	ands	r3, r2
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bf14      	ite	ne
 8009f9a:	2301      	movne	r3, #1
 8009f9c:	2300      	moveq	r3, #0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d1d6      	bne.n	8009f56 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e29b      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 8087 	beq.w	800a0e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009fd8:	4b96      	ldr	r3, [pc, #600]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f003 030c 	and.w	r3, r3, #12
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d00c      	beq.n	8009ffe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009fe4:	4b93      	ldr	r3, [pc, #588]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f003 030c 	and.w	r3, r3, #12
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d112      	bne.n	800a016 <HAL_RCC_OscConfig+0x62>
 8009ff0:	4b90      	ldr	r3, [pc, #576]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ffc:	d10b      	bne.n	800a016 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ffe:	4b8d      	ldr	r3, [pc, #564]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d06c      	beq.n	800a0e4 <HAL_RCC_OscConfig+0x130>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d168      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e275      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a01e:	d106      	bne.n	800a02e <HAL_RCC_OscConfig+0x7a>
 800a020:	4b84      	ldr	r3, [pc, #528]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a83      	ldr	r2, [pc, #524]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	e02e      	b.n	800a08c <HAL_RCC_OscConfig+0xd8>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10c      	bne.n	800a050 <HAL_RCC_OscConfig+0x9c>
 800a036:	4b7f      	ldr	r3, [pc, #508]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a7e      	ldr	r2, [pc, #504]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a03c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	4b7c      	ldr	r3, [pc, #496]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a7b      	ldr	r2, [pc, #492]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a048:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	e01d      	b.n	800a08c <HAL_RCC_OscConfig+0xd8>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a058:	d10c      	bne.n	800a074 <HAL_RCC_OscConfig+0xc0>
 800a05a:	4b76      	ldr	r3, [pc, #472]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a75      	ldr	r2, [pc, #468]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	4b73      	ldr	r3, [pc, #460]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a72      	ldr	r2, [pc, #456]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a06c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	e00b      	b.n	800a08c <HAL_RCC_OscConfig+0xd8>
 800a074:	4b6f      	ldr	r3, [pc, #444]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a6e      	ldr	r2, [pc, #440]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a07a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	4b6c      	ldr	r3, [pc, #432]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a6b      	ldr	r2, [pc, #428]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a08a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d013      	beq.n	800a0bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a094:	f7fb fe3e 	bl	8005d14 <HAL_GetTick>
 800a098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a09a:	e008      	b.n	800a0ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a09c:	f7fb fe3a 	bl	8005d14 <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	2b64      	cmp	r3, #100	@ 0x64
 800a0a8:	d901      	bls.n	800a0ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e229      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0ae:	4b61      	ldr	r3, [pc, #388]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d0f0      	beq.n	800a09c <HAL_RCC_OscConfig+0xe8>
 800a0ba:	e014      	b.n	800a0e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0bc:	f7fb fe2a 	bl	8005d14 <HAL_GetTick>
 800a0c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0c2:	e008      	b.n	800a0d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0c4:	f7fb fe26 	bl	8005d14 <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	2b64      	cmp	r3, #100	@ 0x64
 800a0d0:	d901      	bls.n	800a0d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e215      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0d6:	4b57      	ldr	r3, [pc, #348]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1f0      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x110>
 800a0e2:	e000      	b.n	800a0e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d069      	beq.n	800a1c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a0f2:	4b50      	ldr	r3, [pc, #320]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	f003 030c 	and.w	r3, r3, #12
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00b      	beq.n	800a116 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0fe:	4b4d      	ldr	r3, [pc, #308]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f003 030c 	and.w	r3, r3, #12
 800a106:	2b08      	cmp	r3, #8
 800a108:	d11c      	bne.n	800a144 <HAL_RCC_OscConfig+0x190>
 800a10a:	4b4a      	ldr	r3, [pc, #296]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d116      	bne.n	800a144 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a116:	4b47      	ldr	r3, [pc, #284]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d005      	beq.n	800a12e <HAL_RCC_OscConfig+0x17a>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d001      	beq.n	800a12e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e1e9      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a12e:	4b41      	ldr	r3, [pc, #260]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	00db      	lsls	r3, r3, #3
 800a13c:	493d      	ldr	r1, [pc, #244]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a142:	e040      	b.n	800a1c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d023      	beq.n	800a194 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a14c:	4b39      	ldr	r3, [pc, #228]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a38      	ldr	r2, [pc, #224]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a152:	f043 0301 	orr.w	r3, r3, #1
 800a156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a158:	f7fb fddc 	bl	8005d14 <HAL_GetTick>
 800a15c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a15e:	e008      	b.n	800a172 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a160:	f7fb fdd8 	bl	8005d14 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d901      	bls.n	800a172 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e1c7      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a172:	4b30      	ldr	r3, [pc, #192]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 0302 	and.w	r3, r3, #2
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0f0      	beq.n	800a160 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a17e:	4b2d      	ldr	r3, [pc, #180]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	4929      	ldr	r1, [pc, #164]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	600b      	str	r3, [r1, #0]
 800a192:	e018      	b.n	800a1c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a194:	4b27      	ldr	r3, [pc, #156]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a26      	ldr	r2, [pc, #152]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a19a:	f023 0301 	bic.w	r3, r3, #1
 800a19e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1a0:	f7fb fdb8 	bl	8005d14 <HAL_GetTick>
 800a1a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1a6:	e008      	b.n	800a1ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1a8:	f7fb fdb4 	bl	8005d14 <HAL_GetTick>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d901      	bls.n	800a1ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e1a3      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1ba:	4b1e      	ldr	r3, [pc, #120]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1f0      	bne.n	800a1a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 0308 	and.w	r3, r3, #8
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d038      	beq.n	800a244 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d019      	beq.n	800a20e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1da:	4b16      	ldr	r3, [pc, #88]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a1dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1de:	4a15      	ldr	r2, [pc, #84]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a1e0:	f043 0301 	orr.w	r3, r3, #1
 800a1e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1e6:	f7fb fd95 	bl	8005d14 <HAL_GetTick>
 800a1ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1ec:	e008      	b.n	800a200 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1ee:	f7fb fd91 	bl	8005d14 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d901      	bls.n	800a200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e180      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a200:	4b0c      	ldr	r3, [pc, #48]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0f0      	beq.n	800a1ee <HAL_RCC_OscConfig+0x23a>
 800a20c:	e01a      	b.n	800a244 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a20e:	4b09      	ldr	r3, [pc, #36]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a212:	4a08      	ldr	r2, [pc, #32]	@ (800a234 <HAL_RCC_OscConfig+0x280>)
 800a214:	f023 0301 	bic.w	r3, r3, #1
 800a218:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a21a:	f7fb fd7b 	bl	8005d14 <HAL_GetTick>
 800a21e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a220:	e00a      	b.n	800a238 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a222:	f7fb fd77 	bl	8005d14 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d903      	bls.n	800a238 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e166      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
 800a234:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a238:	4b92      	ldr	r3, [pc, #584]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a23a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1ee      	bne.n	800a222 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 80a4 	beq.w	800a39a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a252:	4b8c      	ldr	r3, [pc, #560]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10d      	bne.n	800a27a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a25e:	4b89      	ldr	r3, [pc, #548]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a262:	4a88      	ldr	r2, [pc, #544]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a268:	6413      	str	r3, [r2, #64]	@ 0x40
 800a26a:	4b86      	ldr	r3, [pc, #536]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a26e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a272:	60bb      	str	r3, [r7, #8]
 800a274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a276:	2301      	movs	r3, #1
 800a278:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a27a:	4b83      	ldr	r3, [pc, #524]	@ (800a488 <HAL_RCC_OscConfig+0x4d4>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a282:	2b00      	cmp	r3, #0
 800a284:	d118      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a286:	4b80      	ldr	r3, [pc, #512]	@ (800a488 <HAL_RCC_OscConfig+0x4d4>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a7f      	ldr	r2, [pc, #508]	@ (800a488 <HAL_RCC_OscConfig+0x4d4>)
 800a28c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a292:	f7fb fd3f 	bl	8005d14 <HAL_GetTick>
 800a296:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a298:	e008      	b.n	800a2ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a29a:	f7fb fd3b 	bl	8005d14 <HAL_GetTick>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	2b64      	cmp	r3, #100	@ 0x64
 800a2a6:	d901      	bls.n	800a2ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e12a      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2ac:	4b76      	ldr	r3, [pc, #472]	@ (800a488 <HAL_RCC_OscConfig+0x4d4>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d0f0      	beq.n	800a29a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d106      	bne.n	800a2ce <HAL_RCC_OscConfig+0x31a>
 800a2c0:	4b70      	ldr	r3, [pc, #448]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a2c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2c4:	4a6f      	ldr	r2, [pc, #444]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a2c6:	f043 0301 	orr.w	r3, r3, #1
 800a2ca:	6713      	str	r3, [r2, #112]	@ 0x70
 800a2cc:	e02d      	b.n	800a32a <HAL_RCC_OscConfig+0x376>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10c      	bne.n	800a2f0 <HAL_RCC_OscConfig+0x33c>
 800a2d6:	4b6b      	ldr	r3, [pc, #428]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a2d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2da:	4a6a      	ldr	r2, [pc, #424]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a2dc:	f023 0301 	bic.w	r3, r3, #1
 800a2e0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a2e2:	4b68      	ldr	r3, [pc, #416]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a2e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2e6:	4a67      	ldr	r2, [pc, #412]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a2e8:	f023 0304 	bic.w	r3, r3, #4
 800a2ec:	6713      	str	r3, [r2, #112]	@ 0x70
 800a2ee:	e01c      	b.n	800a32a <HAL_RCC_OscConfig+0x376>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	2b05      	cmp	r3, #5
 800a2f6:	d10c      	bne.n	800a312 <HAL_RCC_OscConfig+0x35e>
 800a2f8:	4b62      	ldr	r3, [pc, #392]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a2fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2fc:	4a61      	ldr	r2, [pc, #388]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a2fe:	f043 0304 	orr.w	r3, r3, #4
 800a302:	6713      	str	r3, [r2, #112]	@ 0x70
 800a304:	4b5f      	ldr	r3, [pc, #380]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a308:	4a5e      	ldr	r2, [pc, #376]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a30a:	f043 0301 	orr.w	r3, r3, #1
 800a30e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a310:	e00b      	b.n	800a32a <HAL_RCC_OscConfig+0x376>
 800a312:	4b5c      	ldr	r3, [pc, #368]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a316:	4a5b      	ldr	r2, [pc, #364]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a318:	f023 0301 	bic.w	r3, r3, #1
 800a31c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a31e:	4b59      	ldr	r3, [pc, #356]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a322:	4a58      	ldr	r2, [pc, #352]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a324:	f023 0304 	bic.w	r3, r3, #4
 800a328:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d015      	beq.n	800a35e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a332:	f7fb fcef 	bl	8005d14 <HAL_GetTick>
 800a336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a338:	e00a      	b.n	800a350 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a33a:	f7fb fceb 	bl	8005d14 <HAL_GetTick>
 800a33e:	4602      	mov	r2, r0
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a348:	4293      	cmp	r3, r2
 800a34a:	d901      	bls.n	800a350 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e0d8      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a350:	4b4c      	ldr	r3, [pc, #304]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a354:	f003 0302 	and.w	r3, r3, #2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d0ee      	beq.n	800a33a <HAL_RCC_OscConfig+0x386>
 800a35c:	e014      	b.n	800a388 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a35e:	f7fb fcd9 	bl	8005d14 <HAL_GetTick>
 800a362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a364:	e00a      	b.n	800a37c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a366:	f7fb fcd5 	bl	8005d14 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a374:	4293      	cmp	r3, r2
 800a376:	d901      	bls.n	800a37c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e0c2      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a37c:	4b41      	ldr	r3, [pc, #260]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a37e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a380:	f003 0302 	and.w	r3, r3, #2
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1ee      	bne.n	800a366 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d105      	bne.n	800a39a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a38e:	4b3d      	ldr	r3, [pc, #244]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a392:	4a3c      	ldr	r2, [pc, #240]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a398:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 80ae 	beq.w	800a500 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a3a4:	4b37      	ldr	r3, [pc, #220]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f003 030c 	and.w	r3, r3, #12
 800a3ac:	2b08      	cmp	r3, #8
 800a3ae:	d06d      	beq.n	800a48c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d14b      	bne.n	800a450 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3b8:	4b32      	ldr	r3, [pc, #200]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a31      	ldr	r2, [pc, #196]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a3be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3c4:	f7fb fca6 	bl	8005d14 <HAL_GetTick>
 800a3c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3ca:	e008      	b.n	800a3de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3cc:	f7fb fca2 	bl	8005d14 <HAL_GetTick>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d901      	bls.n	800a3de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e091      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3de:	4b29      	ldr	r3, [pc, #164]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1f0      	bne.n	800a3cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	69da      	ldr	r2, [r3, #28]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f8:	019b      	lsls	r3, r3, #6
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a400:	085b      	lsrs	r3, r3, #1
 800a402:	3b01      	subs	r3, #1
 800a404:	041b      	lsls	r3, r3, #16
 800a406:	431a      	orrs	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40c:	061b      	lsls	r3, r3, #24
 800a40e:	431a      	orrs	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a414:	071b      	lsls	r3, r3, #28
 800a416:	491b      	ldr	r1, [pc, #108]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a41c:	4b19      	ldr	r3, [pc, #100]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a18      	ldr	r2, [pc, #96]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a428:	f7fb fc74 	bl	8005d14 <HAL_GetTick>
 800a42c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a430:	f7fb fc70 	bl	8005d14 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e05f      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a442:	4b10      	ldr	r3, [pc, #64]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0f0      	beq.n	800a430 <HAL_RCC_OscConfig+0x47c>
 800a44e:	e057      	b.n	800a500 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a450:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a0b      	ldr	r2, [pc, #44]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a45a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a45c:	f7fb fc5a 	bl	8005d14 <HAL_GetTick>
 800a460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a462:	e008      	b.n	800a476 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a464:	f7fb fc56 	bl	8005d14 <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d901      	bls.n	800a476 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e045      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a476:	4b03      	ldr	r3, [pc, #12]	@ (800a484 <HAL_RCC_OscConfig+0x4d0>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1f0      	bne.n	800a464 <HAL_RCC_OscConfig+0x4b0>
 800a482:	e03d      	b.n	800a500 <HAL_RCC_OscConfig+0x54c>
 800a484:	40023800 	.word	0x40023800
 800a488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a48c:	4b1f      	ldr	r3, [pc, #124]	@ (800a50c <HAL_RCC_OscConfig+0x558>)
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d030      	beq.n	800a4fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d129      	bne.n	800a4fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d122      	bne.n	800a4fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a4bc:	4013      	ands	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a4c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d119      	bne.n	800a4fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d2:	085b      	lsrs	r3, r3, #1
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d10f      	bne.n	800a4fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d107      	bne.n	800a4fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d001      	beq.n	800a500 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e000      	b.n	800a502 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3718      	adds	r7, #24
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	40023800 	.word	0x40023800

0800a510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e0d0      	b.n	800a6ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a528:	4b6a      	ldr	r3, [pc, #424]	@ (800a6d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 030f 	and.w	r3, r3, #15
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	429a      	cmp	r2, r3
 800a534:	d910      	bls.n	800a558 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a536:	4b67      	ldr	r3, [pc, #412]	@ (800a6d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f023 020f 	bic.w	r2, r3, #15
 800a53e:	4965      	ldr	r1, [pc, #404]	@ (800a6d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	4313      	orrs	r3, r2
 800a544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a546:	4b63      	ldr	r3, [pc, #396]	@ (800a6d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 030f 	and.w	r3, r3, #15
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	429a      	cmp	r2, r3
 800a552:	d001      	beq.n	800a558 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e0b8      	b.n	800a6ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0302 	and.w	r3, r3, #2
 800a560:	2b00      	cmp	r3, #0
 800a562:	d020      	beq.n	800a5a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d005      	beq.n	800a57c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a570:	4b59      	ldr	r3, [pc, #356]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	4a58      	ldr	r2, [pc, #352]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a576:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a57a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0308 	and.w	r3, r3, #8
 800a584:	2b00      	cmp	r3, #0
 800a586:	d005      	beq.n	800a594 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a588:	4b53      	ldr	r3, [pc, #332]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	4a52      	ldr	r2, [pc, #328]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a58e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a592:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a594:	4b50      	ldr	r3, [pc, #320]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	494d      	ldr	r1, [pc, #308]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d040      	beq.n	800a634 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d107      	bne.n	800a5ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5ba:	4b47      	ldr	r3, [pc, #284]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d115      	bne.n	800a5f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e07f      	b.n	800a6ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d107      	bne.n	800a5e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5d2:	4b41      	ldr	r3, [pc, #260]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d109      	bne.n	800a5f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e073      	b.n	800a6ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5e2:	4b3d      	ldr	r3, [pc, #244]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0302 	and.w	r3, r3, #2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e06b      	b.n	800a6ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a5f2:	4b39      	ldr	r3, [pc, #228]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f023 0203 	bic.w	r2, r3, #3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	4936      	ldr	r1, [pc, #216]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a600:	4313      	orrs	r3, r2
 800a602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a604:	f7fb fb86 	bl	8005d14 <HAL_GetTick>
 800a608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a60a:	e00a      	b.n	800a622 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a60c:	f7fb fb82 	bl	8005d14 <HAL_GetTick>
 800a610:	4602      	mov	r2, r0
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d901      	bls.n	800a622 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e053      	b.n	800a6ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a622:	4b2d      	ldr	r3, [pc, #180]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f003 020c 	and.w	r2, r3, #12
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	429a      	cmp	r2, r3
 800a632:	d1eb      	bne.n	800a60c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a634:	4b27      	ldr	r3, [pc, #156]	@ (800a6d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 030f 	and.w	r3, r3, #15
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d210      	bcs.n	800a664 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a642:	4b24      	ldr	r3, [pc, #144]	@ (800a6d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f023 020f 	bic.w	r2, r3, #15
 800a64a:	4922      	ldr	r1, [pc, #136]	@ (800a6d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	4313      	orrs	r3, r2
 800a650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a652:	4b20      	ldr	r3, [pc, #128]	@ (800a6d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 030f 	and.w	r3, r3, #15
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d001      	beq.n	800a664 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e032      	b.n	800a6ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0304 	and.w	r3, r3, #4
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d008      	beq.n	800a682 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a670:	4b19      	ldr	r3, [pc, #100]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	4916      	ldr	r1, [pc, #88]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0308 	and.w	r3, r3, #8
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d009      	beq.n	800a6a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a68e:	4b12      	ldr	r3, [pc, #72]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	490e      	ldr	r1, [pc, #56]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a6a2:	f000 f885 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	091b      	lsrs	r3, r3, #4
 800a6ae:	f003 030f 	and.w	r3, r3, #15
 800a6b2:	490a      	ldr	r1, [pc, #40]	@ (800a6dc <HAL_RCC_ClockConfig+0x1cc>)
 800a6b4:	5ccb      	ldrb	r3, [r1, r3]
 800a6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ba:	4a09      	ldr	r2, [pc, #36]	@ (800a6e0 <HAL_RCC_ClockConfig+0x1d0>)
 800a6bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a6be:	4b09      	ldr	r3, [pc, #36]	@ (800a6e4 <HAL_RCC_ClockConfig+0x1d4>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f8 fd8e 	bl	80031e4 <HAL_InitTick>

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	40023c00 	.word	0x40023c00
 800a6d8:	40023800 	.word	0x40023800
 800a6dc:	0801346c 	.word	0x0801346c
 800a6e0:	20000000 	.word	0x20000000
 800a6e4:	20000004 	.word	0x20000004

0800a6e8 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08c      	sub	sp, #48	@ 0x30
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d127      	bne.n	800a74a <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a6fa:	4b2a      	ldr	r3, [pc, #168]	@ (800a7a4 <HAL_RCC_MCOConfig+0xbc>)
 800a6fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6fe:	4a29      	ldr	r2, [pc, #164]	@ (800a7a4 <HAL_RCC_MCOConfig+0xbc>)
 800a700:	f043 0301 	orr.w	r3, r3, #1
 800a704:	6313      	str	r3, [r2, #48]	@ 0x30
 800a706:	4b27      	ldr	r3, [pc, #156]	@ (800a7a4 <HAL_RCC_MCOConfig+0xbc>)
 800a708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	61bb      	str	r3, [r7, #24]
 800a710:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a712:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a718:	2302      	movs	r3, #2
 800a71a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a71c:	2303      	movs	r3, #3
 800a71e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a720:	2300      	movs	r3, #0
 800a722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a724:	2300      	movs	r3, #0
 800a726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a728:	f107 031c 	add.w	r3, r7, #28
 800a72c:	4619      	mov	r1, r3
 800a72e:	481e      	ldr	r0, [pc, #120]	@ (800a7a8 <HAL_RCC_MCOConfig+0xc0>)
 800a730:	f7fd fc4a 	bl	8007fc8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a734:	4b1b      	ldr	r3, [pc, #108]	@ (800a7a4 <HAL_RCC_MCOConfig+0xbc>)
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 800a73c:	68b9      	ldr	r1, [r7, #8]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	430b      	orrs	r3, r1
 800a742:	4918      	ldr	r1, [pc, #96]	@ (800a7a4 <HAL_RCC_MCOConfig+0xbc>)
 800a744:	4313      	orrs	r3, r2
 800a746:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 800a748:	e027      	b.n	800a79a <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800a74a:	4b16      	ldr	r3, [pc, #88]	@ (800a7a4 <HAL_RCC_MCOConfig+0xbc>)
 800a74c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a74e:	4a15      	ldr	r2, [pc, #84]	@ (800a7a4 <HAL_RCC_MCOConfig+0xbc>)
 800a750:	f043 0304 	orr.w	r3, r3, #4
 800a754:	6313      	str	r3, [r2, #48]	@ 0x30
 800a756:	4b13      	ldr	r3, [pc, #76]	@ (800a7a4 <HAL_RCC_MCOConfig+0xbc>)
 800a758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a762:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a768:	2302      	movs	r3, #2
 800a76a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a76c:	2303      	movs	r3, #3
 800a76e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a770:	2300      	movs	r3, #0
 800a772:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a774:	2300      	movs	r3, #0
 800a776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a778:	f107 031c 	add.w	r3, r7, #28
 800a77c:	4619      	mov	r1, r3
 800a77e:	480b      	ldr	r0, [pc, #44]	@ (800a7ac <HAL_RCC_MCOConfig+0xc4>)
 800a780:	f7fd fc22 	bl	8007fc8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800a784:	4b07      	ldr	r3, [pc, #28]	@ (800a7a4 <HAL_RCC_MCOConfig+0xbc>)
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	00d9      	lsls	r1, r3, #3
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	430b      	orrs	r3, r1
 800a794:	4903      	ldr	r1, [pc, #12]	@ (800a7a4 <HAL_RCC_MCOConfig+0xbc>)
 800a796:	4313      	orrs	r3, r2
 800a798:	608b      	str	r3, [r1, #8]
}
 800a79a:	bf00      	nop
 800a79c:	3730      	adds	r7, #48	@ 0x30
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	40023800 	.word	0x40023800
 800a7a8:	40020000 	.word	0x40020000
 800a7ac:	40020800 	.word	0x40020800

0800a7b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7b4:	b090      	sub	sp, #64	@ 0x40
 800a7b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7bc:	2300      	movs	r3, #0
 800a7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7c8:	4b59      	ldr	r3, [pc, #356]	@ (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f003 030c 	and.w	r3, r3, #12
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d00d      	beq.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x40>
 800a7d4:	2b08      	cmp	r3, #8
 800a7d6:	f200 80a1 	bhi.w	800a91c <HAL_RCC_GetSysClockFreq+0x16c>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d002      	beq.n	800a7e4 <HAL_RCC_GetSysClockFreq+0x34>
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d003      	beq.n	800a7ea <HAL_RCC_GetSysClockFreq+0x3a>
 800a7e2:	e09b      	b.n	800a91c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a7e4:	4b53      	ldr	r3, [pc, #332]	@ (800a934 <HAL_RCC_GetSysClockFreq+0x184>)
 800a7e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a7e8:	e09b      	b.n	800a922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a7ea:	4b53      	ldr	r3, [pc, #332]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x188>)
 800a7ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a7ee:	e098      	b.n	800a922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7f0:	4b4f      	ldr	r3, [pc, #316]	@ (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a7fa:	4b4d      	ldr	r3, [pc, #308]	@ (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d028      	beq.n	800a858 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a806:	4b4a      	ldr	r3, [pc, #296]	@ (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	099b      	lsrs	r3, r3, #6
 800a80c:	2200      	movs	r2, #0
 800a80e:	623b      	str	r3, [r7, #32]
 800a810:	627a      	str	r2, [r7, #36]	@ 0x24
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a818:	2100      	movs	r1, #0
 800a81a:	4b47      	ldr	r3, [pc, #284]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x188>)
 800a81c:	fb03 f201 	mul.w	r2, r3, r1
 800a820:	2300      	movs	r3, #0
 800a822:	fb00 f303 	mul.w	r3, r0, r3
 800a826:	4413      	add	r3, r2
 800a828:	4a43      	ldr	r2, [pc, #268]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x188>)
 800a82a:	fba0 1202 	umull	r1, r2, r0, r2
 800a82e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a830:	460a      	mov	r2, r1
 800a832:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a836:	4413      	add	r3, r2
 800a838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83c:	2200      	movs	r2, #0
 800a83e:	61bb      	str	r3, [r7, #24]
 800a840:	61fa      	str	r2, [r7, #28]
 800a842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a846:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a84a:	f7f5 fdb1 	bl	80003b0 <__aeabi_uldivmod>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4613      	mov	r3, r2
 800a854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a856:	e053      	b.n	800a900 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a858:	4b35      	ldr	r3, [pc, #212]	@ (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	099b      	lsrs	r3, r3, #6
 800a85e:	2200      	movs	r2, #0
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	617a      	str	r2, [r7, #20]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a86a:	f04f 0b00 	mov.w	fp, #0
 800a86e:	4652      	mov	r2, sl
 800a870:	465b      	mov	r3, fp
 800a872:	f04f 0000 	mov.w	r0, #0
 800a876:	f04f 0100 	mov.w	r1, #0
 800a87a:	0159      	lsls	r1, r3, #5
 800a87c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a880:	0150      	lsls	r0, r2, #5
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	ebb2 080a 	subs.w	r8, r2, sl
 800a88a:	eb63 090b 	sbc.w	r9, r3, fp
 800a88e:	f04f 0200 	mov.w	r2, #0
 800a892:	f04f 0300 	mov.w	r3, #0
 800a896:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a89a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a89e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a8a2:	ebb2 0408 	subs.w	r4, r2, r8
 800a8a6:	eb63 0509 	sbc.w	r5, r3, r9
 800a8aa:	f04f 0200 	mov.w	r2, #0
 800a8ae:	f04f 0300 	mov.w	r3, #0
 800a8b2:	00eb      	lsls	r3, r5, #3
 800a8b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8b8:	00e2      	lsls	r2, r4, #3
 800a8ba:	4614      	mov	r4, r2
 800a8bc:	461d      	mov	r5, r3
 800a8be:	eb14 030a 	adds.w	r3, r4, sl
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	eb45 030b 	adc.w	r3, r5, fp
 800a8c8:	607b      	str	r3, [r7, #4]
 800a8ca:	f04f 0200 	mov.w	r2, #0
 800a8ce:	f04f 0300 	mov.w	r3, #0
 800a8d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	028b      	lsls	r3, r1, #10
 800a8da:	4621      	mov	r1, r4
 800a8dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	028a      	lsls	r2, r1, #10
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	60bb      	str	r3, [r7, #8]
 800a8ee:	60fa      	str	r2, [r7, #12]
 800a8f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a8f4:	f7f5 fd5c 	bl	80003b0 <__aeabi_uldivmod>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a900:	4b0b      	ldr	r3, [pc, #44]	@ (800a930 <HAL_RCC_GetSysClockFreq+0x180>)
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	0c1b      	lsrs	r3, r3, #16
 800a906:	f003 0303 	and.w	r3, r3, #3
 800a90a:	3301      	adds	r3, #1
 800a90c:	005b      	lsls	r3, r3, #1
 800a90e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a910:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a914:	fbb2 f3f3 	udiv	r3, r2, r3
 800a918:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a91a:	e002      	b.n	800a922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a91c:	4b05      	ldr	r3, [pc, #20]	@ (800a934 <HAL_RCC_GetSysClockFreq+0x184>)
 800a91e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a920:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a924:	4618      	mov	r0, r3
 800a926:	3740      	adds	r7, #64	@ 0x40
 800a928:	46bd      	mov	sp, r7
 800a92a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a92e:	bf00      	nop
 800a930:	40023800 	.word	0x40023800
 800a934:	00f42400 	.word	0x00f42400
 800a938:	017d7840 	.word	0x017d7840

0800a93c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a940:	4b03      	ldr	r3, [pc, #12]	@ (800a950 <HAL_RCC_GetHCLKFreq+0x14>)
 800a942:	681b      	ldr	r3, [r3, #0]
}
 800a944:	4618      	mov	r0, r3
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	20000000 	.word	0x20000000

0800a954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a958:	f7ff fff0 	bl	800a93c <HAL_RCC_GetHCLKFreq>
 800a95c:	4602      	mov	r2, r0
 800a95e:	4b05      	ldr	r3, [pc, #20]	@ (800a974 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	0a9b      	lsrs	r3, r3, #10
 800a964:	f003 0307 	and.w	r3, r3, #7
 800a968:	4903      	ldr	r1, [pc, #12]	@ (800a978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a96a:	5ccb      	ldrb	r3, [r1, r3]
 800a96c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a970:	4618      	mov	r0, r3
 800a972:	bd80      	pop	{r7, pc}
 800a974:	40023800 	.word	0x40023800
 800a978:	0801347c 	.word	0x0801347c

0800a97c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a980:	f7ff ffdc 	bl	800a93c <HAL_RCC_GetHCLKFreq>
 800a984:	4602      	mov	r2, r0
 800a986:	4b05      	ldr	r3, [pc, #20]	@ (800a99c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	0b5b      	lsrs	r3, r3, #13
 800a98c:	f003 0307 	and.w	r3, r3, #7
 800a990:	4903      	ldr	r1, [pc, #12]	@ (800a9a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a992:	5ccb      	ldrb	r3, [r1, r3]
 800a994:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a998:	4618      	mov	r0, r3
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	40023800 	.word	0x40023800
 800a9a0:	0801347c 	.word	0x0801347c

0800a9a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	220f      	movs	r2, #15
 800a9b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a9b4:	4b12      	ldr	r3, [pc, #72]	@ (800aa00 <HAL_RCC_GetClockConfig+0x5c>)
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f003 0203 	and.w	r2, r3, #3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a9c0:	4b0f      	ldr	r3, [pc, #60]	@ (800aa00 <HAL_RCC_GetClockConfig+0x5c>)
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a9cc:	4b0c      	ldr	r3, [pc, #48]	@ (800aa00 <HAL_RCC_GetClockConfig+0x5c>)
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a9d8:	4b09      	ldr	r3, [pc, #36]	@ (800aa00 <HAL_RCC_GetClockConfig+0x5c>)
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	08db      	lsrs	r3, r3, #3
 800a9de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a9e6:	4b07      	ldr	r3, [pc, #28]	@ (800aa04 <HAL_RCC_GetClockConfig+0x60>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 020f 	and.w	r2, r3, #15
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	601a      	str	r2, [r3, #0]
}
 800a9f2:	bf00      	nop
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	40023800 	.word	0x40023800
 800aa04:	40023c00 	.word	0x40023c00

0800aa08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 0301 	and.w	r3, r3, #1
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d012      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aa30:	4b69      	ldr	r3, [pc, #420]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	4a68      	ldr	r2, [pc, #416]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa36:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aa3a:	6093      	str	r3, [r2, #8]
 800aa3c:	4b66      	ldr	r3, [pc, #408]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa3e:	689a      	ldr	r2, [r3, #8]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa44:	4964      	ldr	r1, [pc, #400]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800aa52:	2301      	movs	r3, #1
 800aa54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d017      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa62:	4b5d      	ldr	r3, [pc, #372]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa68:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa70:	4959      	ldr	r1, [pc, #356]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa80:	d101      	bne.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800aa82:	2301      	movs	r3, #1
 800aa84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d017      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aa9e:	4b4e      	ldr	r3, [pc, #312]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaa4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaac:	494a      	ldr	r1, [pc, #296]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaae:	4313      	orrs	r3, r2
 800aab0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aabc:	d101      	bne.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800aabe:	2301      	movs	r3, #1
 800aac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800aaca:	2301      	movs	r3, #1
 800aacc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800aada:	2301      	movs	r3, #1
 800aadc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0320 	and.w	r3, r3, #32
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f000 808b 	beq.w	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800aaec:	4b3a      	ldr	r3, [pc, #232]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf0:	4a39      	ldr	r2, [pc, #228]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaf6:	6413      	str	r3, [r2, #64]	@ 0x40
 800aaf8:	4b37      	ldr	r3, [pc, #220]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aafa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab00:	60bb      	str	r3, [r7, #8]
 800ab02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab04:	4b35      	ldr	r3, [pc, #212]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a34      	ldr	r2, [pc, #208]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab10:	f7fb f900 	bl	8005d14 <HAL_GetTick>
 800ab14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ab16:	e008      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab18:	f7fb f8fc 	bl	8005d14 <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	2b64      	cmp	r3, #100	@ 0x64
 800ab24:	d901      	bls.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e38f      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ab2a:	4b2c      	ldr	r3, [pc, #176]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0f0      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab36:	4b28      	ldr	r3, [pc, #160]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d035      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d02e      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab54:	4b20      	ldr	r3, [pc, #128]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab5e:	4b1e      	ldr	r3, [pc, #120]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab62:	4a1d      	ldr	r2, [pc, #116]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab68:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab6a:	4b1b      	ldr	r3, [pc, #108]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab6e:	4a1a      	ldr	r2, [pc, #104]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab74:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ab76:	4a18      	ldr	r2, [pc, #96]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ab7c:	4b16      	ldr	r3, [pc, #88]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d114      	bne.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab88:	f7fb f8c4 	bl	8005d14 <HAL_GetTick>
 800ab8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab8e:	e00a      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab90:	f7fb f8c0 	bl	8005d14 <HAL_GetTick>
 800ab94:	4602      	mov	r2, r0
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d901      	bls.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e351      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aba6:	4b0c      	ldr	r3, [pc, #48]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abaa:	f003 0302 	and.w	r3, r3, #2
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0ee      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abbe:	d111      	bne.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800abc0:	4b05      	ldr	r3, [pc, #20]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800abcc:	4b04      	ldr	r3, [pc, #16]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800abce:	400b      	ands	r3, r1
 800abd0:	4901      	ldr	r1, [pc, #4]	@ (800abd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abd2:	4313      	orrs	r3, r2
 800abd4:	608b      	str	r3, [r1, #8]
 800abd6:	e00b      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800abd8:	40023800 	.word	0x40023800
 800abdc:	40007000 	.word	0x40007000
 800abe0:	0ffffcff 	.word	0x0ffffcff
 800abe4:	4bac      	ldr	r3, [pc, #688]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	4aab      	ldr	r2, [pc, #684]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800abee:	6093      	str	r3, [r2, #8]
 800abf0:	4ba9      	ldr	r3, [pc, #676]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abf2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abfc:	49a6      	ldr	r1, [pc, #664]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0310 	and.w	r3, r3, #16
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d010      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac0e:	4ba2      	ldr	r3, [pc, #648]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac14:	4aa0      	ldr	r2, [pc, #640]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ac1e:	4b9e      	ldr	r3, [pc, #632]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac20:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac28:	499b      	ldr	r1, [pc, #620]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac3c:	4b96      	ldr	r3, [pc, #600]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac4a:	4993      	ldr	r1, [pc, #588]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac5e:	4b8e      	ldr	r3, [pc, #568]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac6c:	498a      	ldr	r1, [pc, #552]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00a      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac80:	4b85      	ldr	r3, [pc, #532]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac8e:	4982      	ldr	r1, [pc, #520]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac90:	4313      	orrs	r3, r2
 800ac92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00a      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aca2:	4b7d      	ldr	r3, [pc, #500]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aca8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acb0:	4979      	ldr	r1, [pc, #484]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acb2:	4313      	orrs	r3, r2
 800acb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800acc4:	4b74      	ldr	r3, [pc, #464]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acca:	f023 0203 	bic.w	r2, r3, #3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acd2:	4971      	ldr	r1, [pc, #452]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00a      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ace6:	4b6c      	ldr	r3, [pc, #432]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ace8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acec:	f023 020c 	bic.w	r2, r3, #12
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acf4:	4968      	ldr	r1, [pc, #416]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00a      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ad08:	4b63      	ldr	r3, [pc, #396]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad0e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad16:	4960      	ldr	r1, [pc, #384]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00a      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ad2a:	4b5b      	ldr	r3, [pc, #364]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad30:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad38:	4957      	ldr	r1, [pc, #348]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00a      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ad4c:	4b52      	ldr	r3, [pc, #328]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad5a:	494f      	ldr	r1, [pc, #316]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ad6e:	4b4a      	ldr	r3, [pc, #296]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad7c:	4946      	ldr	r1, [pc, #280]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00a      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ad90:	4b41      	ldr	r3, [pc, #260]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad96:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad9e:	493e      	ldr	r1, [pc, #248]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00a      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800adb2:	4b39      	ldr	r3, [pc, #228]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adc0:	4935      	ldr	r1, [pc, #212]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adc2:	4313      	orrs	r3, r2
 800adc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00a      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800add4:	4b30      	ldr	r3, [pc, #192]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800add6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adda:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ade2:	492d      	ldr	r1, [pc, #180]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d011      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800adf6:	4b28      	ldr	r3, [pc, #160]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adfc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae04:	4924      	ldr	r1, [pc, #144]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae14:	d101      	bne.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ae16:	2301      	movs	r3, #1
 800ae18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0308 	and.w	r3, r3, #8
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ae26:	2301      	movs	r3, #1
 800ae28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae36:	4b18      	ldr	r3, [pc, #96]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae3c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae44:	4914      	ldr	r1, [pc, #80]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae46:	4313      	orrs	r3, r2
 800ae48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00b      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ae58:	4b0f      	ldr	r3, [pc, #60]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae5e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae68:	490b      	ldr	r1, [pc, #44]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00f      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800ae7c:	4b06      	ldr	r3, [pc, #24]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae82:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae8c:	4902      	ldr	r1, [pc, #8]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800ae94:	e002      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800ae96:	bf00      	nop
 800ae98:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00b      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aea8:	4b8a      	ldr	r3, [pc, #552]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aeaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aeae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeb8:	4986      	ldr	r1, [pc, #536]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00b      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800aecc:	4b81      	ldr	r3, [pc, #516]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aed2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aedc:	497d      	ldr	r1, [pc, #500]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d006      	beq.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 80d6 	beq.w	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aef8:	4b76      	ldr	r3, [pc, #472]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a75      	ldr	r2, [pc, #468]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aefe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af04:	f7fa ff06 	bl	8005d14 <HAL_GetTick>
 800af08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800af0a:	e008      	b.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800af0c:	f7fa ff02 	bl	8005d14 <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b64      	cmp	r3, #100	@ 0x64
 800af18:	d901      	bls.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	e195      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800af1e:	4b6d      	ldr	r3, [pc, #436]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1f0      	bne.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	d021      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d11d      	bne.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af3e:	4b65      	ldr	r3, [pc, #404]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800af40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af44:	0c1b      	lsrs	r3, r3, #16
 800af46:	f003 0303 	and.w	r3, r3, #3
 800af4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800af4c:	4b61      	ldr	r3, [pc, #388]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800af4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af52:	0e1b      	lsrs	r3, r3, #24
 800af54:	f003 030f 	and.w	r3, r3, #15
 800af58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	019a      	lsls	r2, r3, #6
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	041b      	lsls	r3, r3, #16
 800af64:	431a      	orrs	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	061b      	lsls	r3, r3, #24
 800af6a:	431a      	orrs	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	071b      	lsls	r3, r3, #28
 800af72:	4958      	ldr	r1, [pc, #352]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800af74:	4313      	orrs	r3, r2
 800af76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d004      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af8e:	d00a      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d02e      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800afa4:	d129      	bne.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800afa6:	4b4b      	ldr	r3, [pc, #300]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800afa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afac:	0c1b      	lsrs	r3, r3, #16
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800afb4:	4b47      	ldr	r3, [pc, #284]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800afb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afba:	0f1b      	lsrs	r3, r3, #28
 800afbc:	f003 0307 	and.w	r3, r3, #7
 800afc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	019a      	lsls	r2, r3, #6
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	041b      	lsls	r3, r3, #16
 800afcc:	431a      	orrs	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	061b      	lsls	r3, r3, #24
 800afd4:	431a      	orrs	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	071b      	lsls	r3, r3, #28
 800afda:	493e      	ldr	r1, [pc, #248]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800afdc:	4313      	orrs	r3, r2
 800afde:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800afe2:	4b3c      	ldr	r3, [pc, #240]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800afe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afe8:	f023 021f 	bic.w	r2, r3, #31
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aff0:	3b01      	subs	r3, #1
 800aff2:	4938      	ldr	r1, [pc, #224]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aff4:	4313      	orrs	r3, r2
 800aff6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d01d      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b006:	4b33      	ldr	r3, [pc, #204]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b00c:	0e1b      	lsrs	r3, r3, #24
 800b00e:	f003 030f 	and.w	r3, r3, #15
 800b012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b014:	4b2f      	ldr	r3, [pc, #188]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b01a:	0f1b      	lsrs	r3, r3, #28
 800b01c:	f003 0307 	and.w	r3, r3, #7
 800b020:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	019a      	lsls	r2, r3, #6
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	041b      	lsls	r3, r3, #16
 800b02e:	431a      	orrs	r2, r3
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	061b      	lsls	r3, r3, #24
 800b034:	431a      	orrs	r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	071b      	lsls	r3, r3, #28
 800b03a:	4926      	ldr	r1, [pc, #152]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d011      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	019a      	lsls	r2, r3, #6
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	041b      	lsls	r3, r3, #16
 800b05a:	431a      	orrs	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	061b      	lsls	r3, r3, #24
 800b062:	431a      	orrs	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	071b      	lsls	r3, r3, #28
 800b06a:	491a      	ldr	r1, [pc, #104]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b06c:	4313      	orrs	r3, r2
 800b06e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b072:	4b18      	ldr	r3, [pc, #96]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a17      	ldr	r2, [pc, #92]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b078:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b07c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b07e:	f7fa fe49 	bl	8005d14 <HAL_GetTick>
 800b082:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b084:	e008      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b086:	f7fa fe45 	bl	8005d14 <HAL_GetTick>
 800b08a:	4602      	mov	r2, r0
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	2b64      	cmp	r3, #100	@ 0x64
 800b092:	d901      	bls.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	e0d8      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b098:	4b0e      	ldr	r3, [pc, #56]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0f0      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	f040 80ce 	bne.w	800b248 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b0ac:	4b09      	ldr	r3, [pc, #36]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a08      	ldr	r2, [pc, #32]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b0b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0b8:	f7fa fe2c 	bl	8005d14 <HAL_GetTick>
 800b0bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b0be:	e00b      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b0c0:	f7fa fe28 	bl	8005d14 <HAL_GetTick>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	2b64      	cmp	r3, #100	@ 0x64
 800b0cc:	d904      	bls.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e0bb      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b0d2:	bf00      	nop
 800b0d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b0d8:	4b5e      	ldr	r3, [pc, #376]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0e4:	d0ec      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d009      	beq.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b102:	2b00      	cmp	r3, #0
 800b104:	d02e      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d12a      	bne.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b10e:	4b51      	ldr	r3, [pc, #324]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b114:	0c1b      	lsrs	r3, r3, #16
 800b116:	f003 0303 	and.w	r3, r3, #3
 800b11a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b11c:	4b4d      	ldr	r3, [pc, #308]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b122:	0f1b      	lsrs	r3, r3, #28
 800b124:	f003 0307 	and.w	r3, r3, #7
 800b128:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	019a      	lsls	r2, r3, #6
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	041b      	lsls	r3, r3, #16
 800b134:	431a      	orrs	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	061b      	lsls	r3, r3, #24
 800b13c:	431a      	orrs	r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	071b      	lsls	r3, r3, #28
 800b142:	4944      	ldr	r1, [pc, #272]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b144:	4313      	orrs	r3, r2
 800b146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b14a:	4b42      	ldr	r3, [pc, #264]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b14c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b150:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b158:	3b01      	subs	r3, #1
 800b15a:	021b      	lsls	r3, r3, #8
 800b15c:	493d      	ldr	r1, [pc, #244]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d022      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b178:	d11d      	bne.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b17a:	4b36      	ldr	r3, [pc, #216]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b180:	0e1b      	lsrs	r3, r3, #24
 800b182:	f003 030f 	and.w	r3, r3, #15
 800b186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b188:	4b32      	ldr	r3, [pc, #200]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b18e:	0f1b      	lsrs	r3, r3, #28
 800b190:	f003 0307 	and.w	r3, r3, #7
 800b194:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	019a      	lsls	r2, r3, #6
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a1b      	ldr	r3, [r3, #32]
 800b1a0:	041b      	lsls	r3, r3, #16
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	061b      	lsls	r3, r3, #24
 800b1a8:	431a      	orrs	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	071b      	lsls	r3, r3, #28
 800b1ae:	4929      	ldr	r1, [pc, #164]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 0308 	and.w	r3, r3, #8
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d028      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b1c2:	4b24      	ldr	r3, [pc, #144]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1c8:	0e1b      	lsrs	r3, r3, #24
 800b1ca:	f003 030f 	and.w	r3, r3, #15
 800b1ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b1d0:	4b20      	ldr	r3, [pc, #128]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1d6:	0c1b      	lsrs	r3, r3, #16
 800b1d8:	f003 0303 	and.w	r3, r3, #3
 800b1dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	019a      	lsls	r2, r3, #6
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	041b      	lsls	r3, r3, #16
 800b1e8:	431a      	orrs	r2, r3
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	061b      	lsls	r3, r3, #24
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	071b      	lsls	r3, r3, #28
 800b1f6:	4917      	ldr	r1, [pc, #92]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b1fe:	4b15      	ldr	r3, [pc, #84]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b204:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20c:	4911      	ldr	r1, [pc, #68]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b214:	4b0f      	ldr	r3, [pc, #60]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a0e      	ldr	r2, [pc, #56]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b21a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b21e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b220:	f7fa fd78 	bl	8005d14 <HAL_GetTick>
 800b224:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b226:	e008      	b.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b228:	f7fa fd74 	bl	8005d14 <HAL_GetTick>
 800b22c:	4602      	mov	r2, r0
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	2b64      	cmp	r3, #100	@ 0x64
 800b234:	d901      	bls.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b236:	2303      	movs	r3, #3
 800b238:	e007      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b23a:	4b06      	ldr	r3, [pc, #24]	@ (800b254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b246:	d1ef      	bne.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3720      	adds	r7, #32
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	40023800 	.word	0x40023800

0800b258 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b258:	b480      	push	{r7}
 800b25a:	b087      	sub	sp, #28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b268:	2300      	movs	r3, #0
 800b26a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b26c:	2300      	movs	r3, #0
 800b26e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b276:	f040 80a4 	bne.w	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b27a:	4ba6      	ldr	r3, [pc, #664]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b280:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b288:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b290:	f000 808a 	beq.w	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b29a:	f200 8091 	bhi.w	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2a4:	d07d      	beq.n	800b3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2ac:	f200 8088 	bhi.w	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d004      	beq.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2bc:	d039      	beq.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b2be:	e07f      	b.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b2c0:	4b94      	ldr	r3, [pc, #592]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d108      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b2cc:	4b91      	ldr	r3, [pc, #580]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2d4:	4a90      	ldr	r2, [pc, #576]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b2d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	e007      	b.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b2de:	4b8d      	ldr	r3, [pc, #564]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2e6:	4a8d      	ldr	r2, [pc, #564]	@ (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ec:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b2ee:	4b89      	ldr	r3, [pc, #548]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b2f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2f4:	0e1b      	lsrs	r3, r3, #24
 800b2f6:	f003 030f 	and.w	r3, r3, #15
 800b2fa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b2fc:	4b85      	ldr	r3, [pc, #532]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b302:	099b      	lsrs	r3, r3, #6
 800b304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	fb03 f202 	mul.w	r2, r3, r2
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	fbb2 f3f3 	udiv	r3, r2, r3
 800b314:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b316:	4b7f      	ldr	r3, [pc, #508]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b31c:	0a1b      	lsrs	r3, r3, #8
 800b31e:	f003 031f 	and.w	r3, r3, #31
 800b322:	3301      	adds	r3, #1
 800b324:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b32e:	617b      	str	r3, [r7, #20]
        break;
 800b330:	e047      	b.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b332:	4b78      	ldr	r3, [pc, #480]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d108      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b33e:	4b75      	ldr	r3, [pc, #468]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b346:	4a74      	ldr	r2, [pc, #464]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b348:	fbb2 f3f3 	udiv	r3, r2, r3
 800b34c:	613b      	str	r3, [r7, #16]
 800b34e:	e007      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b350:	4b70      	ldr	r3, [pc, #448]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b358:	4a70      	ldr	r2, [pc, #448]	@ (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b360:	4b6c      	ldr	r3, [pc, #432]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b366:	0e1b      	lsrs	r3, r3, #24
 800b368:	f003 030f 	and.w	r3, r3, #15
 800b36c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b36e:	4b69      	ldr	r3, [pc, #420]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b374:	099b      	lsrs	r3, r3, #6
 800b376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	fb03 f202 	mul.w	r2, r3, r2
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	fbb2 f3f3 	udiv	r3, r2, r3
 800b386:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b388:	4b62      	ldr	r3, [pc, #392]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b38e:	f003 031f 	and.w	r3, r3, #31
 800b392:	3301      	adds	r3, #1
 800b394:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b39e:	617b      	str	r3, [r7, #20]
        break;
 800b3a0:	e00f      	b.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b3a2:	4b5f      	ldr	r3, [pc, #380]	@ (800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800b3a4:	617b      	str	r3, [r7, #20]
        break;
 800b3a6:	e00c      	b.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b3a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d102      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800b3b4:	4b58      	ldr	r3, [pc, #352]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b3b6:	617b      	str	r3, [r7, #20]
        break;
 800b3b8:	e003      	b.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 800b3ba:	4b58      	ldr	r3, [pc, #352]	@ (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b3bc:	617b      	str	r3, [r7, #20]
        break;
 800b3be:	e000      	b.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 800b3c0:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3c8:	f040 80ad 	bne.w	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b3cc:	4b51      	ldr	r3, [pc, #324]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b3ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3d2:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b3da:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b3e2:	f000 808a 	beq.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b3ec:	f200 809a 	bhi.w	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b3f6:	d07d      	beq.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b3fe:	f200 8091 	bhi.w	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d004      	beq.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b40e:	d039      	beq.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b410:	e088      	b.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b412:	4b40      	ldr	r3, [pc, #256]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d108      	bne.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b41e:	4b3d      	ldr	r3, [pc, #244]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b426:	4a3c      	ldr	r2, [pc, #240]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b428:	fbb2 f3f3 	udiv	r3, r2, r3
 800b42c:	613b      	str	r3, [r7, #16]
 800b42e:	e007      	b.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b430:	4b38      	ldr	r3, [pc, #224]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b438:	4a38      	ldr	r2, [pc, #224]	@ (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b43e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b440:	4b34      	ldr	r3, [pc, #208]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b446:	0e1b      	lsrs	r3, r3, #24
 800b448:	f003 030f 	and.w	r3, r3, #15
 800b44c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b44e:	4b31      	ldr	r3, [pc, #196]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b454:	099b      	lsrs	r3, r3, #6
 800b456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	fb03 f202 	mul.w	r2, r3, r2
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	fbb2 f3f3 	udiv	r3, r2, r3
 800b466:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b468:	4b2a      	ldr	r3, [pc, #168]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b46a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b46e:	0a1b      	lsrs	r3, r3, #8
 800b470:	f003 031f 	and.w	r3, r3, #31
 800b474:	3301      	adds	r3, #1
 800b476:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b478:	697a      	ldr	r2, [r7, #20]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b480:	617b      	str	r3, [r7, #20]
        break;
 800b482:	e050      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b484:	4b23      	ldr	r3, [pc, #140]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d108      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b490:	4b20      	ldr	r3, [pc, #128]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b498:	4a1f      	ldr	r2, [pc, #124]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b49e:	613b      	str	r3, [r7, #16]
 800b4a0:	e007      	b.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b4a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4aa:	4a1c      	ldr	r2, [pc, #112]	@ (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b4b2:	4b18      	ldr	r3, [pc, #96]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b4b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4b8:	0e1b      	lsrs	r3, r3, #24
 800b4ba:	f003 030f 	and.w	r3, r3, #15
 800b4be:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b4c0:	4b14      	ldr	r3, [pc, #80]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4c6:	099b      	lsrs	r3, r3, #6
 800b4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	fb03 f202 	mul.w	r2, r3, r2
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4d8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b4da:	4b0e      	ldr	r3, [pc, #56]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4e0:	f003 031f 	and.w	r3, r3, #31
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f0:	617b      	str	r3, [r7, #20]
        break;
 800b4f2:	e018      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800b4f6:	617b      	str	r3, [r7, #20]
        break;
 800b4f8:	e015      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b4fa:	4b06      	ldr	r3, [pc, #24]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d102      	bne.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800b506:	4b04      	ldr	r3, [pc, #16]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b508:	617b      	str	r3, [r7, #20]
        break;
 800b50a:	e00c      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 800b50c:	4b03      	ldr	r3, [pc, #12]	@ (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800b50e:	617b      	str	r3, [r7, #20]
        break;
 800b510:	e009      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800b512:	bf00      	nop
 800b514:	40023800 	.word	0x40023800
 800b518:	00f42400 	.word	0x00f42400
 800b51c:	017d7840 	.word	0x017d7840
 800b520:	00bb8000 	.word	0x00bb8000
        break;
 800b524:	bf00      	nop
      }
    }
  }

  return frequency;
 800b526:	697b      	ldr	r3, [r7, #20]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	371c      	adds	r7, #28
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e071      	b.n	800b62a <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	7f5b      	ldrb	r3, [r3, #29]
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d105      	bne.n	800b55c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7f7 f896 	bl	8002688 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2202      	movs	r2, #2
 800b560:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f003 0310 	and.w	r3, r3, #16
 800b56c:	2b10      	cmp	r3, #16
 800b56e:	d053      	beq.n	800b618 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	22ca      	movs	r2, #202	@ 0xca
 800b576:	625a      	str	r2, [r3, #36]	@ 0x24
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2253      	movs	r2, #83	@ 0x53
 800b57e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fac7 	bl	800bb14 <RTC_EnterInitMode>
 800b586:	4603      	mov	r3, r0
 800b588:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d12a      	bne.n	800b5e6 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6899      	ldr	r1, [r3, #8]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	4b26      	ldr	r3, [pc, #152]	@ (800b634 <HAL_RTC_Init+0x100>)
 800b59c:	400b      	ands	r3, r1
 800b59e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6899      	ldr	r1, [r3, #8]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	431a      	orrs	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	695b      	ldr	r3, [r3, #20]
 800b5b4:	431a      	orrs	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	68d2      	ldr	r2, [r2, #12]
 800b5c6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6919      	ldr	r1, [r3, #16]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	041a      	lsls	r2, r3, #16
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fad0 	bl	800bb82 <RTC_ExitInitMode>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d110      	bne.n	800b60e <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f022 0208 	bic.w	r2, r2, #8
 800b5fa:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	699a      	ldr	r2, [r3, #24]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	430a      	orrs	r2, r1
 800b60c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	22ff      	movs	r2, #255	@ 0xff
 800b614:	625a      	str	r2, [r3, #36]	@ 0x24
 800b616:	e001      	b.n	800b61c <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d102      	bne.n	800b628 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b628:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	ff8fffbf 	.word	0xff8fffbf

0800b638 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b638:	b590      	push	{r4, r7, lr}
 800b63a:	b087      	sub	sp, #28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	7f1b      	ldrb	r3, [r3, #28]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d101      	bne.n	800b654 <HAL_RTC_SetTime+0x1c>
 800b650:	2302      	movs	r3, #2
 800b652:	e085      	b.n	800b760 <HAL_RTC_SetTime+0x128>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2201      	movs	r2, #1
 800b658:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2202      	movs	r2, #2
 800b65e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d126      	bne.n	800b6b4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b670:	2b00      	cmp	r3, #0
 800b672:	d102      	bne.n	800b67a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2200      	movs	r2, #0
 800b678:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 faa4 	bl	800bbcc <RTC_ByteToBcd2>
 800b684:	4603      	mov	r3, r0
 800b686:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	785b      	ldrb	r3, [r3, #1]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 fa9d 	bl	800bbcc <RTC_ByteToBcd2>
 800b692:	4603      	mov	r3, r0
 800b694:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b696:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	789b      	ldrb	r3, [r3, #2]
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 fa95 	bl	800bbcc <RTC_ByteToBcd2>
 800b6a2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b6a4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	78db      	ldrb	r3, [r3, #3]
 800b6ac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	617b      	str	r3, [r7, #20]
 800b6b2:	e018      	b.n	800b6e6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d102      	bne.n	800b6c8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	785b      	ldrb	r3, [r3, #1]
 800b6d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b6d4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b6da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	78db      	ldrb	r3, [r3, #3]
 800b6e0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	22ca      	movs	r2, #202	@ 0xca
 800b6ec:	625a      	str	r2, [r3, #36]	@ 0x24
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2253      	movs	r2, #83	@ 0x53
 800b6f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f000 fa0c 	bl	800bb14 <RTC_EnterInitMode>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b700:	7cfb      	ldrb	r3, [r7, #19]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d11e      	bne.n	800b744 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	6979      	ldr	r1, [r7, #20]
 800b70c:	4b16      	ldr	r3, [pc, #88]	@ (800b768 <HAL_RTC_SetTime+0x130>)
 800b70e:	400b      	ands	r3, r1
 800b710:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b720:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	6899      	ldr	r1, [r3, #8]
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	68da      	ldr	r2, [r3, #12]
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	431a      	orrs	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	430a      	orrs	r2, r1
 800b738:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f000 fa21 	bl	800bb82 <RTC_ExitInitMode>
 800b740:	4603      	mov	r3, r0
 800b742:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b744:	7cfb      	ldrb	r3, [r7, #19]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d102      	bne.n	800b750 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2201      	movs	r2, #1
 800b74e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	22ff      	movs	r2, #255	@ 0xff
 800b756:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	771a      	strb	r2, [r3, #28]

  return status;
 800b75e:	7cfb      	ldrb	r3, [r7, #19]
}
 800b760:	4618      	mov	r0, r3
 800b762:	371c      	adds	r7, #28
 800b764:	46bd      	mov	sp, r7
 800b766:	bd90      	pop	{r4, r7, pc}
 800b768:	007f7f7f 	.word	0x007f7f7f

0800b76c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b76c:	b590      	push	{r4, r7, lr}
 800b76e:	b087      	sub	sp, #28
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b778:	2300      	movs	r3, #0
 800b77a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	7f1b      	ldrb	r3, [r3, #28]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d101      	bne.n	800b788 <HAL_RTC_SetDate+0x1c>
 800b784:	2302      	movs	r3, #2
 800b786:	e06f      	b.n	800b868 <HAL_RTC_SetDate+0xfc>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2201      	movs	r2, #1
 800b78c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2202      	movs	r2, #2
 800b792:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10e      	bne.n	800b7b8 <HAL_RTC_SetDate+0x4c>
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	785b      	ldrb	r3, [r3, #1]
 800b79e:	f003 0310 	and.w	r3, r3, #16
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d008      	beq.n	800b7b8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	785b      	ldrb	r3, [r3, #1]
 800b7aa:	f023 0310 	bic.w	r3, r3, #16
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	330a      	adds	r3, #10
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d11c      	bne.n	800b7f8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	78db      	ldrb	r3, [r3, #3]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 fa02 	bl	800bbcc <RTC_ByteToBcd2>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	785b      	ldrb	r3, [r3, #1]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f000 f9fb 	bl	800bbcc <RTC_ByteToBcd2>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b7da:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	789b      	ldrb	r3, [r3, #2]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f000 f9f3 	bl	800bbcc <RTC_ByteToBcd2>
 800b7e6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b7e8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	617b      	str	r3, [r7, #20]
 800b7f6:	e00e      	b.n	800b816 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	78db      	ldrb	r3, [r3, #3]
 800b7fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	785b      	ldrb	r3, [r3, #1]
 800b802:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b804:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b80a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b812:	4313      	orrs	r3, r2
 800b814:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	22ca      	movs	r2, #202	@ 0xca
 800b81c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2253      	movs	r2, #83	@ 0x53
 800b824:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f000 f974 	bl	800bb14 <RTC_EnterInitMode>
 800b82c:	4603      	mov	r3, r0
 800b82e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b830:	7cfb      	ldrb	r3, [r7, #19]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10a      	bne.n	800b84c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	6979      	ldr	r1, [r7, #20]
 800b83c:	4b0c      	ldr	r3, [pc, #48]	@ (800b870 <HAL_RTC_SetDate+0x104>)
 800b83e:	400b      	ands	r3, r1
 800b840:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f000 f99d 	bl	800bb82 <RTC_ExitInitMode>
 800b848:	4603      	mov	r3, r0
 800b84a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b84c:	7cfb      	ldrb	r3, [r7, #19]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d102      	bne.n	800b858 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2201      	movs	r2, #1
 800b856:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	22ff      	movs	r2, #255	@ 0xff
 800b85e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	771a      	strb	r2, [r3, #28]

  return status;
 800b866:	7cfb      	ldrb	r3, [r7, #19]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	371c      	adds	r7, #28
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd90      	pop	{r4, r7, pc}
 800b870:	00ffff3f 	.word	0x00ffff3f

0800b874 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b874:	b590      	push	{r4, r7, lr}
 800b876:	b089      	sub	sp, #36	@ 0x24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b880:	2300      	movs	r3, #0
 800b882:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800b884:	2300      	movs	r3, #0
 800b886:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	7f1b      	ldrb	r3, [r3, #28]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d101      	bne.n	800b898 <HAL_RTC_SetAlarm+0x24>
 800b894:	2302      	movs	r3, #2
 800b896:	e113      	b.n	800bac0 <HAL_RTC_SetAlarm+0x24c>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2201      	movs	r2, #1
 800b89c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d137      	bne.n	800b91a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d102      	bne.n	800b8be <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 f982 	bl	800bbcc <RTC_ByteToBcd2>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	785b      	ldrb	r3, [r3, #1]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 f97b 	bl	800bbcc <RTC_ByteToBcd2>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b8da:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	789b      	ldrb	r3, [r3, #2]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f000 f973 	bl	800bbcc <RTC_ByteToBcd2>
 800b8e6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b8e8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	78db      	ldrb	r3, [r3, #3]
 800b8f0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b8f2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 f965 	bl	800bbcc <RTC_ByteToBcd2>
 800b902:	4603      	mov	r3, r0
 800b904:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b906:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b90e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b914:	4313      	orrs	r3, r2
 800b916:	61fb      	str	r3, [r7, #28]
 800b918:	e023      	b.n	800b962 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	2200      	movs	r2, #0
 800b92c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	785b      	ldrb	r3, [r3, #1]
 800b938:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b93a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b940:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	78db      	ldrb	r3, [r3, #3]
 800b946:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b948:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b950:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b952:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b958:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b95e:	4313      	orrs	r3, r2
 800b960:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b96a:	4313      	orrs	r3, r2
 800b96c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	22ca      	movs	r2, #202	@ 0xca
 800b974:	625a      	str	r2, [r3, #36]	@ 0x24
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2253      	movs	r2, #83	@ 0x53
 800b97c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b986:	d148      	bne.n	800ba1a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	689a      	ldr	r2, [r3, #8]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b996:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	689a      	ldr	r2, [r3, #8]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b9a6:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b9b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b9ba:	f7fa f9ab 	bl	8005d14 <HAL_GetTick>
 800b9be:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b9c0:	e013      	b.n	800b9ea <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b9c2:	f7fa f9a7 	bl	8005d14 <HAL_GetTick>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b9d0:	d90b      	bls.n	800b9ea <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	22ff      	movs	r2, #255	@ 0xff
 800b9d8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2203      	movs	r2, #3
 800b9de:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e06a      	b.n	800bac0 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	f003 0301 	and.w	r3, r3, #1
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d0e4      	beq.n	800b9c2 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	69fa      	ldr	r2, [r7, #28]
 800b9fe:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	689a      	ldr	r2, [r3, #8]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba16:	609a      	str	r2, [r3, #8]
 800ba18:	e047      	b.n	800baaa <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	689a      	ldr	r2, [r3, #8]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ba28:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ba38:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	b2da      	uxtb	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ba4a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba4c:	f7fa f962 	bl	8005d14 <HAL_GetTick>
 800ba50:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800ba52:	e013      	b.n	800ba7c <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ba54:	f7fa f95e 	bl	8005d14 <HAL_GetTick>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba62:	d90b      	bls.n	800ba7c <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	22ff      	movs	r2, #255	@ 0xff
 800ba6a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2203      	movs	r2, #3
 800ba70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	e021      	b.n	800bac0 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	f003 0302 	and.w	r3, r3, #2
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d0e4      	beq.n	800ba54 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	69fa      	ldr	r2, [r7, #28]
 800ba90:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689a      	ldr	r2, [r3, #8]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800baa8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	22ff      	movs	r2, #255	@ 0xff
 800bab0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2201      	movs	r2, #1
 800bab6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3724      	adds	r7, #36	@ 0x24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd90      	pop	{r4, r7, pc}

0800bac8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bad0:	2300      	movs	r3, #0
 800bad2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a0d      	ldr	r2, [pc, #52]	@ (800bb10 <HAL_RTC_WaitForSynchro+0x48>)
 800bada:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800badc:	f7fa f91a 	bl	8005d14 <HAL_GetTick>
 800bae0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bae2:	e009      	b.n	800baf8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bae4:	f7fa f916 	bl	8005d14 <HAL_GetTick>
 800bae8:	4602      	mov	r2, r0
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800baf2:	d901      	bls.n	800baf8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800baf4:	2303      	movs	r3, #3
 800baf6:	e007      	b.n	800bb08 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	f003 0320 	and.w	r3, r3, #32
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0ee      	beq.n	800bae4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	0001ff5f 	.word	0x0001ff5f

0800bb14 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d122      	bne.n	800bb78 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68da      	ldr	r2, [r3, #12]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bb40:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bb42:	f7fa f8e7 	bl	8005d14 <HAL_GetTick>
 800bb46:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bb48:	e00c      	b.n	800bb64 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bb4a:	f7fa f8e3 	bl	8005d14 <HAL_GetTick>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bb58:	d904      	bls.n	800bb64 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2204      	movs	r2, #4
 800bb5e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d102      	bne.n	800bb78 <RTC_EnterInitMode+0x64>
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d1e8      	bne.n	800bb4a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b084      	sub	sp, #16
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bb9c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f003 0320 	and.w	r3, r3, #32
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10a      	bne.n	800bbc2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7ff ff8b 	bl	800bac8 <HAL_RTC_WaitForSynchro>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d004      	beq.n	800bbc2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2204      	movs	r2, #4
 800bbbc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bbda:	e005      	b.n	800bbe8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800bbe2:	79fb      	ldrb	r3, [r7, #7]
 800bbe4:	3b0a      	subs	r3, #10
 800bbe6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bbe8:	79fb      	ldrb	r3, [r7, #7]
 800bbea:	2b09      	cmp	r3, #9
 800bbec:	d8f6      	bhi.n	800bbdc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	011b      	lsls	r3, r3, #4
 800bbf4:	b2da      	uxtb	r2, r3
 800bbf6:	79fb      	ldrb	r3, [r7, #7]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	b2db      	uxtb	r3, r3
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800bc14:	2300      	movs	r3, #0
 800bc16:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d101      	bne.n	800bc26 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	e156      	b.n	800bed4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d106      	bne.n	800bc40 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7f7 fa28 	bl	8003090 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2202      	movs	r2, #2
 800bc44:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f95b 	bl	800bf04 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d00c      	beq.n	800bc70 <HAL_SAI_Init+0x68>
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d80d      	bhi.n	800bc76 <HAL_SAI_Init+0x6e>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <HAL_SAI_Init+0x5c>
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d003      	beq.n	800bc6a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800bc62:	e008      	b.n	800bc76 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	61fb      	str	r3, [r7, #28]
      break;
 800bc68:	e006      	b.n	800bc78 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bc6a:	2310      	movs	r3, #16
 800bc6c:	61fb      	str	r3, [r7, #28]
      break;
 800bc6e:	e003      	b.n	800bc78 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bc70:	2320      	movs	r3, #32
 800bc72:	61fb      	str	r3, [r7, #28]
      break;
 800bc74:	e000      	b.n	800bc78 <HAL_SAI_Init+0x70>
      break;
 800bc76:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d81e      	bhi.n	800bcbe <HAL_SAI_Init+0xb6>
 800bc80:	a201      	add	r2, pc, #4	@ (adr r2, 800bc88 <HAL_SAI_Init+0x80>)
 800bc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc86:	bf00      	nop
 800bc88:	0800bc99 	.word	0x0800bc99
 800bc8c:	0800bc9f 	.word	0x0800bc9f
 800bc90:	0800bca7 	.word	0x0800bca7
 800bc94:	0800bcaf 	.word	0x0800bcaf
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	617b      	str	r3, [r7, #20]
    }
    break;
 800bc9c:	e010      	b.n	800bcc0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bc9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bca2:	617b      	str	r3, [r7, #20]
    }
    break;
 800bca4:	e00c      	b.n	800bcc0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bca6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bcaa:	617b      	str	r3, [r7, #20]
    }
    break;
 800bcac:	e008      	b.n	800bcc0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bcae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bcb2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	f043 0301 	orr.w	r3, r3, #1
 800bcba:	61fb      	str	r3, [r7, #28]
    }
    break;
 800bcbc:	e000      	b.n	800bcc0 <HAL_SAI_Init+0xb8>
    default:
      break;
 800bcbe:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a85      	ldr	r2, [pc, #532]	@ (800bedc <HAL_SAI_Init+0x2d4>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d004      	beq.n	800bcd4 <HAL_SAI_Init+0xcc>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a84      	ldr	r2, [pc, #528]	@ (800bee0 <HAL_SAI_Init+0x2d8>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d103      	bne.n	800bcdc <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800bcd4:	4a83      	ldr	r2, [pc, #524]	@ (800bee4 <HAL_SAI_Init+0x2dc>)
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	6013      	str	r3, [r2, #0]
 800bcda:	e002      	b.n	800bce2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bcdc:	4a82      	ldr	r2, [pc, #520]	@ (800bee8 <HAL_SAI_Init+0x2e0>)
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d04c      	beq.n	800bd84 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800bcea:	2300      	movs	r3, #0
 800bcec:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a7a      	ldr	r2, [pc, #488]	@ (800bedc <HAL_SAI_Init+0x2d4>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d004      	beq.n	800bd02 <HAL_SAI_Init+0xfa>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a78      	ldr	r2, [pc, #480]	@ (800bee0 <HAL_SAI_Init+0x2d8>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d104      	bne.n	800bd0c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bd02:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bd06:	f7ff faa7 	bl	800b258 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd0a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a76      	ldr	r2, [pc, #472]	@ (800beec <HAL_SAI_Init+0x2e4>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d004      	beq.n	800bd20 <HAL_SAI_Init+0x118>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a75      	ldr	r2, [pc, #468]	@ (800bef0 <HAL_SAI_Init+0x2e8>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d104      	bne.n	800bd2a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bd20:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bd24:	f7ff fa98 	bl	800b258 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd28:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	4413      	add	r3, r2
 800bd32:	005b      	lsls	r3, r3, #1
 800bd34:	461a      	mov	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	69db      	ldr	r3, [r3, #28]
 800bd3a:	025b      	lsls	r3, r3, #9
 800bd3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd40:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	4a6b      	ldr	r2, [pc, #428]	@ (800bef4 <HAL_SAI_Init+0x2ec>)
 800bd46:	fba2 2303 	umull	r2, r3, r2, r3
 800bd4a:	08da      	lsrs	r2, r3, #3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800bd50:	68f9      	ldr	r1, [r7, #12]
 800bd52:	4b68      	ldr	r3, [pc, #416]	@ (800bef4 <HAL_SAI_Init+0x2ec>)
 800bd54:	fba3 2301 	umull	r2, r3, r3, r1
 800bd58:	08da      	lsrs	r2, r3, #3
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	005b      	lsls	r3, r3, #1
 800bd62:	1aca      	subs	r2, r1, r3
 800bd64:	2a08      	cmp	r2, #8
 800bd66:	d904      	bls.n	800bd72 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a1b      	ldr	r3, [r3, #32]
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d104      	bne.n	800bd84 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	085a      	lsrs	r2, r3, #1
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d003      	beq.n	800bd94 <HAL_SAI_Init+0x18c>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d109      	bne.n	800bda8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d101      	bne.n	800bda0 <HAL_SAI_Init+0x198>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	e001      	b.n	800bda4 <HAL_SAI_Init+0x19c>
 800bda0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bda4:	61bb      	str	r3, [r7, #24]
 800bda6:	e008      	b.n	800bdba <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d102      	bne.n	800bdb6 <HAL_SAI_Init+0x1ae>
 800bdb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdb4:	e000      	b.n	800bdb8 <HAL_SAI_Init+0x1b0>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6819      	ldr	r1, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	4b4c      	ldr	r3, [pc, #304]	@ (800bef8 <HAL_SAI_Init+0x2f0>)
 800bdc6:	400b      	ands	r3, r1
 800bdc8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	6819      	ldr	r1, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdd8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bdde:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde4:	431a      	orrs	r2, r3
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800bdf2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bdfe:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a1b      	ldr	r3, [r3, #32]
 800be04:	051b      	lsls	r3, r3, #20
 800be06:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	430a      	orrs	r2, r1
 800be0e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	6859      	ldr	r1, [r3, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	4b38      	ldr	r3, [pc, #224]	@ (800befc <HAL_SAI_Init+0x2f4>)
 800be1c:	400b      	ands	r3, r1
 800be1e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	6859      	ldr	r1, [r3, #4]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	699a      	ldr	r2, [r3, #24]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be2e:	431a      	orrs	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be34:	431a      	orrs	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	6899      	ldr	r1, [r3, #8]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	4b2d      	ldr	r3, [pc, #180]	@ (800bf00 <HAL_SAI_Init+0x2f8>)
 800be4a:	400b      	ands	r3, r1
 800be4c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6899      	ldr	r1, [r3, #8]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be58:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be5e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800be64:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800be6a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be70:	3b01      	subs	r3, #1
 800be72:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800be74:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	430a      	orrs	r2, r1
 800be7c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68d9      	ldr	r1, [r3, #12]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800be8c:	400b      	ands	r3, r1
 800be8e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68d9      	ldr	r1, [r3, #12]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be9e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bea4:	041b      	lsls	r3, r3, #16
 800bea6:	431a      	orrs	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800beac:	3b01      	subs	r3, #1
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	430a      	orrs	r2, r1
 800beb8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3720      	adds	r7, #32
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	40015804 	.word	0x40015804
 800bee0:	40015824 	.word	0x40015824
 800bee4:	40015800 	.word	0x40015800
 800bee8:	40015c00 	.word	0x40015c00
 800beec:	40015c04 	.word	0x40015c04
 800bef0:	40015c24 	.word	0x40015c24
 800bef4:	cccccccd 	.word	0xcccccccd
 800bef8:	ff05c010 	.word	0xff05c010
 800befc:	ffff1ff0 	.word	0xffff1ff0
 800bf00:	fff88000 	.word	0xfff88000

0800bf04 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800bf0c:	4b17      	ldr	r3, [pc, #92]	@ (800bf6c <SAI_Disable+0x68>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a17      	ldr	r2, [pc, #92]	@ (800bf70 <SAI_Disable+0x6c>)
 800bf12:	fba2 2303 	umull	r2, r3, r2, r3
 800bf16:	0b1b      	lsrs	r3, r3, #12
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bf2e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	1e5a      	subs	r2, r3, #1
 800bf34:	60fa      	str	r2, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10a      	bne.n	800bf50 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	72fb      	strb	r3, [r7, #11]
      break;
 800bf4e:	e006      	b.n	800bf5e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1e8      	bne.n	800bf30 <SAI_Disable+0x2c>

  return status;
 800bf5e:	7afb      	ldrb	r3, [r7, #11]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	20000000 	.word	0x20000000
 800bf70:	95cbec1b 	.word	0x95cbec1b

0800bf74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d101      	bne.n	800bf88 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	e025      	b.n	800bfd4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d106      	bne.n	800bfa2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7f7 f86d 	bl	800307c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2202      	movs	r2, #2
 800bfa6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	f001 fe87 	bl	800dcc8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6818      	ldr	r0, [r3, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	f001 fedb 	bl	800dd80 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e04c      	b.n	800c088 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d106      	bne.n	800c008 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7f6 fb96 	bl	8002734 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2202      	movs	r2, #2
 800c00c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f022 0203 	bic.w	r2, r2, #3
 800c01e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4b19      	ldr	r3, [pc, #100]	@ (800c090 <HAL_SPDIFRX_Init+0xb4>)
 800c02c:	4013      	ands	r3, r2
 800c02e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800c038:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800c03e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800c044:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800c04a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800c050:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800c056:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800c05c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800c062:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800c068:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800c086:	2300      	movs	r3, #0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	fff88407 	.word	0xfff88407

0800c094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d101      	bne.n	800c0a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e09d      	b.n	800c1e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d108      	bne.n	800c0c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c0b6:	d009      	beq.n	800c0cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	61da      	str	r2, [r3, #28]
 800c0be:	e005      	b.n	800c0cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7f6 fb8a 	bl	8002800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c102:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c10c:	d902      	bls.n	800c114 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c10e:	2300      	movs	r3, #0
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	e002      	b.n	800c11a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c118:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c122:	d007      	beq.n	800c134 <HAL_SPI_Init+0xa0>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c12c:	d002      	beq.n	800c134 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c144:	431a      	orrs	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	f003 0302 	and.w	r3, r3, #2
 800c14e:	431a      	orrs	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	695b      	ldr	r3, [r3, #20]
 800c154:	f003 0301 	and.w	r3, r3, #1
 800c158:	431a      	orrs	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c162:	431a      	orrs	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	69db      	ldr	r3, [r3, #28]
 800c168:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c16c:	431a      	orrs	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c176:	ea42 0103 	orr.w	r1, r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c17e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	430a      	orrs	r2, r1
 800c188:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	0c1b      	lsrs	r3, r3, #16
 800c190:	f003 0204 	and.w	r2, r3, #4
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c198:	f003 0310 	and.w	r3, r3, #16
 800c19c:	431a      	orrs	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1a2:	f003 0308 	and.w	r3, r3, #8
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c1b0:	ea42 0103 	orr.w	r1, r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	69da      	ldr	r2, [r3, #28]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c1d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e049      	b.n	800c290 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b00      	cmp	r3, #0
 800c206:	d106      	bne.n	800c216 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f7f6 fb69 	bl	80028e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2202      	movs	r2, #2
 800c21a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	3304      	adds	r3, #4
 800c226:	4619      	mov	r1, r3
 800c228:	4610      	mov	r0, r2
 800c22a:	f000 fc11 	bl	800ca50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2201      	movs	r2, #1
 800c25a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d001      	beq.n	800c2b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e054      	b.n	800c35a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2202      	movs	r2, #2
 800c2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68da      	ldr	r2, [r3, #12]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f042 0201 	orr.w	r2, r2, #1
 800c2c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a26      	ldr	r2, [pc, #152]	@ (800c368 <HAL_TIM_Base_Start_IT+0xd0>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d022      	beq.n	800c318 <HAL_TIM_Base_Start_IT+0x80>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2da:	d01d      	beq.n	800c318 <HAL_TIM_Base_Start_IT+0x80>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a22      	ldr	r2, [pc, #136]	@ (800c36c <HAL_TIM_Base_Start_IT+0xd4>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d018      	beq.n	800c318 <HAL_TIM_Base_Start_IT+0x80>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a21      	ldr	r2, [pc, #132]	@ (800c370 <HAL_TIM_Base_Start_IT+0xd8>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d013      	beq.n	800c318 <HAL_TIM_Base_Start_IT+0x80>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a1f      	ldr	r2, [pc, #124]	@ (800c374 <HAL_TIM_Base_Start_IT+0xdc>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d00e      	beq.n	800c318 <HAL_TIM_Base_Start_IT+0x80>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c378 <HAL_TIM_Base_Start_IT+0xe0>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d009      	beq.n	800c318 <HAL_TIM_Base_Start_IT+0x80>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a1c      	ldr	r2, [pc, #112]	@ (800c37c <HAL_TIM_Base_Start_IT+0xe4>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d004      	beq.n	800c318 <HAL_TIM_Base_Start_IT+0x80>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a1b      	ldr	r2, [pc, #108]	@ (800c380 <HAL_TIM_Base_Start_IT+0xe8>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d115      	bne.n	800c344 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	689a      	ldr	r2, [r3, #8]
 800c31e:	4b19      	ldr	r3, [pc, #100]	@ (800c384 <HAL_TIM_Base_Start_IT+0xec>)
 800c320:	4013      	ands	r3, r2
 800c322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b06      	cmp	r3, #6
 800c328:	d015      	beq.n	800c356 <HAL_TIM_Base_Start_IT+0xbe>
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c330:	d011      	beq.n	800c356 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f042 0201 	orr.w	r2, r2, #1
 800c340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c342:	e008      	b.n	800c356 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f042 0201 	orr.w	r2, r2, #1
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	e000      	b.n	800c358 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c356:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3714      	adds	r7, #20
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	40010000 	.word	0x40010000
 800c36c:	40000400 	.word	0x40000400
 800c370:	40000800 	.word	0x40000800
 800c374:	40000c00 	.word	0x40000c00
 800c378:	40010400 	.word	0x40010400
 800c37c:	40014000 	.word	0x40014000
 800c380:	40001800 	.word	0x40001800
 800c384:	00010007 	.word	0x00010007

0800c388 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d101      	bne.n	800c39a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e049      	b.n	800c42e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d106      	bne.n	800c3b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f7f6 fae2 	bl	8002978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	f000 fb42 	bl	800ca50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b084      	sub	sp, #16
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	f003 0302 	and.w	r3, r3, #2
 800c454:	2b00      	cmp	r3, #0
 800c456:	d020      	beq.n	800c49a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f003 0302 	and.w	r3, r3, #2
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d01b      	beq.n	800c49a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f06f 0202 	mvn.w	r2, #2
 800c46a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	699b      	ldr	r3, [r3, #24]
 800c478:	f003 0303 	and.w	r3, r3, #3
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d003      	beq.n	800c488 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fac7 	bl	800ca14 <HAL_TIM_IC_CaptureCallback>
 800c486:	e005      	b.n	800c494 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fab9 	bl	800ca00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 faca 	bl	800ca28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d020      	beq.n	800c4e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f003 0304 	and.w	r3, r3, #4
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d01b      	beq.n	800c4e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f06f 0204 	mvn.w	r2, #4
 800c4b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2202      	movs	r2, #2
 800c4bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d003      	beq.n	800c4d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 faa1 	bl	800ca14 <HAL_TIM_IC_CaptureCallback>
 800c4d2:	e005      	b.n	800c4e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fa93 	bl	800ca00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 faa4 	bl	800ca28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	f003 0308 	and.w	r3, r3, #8
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d020      	beq.n	800c532 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f003 0308 	and.w	r3, r3, #8
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d01b      	beq.n	800c532 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f06f 0208 	mvn.w	r2, #8
 800c502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2204      	movs	r2, #4
 800c508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	69db      	ldr	r3, [r3, #28]
 800c510:	f003 0303 	and.w	r3, r3, #3
 800c514:	2b00      	cmp	r3, #0
 800c516:	d003      	beq.n	800c520 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fa7b 	bl	800ca14 <HAL_TIM_IC_CaptureCallback>
 800c51e:	e005      	b.n	800c52c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fa6d 	bl	800ca00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fa7e 	bl	800ca28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	f003 0310 	and.w	r3, r3, #16
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d020      	beq.n	800c57e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f003 0310 	and.w	r3, r3, #16
 800c542:	2b00      	cmp	r3, #0
 800c544:	d01b      	beq.n	800c57e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f06f 0210 	mvn.w	r2, #16
 800c54e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2208      	movs	r2, #8
 800c554:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	69db      	ldr	r3, [r3, #28]
 800c55c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fa55 	bl	800ca14 <HAL_TIM_IC_CaptureCallback>
 800c56a:	e005      	b.n	800c578 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fa47 	bl	800ca00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fa58 	bl	800ca28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	f003 0301 	and.w	r3, r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00c      	beq.n	800c5a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f003 0301 	and.w	r3, r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d007      	beq.n	800c5a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f06f 0201 	mvn.w	r2, #1
 800c59a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7f5 fc73 	bl	8001e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d104      	bne.n	800c5b6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00c      	beq.n	800c5d0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d007      	beq.n	800c5d0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c5c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fe76 	bl	800d2bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00c      	beq.n	800c5f4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d007      	beq.n	800c5f4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c5ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fe6e 	bl	800d2d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00c      	beq.n	800c618 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c604:	2b00      	cmp	r3, #0
 800c606:	d007      	beq.n	800c618 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fa12 	bl	800ca3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	f003 0320 	and.w	r3, r3, #32
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00c      	beq.n	800c63c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f003 0320 	and.w	r3, r3, #32
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d007      	beq.n	800c63c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f06f 0220 	mvn.w	r2, #32
 800c634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fe36 	bl	800d2a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c63c:	bf00      	nop
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b086      	sub	sp, #24
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d101      	bne.n	800c662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c65e:	2302      	movs	r3, #2
 800c660:	e0ff      	b.n	800c862 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b14      	cmp	r3, #20
 800c66e:	f200 80f0 	bhi.w	800c852 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c672:	a201      	add	r2, pc, #4	@ (adr r2, 800c678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c678:	0800c6cd 	.word	0x0800c6cd
 800c67c:	0800c853 	.word	0x0800c853
 800c680:	0800c853 	.word	0x0800c853
 800c684:	0800c853 	.word	0x0800c853
 800c688:	0800c70d 	.word	0x0800c70d
 800c68c:	0800c853 	.word	0x0800c853
 800c690:	0800c853 	.word	0x0800c853
 800c694:	0800c853 	.word	0x0800c853
 800c698:	0800c74f 	.word	0x0800c74f
 800c69c:	0800c853 	.word	0x0800c853
 800c6a0:	0800c853 	.word	0x0800c853
 800c6a4:	0800c853 	.word	0x0800c853
 800c6a8:	0800c78f 	.word	0x0800c78f
 800c6ac:	0800c853 	.word	0x0800c853
 800c6b0:	0800c853 	.word	0x0800c853
 800c6b4:	0800c853 	.word	0x0800c853
 800c6b8:	0800c7d1 	.word	0x0800c7d1
 800c6bc:	0800c853 	.word	0x0800c853
 800c6c0:	0800c853 	.word	0x0800c853
 800c6c4:	0800c853 	.word	0x0800c853
 800c6c8:	0800c811 	.word	0x0800c811
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	68b9      	ldr	r1, [r7, #8]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 fa62 	bl	800cb9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	699a      	ldr	r2, [r3, #24]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f042 0208 	orr.w	r2, r2, #8
 800c6e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	699a      	ldr	r2, [r3, #24]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f022 0204 	bic.w	r2, r2, #4
 800c6f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6999      	ldr	r1, [r3, #24]
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	691a      	ldr	r2, [r3, #16]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	430a      	orrs	r2, r1
 800c708:	619a      	str	r2, [r3, #24]
      break;
 800c70a:	e0a5      	b.n	800c858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68b9      	ldr	r1, [r7, #8]
 800c712:	4618      	mov	r0, r3
 800c714:	f000 fab4 	bl	800cc80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	699a      	ldr	r2, [r3, #24]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	699a      	ldr	r2, [r3, #24]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6999      	ldr	r1, [r3, #24]
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	021a      	lsls	r2, r3, #8
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	430a      	orrs	r2, r1
 800c74a:	619a      	str	r2, [r3, #24]
      break;
 800c74c:	e084      	b.n	800c858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	68b9      	ldr	r1, [r7, #8]
 800c754:	4618      	mov	r0, r3
 800c756:	f000 fb0b 	bl	800cd70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	69da      	ldr	r2, [r3, #28]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f042 0208 	orr.w	r2, r2, #8
 800c768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	69da      	ldr	r2, [r3, #28]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f022 0204 	bic.w	r2, r2, #4
 800c778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	69d9      	ldr	r1, [r3, #28]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	691a      	ldr	r2, [r3, #16]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	430a      	orrs	r2, r1
 800c78a:	61da      	str	r2, [r3, #28]
      break;
 800c78c:	e064      	b.n	800c858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68b9      	ldr	r1, [r7, #8]
 800c794:	4618      	mov	r0, r3
 800c796:	f000 fb61 	bl	800ce5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	69da      	ldr	r2, [r3, #28]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c7a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	69da      	ldr	r2, [r3, #28]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c7b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	69d9      	ldr	r1, [r3, #28]
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	021a      	lsls	r2, r3, #8
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	430a      	orrs	r2, r1
 800c7cc:	61da      	str	r2, [r3, #28]
      break;
 800c7ce:	e043      	b.n	800c858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68b9      	ldr	r1, [r7, #8]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 fb98 	bl	800cf0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f042 0208 	orr.w	r2, r2, #8
 800c7ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f022 0204 	bic.w	r2, r2, #4
 800c7fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	691a      	ldr	r2, [r3, #16]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	430a      	orrs	r2, r1
 800c80c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c80e:	e023      	b.n	800c858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68b9      	ldr	r1, [r7, #8]
 800c816:	4618      	mov	r0, r3
 800c818:	f000 fbca 	bl	800cfb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c82a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c83a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	021a      	lsls	r2, r3, #8
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	430a      	orrs	r2, r1
 800c84e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c850:	e002      	b.n	800c858 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	75fb      	strb	r3, [r7, #23]
      break;
 800c856:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c860:	7dfb      	ldrb	r3, [r7, #23]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop

0800c86c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c876:	2300      	movs	r3, #0
 800c878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c880:	2b01      	cmp	r3, #1
 800c882:	d101      	bne.n	800c888 <HAL_TIM_ConfigClockSource+0x1c>
 800c884:	2302      	movs	r3, #2
 800c886:	e0b4      	b.n	800c9f2 <HAL_TIM_ConfigClockSource+0x186>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2202      	movs	r2, #2
 800c894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	4b56      	ldr	r3, [pc, #344]	@ (800c9fc <HAL_TIM_ConfigClockSource+0x190>)
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c8ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8c0:	d03e      	beq.n	800c940 <HAL_TIM_ConfigClockSource+0xd4>
 800c8c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8c6:	f200 8087 	bhi.w	800c9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800c8ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8ce:	f000 8086 	beq.w	800c9de <HAL_TIM_ConfigClockSource+0x172>
 800c8d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8d6:	d87f      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800c8d8:	2b70      	cmp	r3, #112	@ 0x70
 800c8da:	d01a      	beq.n	800c912 <HAL_TIM_ConfigClockSource+0xa6>
 800c8dc:	2b70      	cmp	r3, #112	@ 0x70
 800c8de:	d87b      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800c8e0:	2b60      	cmp	r3, #96	@ 0x60
 800c8e2:	d050      	beq.n	800c986 <HAL_TIM_ConfigClockSource+0x11a>
 800c8e4:	2b60      	cmp	r3, #96	@ 0x60
 800c8e6:	d877      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800c8e8:	2b50      	cmp	r3, #80	@ 0x50
 800c8ea:	d03c      	beq.n	800c966 <HAL_TIM_ConfigClockSource+0xfa>
 800c8ec:	2b50      	cmp	r3, #80	@ 0x50
 800c8ee:	d873      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800c8f0:	2b40      	cmp	r3, #64	@ 0x40
 800c8f2:	d058      	beq.n	800c9a6 <HAL_TIM_ConfigClockSource+0x13a>
 800c8f4:	2b40      	cmp	r3, #64	@ 0x40
 800c8f6:	d86f      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800c8f8:	2b30      	cmp	r3, #48	@ 0x30
 800c8fa:	d064      	beq.n	800c9c6 <HAL_TIM_ConfigClockSource+0x15a>
 800c8fc:	2b30      	cmp	r3, #48	@ 0x30
 800c8fe:	d86b      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800c900:	2b20      	cmp	r3, #32
 800c902:	d060      	beq.n	800c9c6 <HAL_TIM_ConfigClockSource+0x15a>
 800c904:	2b20      	cmp	r3, #32
 800c906:	d867      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x16c>
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d05c      	beq.n	800c9c6 <HAL_TIM_ConfigClockSource+0x15a>
 800c90c:	2b10      	cmp	r3, #16
 800c90e:	d05a      	beq.n	800c9c6 <HAL_TIM_ConfigClockSource+0x15a>
 800c910:	e062      	b.n	800c9d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c922:	f000 fc13 	bl	800d14c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	609a      	str	r2, [r3, #8]
      break;
 800c93e:	e04f      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c950:	f000 fbfc 	bl	800d14c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	689a      	ldr	r2, [r3, #8]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c962:	609a      	str	r2, [r3, #8]
      break;
 800c964:	e03c      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c972:	461a      	mov	r2, r3
 800c974:	f000 fb70 	bl	800d058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2150      	movs	r1, #80	@ 0x50
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 fbc9 	bl	800d116 <TIM_ITRx_SetConfig>
      break;
 800c984:	e02c      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c992:	461a      	mov	r2, r3
 800c994:	f000 fb8f 	bl	800d0b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2160      	movs	r1, #96	@ 0x60
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 fbb9 	bl	800d116 <TIM_ITRx_SetConfig>
      break;
 800c9a4:	e01c      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	f000 fb50 	bl	800d058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2140      	movs	r1, #64	@ 0x40
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 fba9 	bl	800d116 <TIM_ITRx_SetConfig>
      break;
 800c9c4:	e00c      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	f000 fba0 	bl	800d116 <TIM_ITRx_SetConfig>
      break;
 800c9d6:	e003      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	73fb      	strb	r3, [r7, #15]
      break;
 800c9dc:	e000      	b.n	800c9e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c9de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	fffeff88 	.word	0xfffeff88

0800ca00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca44:	bf00      	nop
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a43      	ldr	r2, [pc, #268]	@ (800cb70 <TIM_Base_SetConfig+0x120>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d013      	beq.n	800ca90 <TIM_Base_SetConfig+0x40>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca6e:	d00f      	beq.n	800ca90 <TIM_Base_SetConfig+0x40>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a40      	ldr	r2, [pc, #256]	@ (800cb74 <TIM_Base_SetConfig+0x124>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d00b      	beq.n	800ca90 <TIM_Base_SetConfig+0x40>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a3f      	ldr	r2, [pc, #252]	@ (800cb78 <TIM_Base_SetConfig+0x128>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d007      	beq.n	800ca90 <TIM_Base_SetConfig+0x40>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a3e      	ldr	r2, [pc, #248]	@ (800cb7c <TIM_Base_SetConfig+0x12c>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d003      	beq.n	800ca90 <TIM_Base_SetConfig+0x40>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a3d      	ldr	r2, [pc, #244]	@ (800cb80 <TIM_Base_SetConfig+0x130>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d108      	bne.n	800caa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4a32      	ldr	r2, [pc, #200]	@ (800cb70 <TIM_Base_SetConfig+0x120>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d02b      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cab0:	d027      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4a2f      	ldr	r2, [pc, #188]	@ (800cb74 <TIM_Base_SetConfig+0x124>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d023      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4a2e      	ldr	r2, [pc, #184]	@ (800cb78 <TIM_Base_SetConfig+0x128>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d01f      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	4a2d      	ldr	r2, [pc, #180]	@ (800cb7c <TIM_Base_SetConfig+0x12c>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d01b      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	4a2c      	ldr	r2, [pc, #176]	@ (800cb80 <TIM_Base_SetConfig+0x130>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d017      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4a2b      	ldr	r2, [pc, #172]	@ (800cb84 <TIM_Base_SetConfig+0x134>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d013      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4a2a      	ldr	r2, [pc, #168]	@ (800cb88 <TIM_Base_SetConfig+0x138>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d00f      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a29      	ldr	r2, [pc, #164]	@ (800cb8c <TIM_Base_SetConfig+0x13c>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d00b      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4a28      	ldr	r2, [pc, #160]	@ (800cb90 <TIM_Base_SetConfig+0x140>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d007      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a27      	ldr	r2, [pc, #156]	@ (800cb94 <TIM_Base_SetConfig+0x144>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d003      	beq.n	800cb02 <TIM_Base_SetConfig+0xb2>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a26      	ldr	r2, [pc, #152]	@ (800cb98 <TIM_Base_SetConfig+0x148>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d108      	bne.n	800cb14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	689a      	ldr	r2, [r3, #8]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a0e      	ldr	r2, [pc, #56]	@ (800cb70 <TIM_Base_SetConfig+0x120>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d003      	beq.n	800cb42 <TIM_Base_SetConfig+0xf2>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a10      	ldr	r2, [pc, #64]	@ (800cb80 <TIM_Base_SetConfig+0x130>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d103      	bne.n	800cb4a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	691a      	ldr	r2, [r3, #16]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f043 0204 	orr.w	r2, r3, #4
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	601a      	str	r2, [r3, #0]
}
 800cb62:	bf00      	nop
 800cb64:	3714      	adds	r7, #20
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	40010000 	.word	0x40010000
 800cb74:	40000400 	.word	0x40000400
 800cb78:	40000800 	.word	0x40000800
 800cb7c:	40000c00 	.word	0x40000c00
 800cb80:	40010400 	.word	0x40010400
 800cb84:	40014000 	.word	0x40014000
 800cb88:	40014400 	.word	0x40014400
 800cb8c:	40014800 	.word	0x40014800
 800cb90:	40001800 	.word	0x40001800
 800cb94:	40001c00 	.word	0x40001c00
 800cb98:	40002000 	.word	0x40002000

0800cb9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b087      	sub	sp, #28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a1b      	ldr	r3, [r3, #32]
 800cbaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a1b      	ldr	r3, [r3, #32]
 800cbb0:	f023 0201 	bic.w	r2, r3, #1
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	699b      	ldr	r3, [r3, #24]
 800cbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	4b2b      	ldr	r3, [pc, #172]	@ (800cc74 <TIM_OC1_SetConfig+0xd8>)
 800cbc8:	4013      	ands	r3, r2
 800cbca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f023 0303 	bic.w	r3, r3, #3
 800cbd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	f023 0302 	bic.w	r3, r3, #2
 800cbe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a21      	ldr	r2, [pc, #132]	@ (800cc78 <TIM_OC1_SetConfig+0xdc>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d003      	beq.n	800cc00 <TIM_OC1_SetConfig+0x64>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a20      	ldr	r2, [pc, #128]	@ (800cc7c <TIM_OC1_SetConfig+0xe0>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d10c      	bne.n	800cc1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	f023 0308 	bic.w	r3, r3, #8
 800cc06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	697a      	ldr	r2, [r7, #20]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	f023 0304 	bic.w	r3, r3, #4
 800cc18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a16      	ldr	r2, [pc, #88]	@ (800cc78 <TIM_OC1_SetConfig+0xdc>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d003      	beq.n	800cc2a <TIM_OC1_SetConfig+0x8e>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a15      	ldr	r2, [pc, #84]	@ (800cc7c <TIM_OC1_SetConfig+0xe0>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d111      	bne.n	800cc4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cc38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	699b      	ldr	r3, [r3, #24]
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	693a      	ldr	r2, [r7, #16]
 800cc52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	685a      	ldr	r2, [r3, #4]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	697a      	ldr	r2, [r7, #20]
 800cc66:	621a      	str	r2, [r3, #32]
}
 800cc68:	bf00      	nop
 800cc6a:	371c      	adds	r7, #28
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	fffeff8f 	.word	0xfffeff8f
 800cc78:	40010000 	.word	0x40010000
 800cc7c:	40010400 	.word	0x40010400

0800cc80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b087      	sub	sp, #28
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a1b      	ldr	r3, [r3, #32]
 800cc8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a1b      	ldr	r3, [r3, #32]
 800cc94:	f023 0210 	bic.w	r2, r3, #16
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	699b      	ldr	r3, [r3, #24]
 800cca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	4b2e      	ldr	r3, [pc, #184]	@ (800cd64 <TIM_OC2_SetConfig+0xe4>)
 800ccac:	4013      	ands	r3, r2
 800ccae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ccb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	021b      	lsls	r3, r3, #8
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	f023 0320 	bic.w	r3, r3, #32
 800ccca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	011b      	lsls	r3, r3, #4
 800ccd2:	697a      	ldr	r2, [r7, #20]
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a23      	ldr	r2, [pc, #140]	@ (800cd68 <TIM_OC2_SetConfig+0xe8>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d003      	beq.n	800cce8 <TIM_OC2_SetConfig+0x68>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a22      	ldr	r2, [pc, #136]	@ (800cd6c <TIM_OC2_SetConfig+0xec>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d10d      	bne.n	800cd04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ccee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	011b      	lsls	r3, r3, #4
 800ccf6:	697a      	ldr	r2, [r7, #20]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a18      	ldr	r2, [pc, #96]	@ (800cd68 <TIM_OC2_SetConfig+0xe8>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d003      	beq.n	800cd14 <TIM_OC2_SetConfig+0x94>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a17      	ldr	r2, [pc, #92]	@ (800cd6c <TIM_OC2_SetConfig+0xec>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d113      	bne.n	800cd3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	695b      	ldr	r3, [r3, #20]
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	693a      	ldr	r2, [r7, #16]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	693a      	ldr	r2, [r7, #16]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	693a      	ldr	r2, [r7, #16]
 800cd40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	697a      	ldr	r2, [r7, #20]
 800cd54:	621a      	str	r2, [r3, #32]
}
 800cd56:	bf00      	nop
 800cd58:	371c      	adds	r7, #28
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	feff8fff 	.word	0xfeff8fff
 800cd68:	40010000 	.word	0x40010000
 800cd6c:	40010400 	.word	0x40010400

0800cd70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b087      	sub	sp, #28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a1b      	ldr	r3, [r3, #32]
 800cd84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	69db      	ldr	r3, [r3, #28]
 800cd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	4b2d      	ldr	r3, [pc, #180]	@ (800ce50 <TIM_OC3_SetConfig+0xe0>)
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f023 0303 	bic.w	r3, r3, #3
 800cda6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cdb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	021b      	lsls	r3, r3, #8
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4a22      	ldr	r2, [pc, #136]	@ (800ce54 <TIM_OC3_SetConfig+0xe4>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d003      	beq.n	800cdd6 <TIM_OC3_SetConfig+0x66>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4a21      	ldr	r2, [pc, #132]	@ (800ce58 <TIM_OC3_SetConfig+0xe8>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d10d      	bne.n	800cdf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	021b      	lsls	r3, r3, #8
 800cde4:	697a      	ldr	r2, [r7, #20]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cdf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a17      	ldr	r2, [pc, #92]	@ (800ce54 <TIM_OC3_SetConfig+0xe4>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d003      	beq.n	800ce02 <TIM_OC3_SetConfig+0x92>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a16      	ldr	r2, [pc, #88]	@ (800ce58 <TIM_OC3_SetConfig+0xe8>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d113      	bne.n	800ce2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	011b      	lsls	r3, r3, #4
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	699b      	ldr	r3, [r3, #24]
 800ce22:	011b      	lsls	r3, r3, #4
 800ce24:	693a      	ldr	r2, [r7, #16]
 800ce26:	4313      	orrs	r3, r2
 800ce28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	697a      	ldr	r2, [r7, #20]
 800ce42:	621a      	str	r2, [r3, #32]
}
 800ce44:	bf00      	nop
 800ce46:	371c      	adds	r7, #28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	fffeff8f 	.word	0xfffeff8f
 800ce54:	40010000 	.word	0x40010000
 800ce58:	40010400 	.word	0x40010400

0800ce5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b087      	sub	sp, #28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6a1b      	ldr	r3, [r3, #32]
 800ce70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	69db      	ldr	r3, [r3, #28]
 800ce82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	4b1e      	ldr	r3, [pc, #120]	@ (800cf00 <TIM_OC4_SetConfig+0xa4>)
 800ce88:	4013      	ands	r3, r2
 800ce8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	021b      	lsls	r3, r3, #8
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	031b      	lsls	r3, r3, #12
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4a13      	ldr	r2, [pc, #76]	@ (800cf04 <TIM_OC4_SetConfig+0xa8>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d003      	beq.n	800cec4 <TIM_OC4_SetConfig+0x68>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4a12      	ldr	r2, [pc, #72]	@ (800cf08 <TIM_OC4_SetConfig+0xac>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d109      	bne.n	800ced8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ceca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	695b      	ldr	r3, [r3, #20]
 800ced0:	019b      	lsls	r3, r3, #6
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	685a      	ldr	r2, [r3, #4]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	693a      	ldr	r2, [r7, #16]
 800cef0:	621a      	str	r2, [r3, #32]
}
 800cef2:	bf00      	nop
 800cef4:	371c      	adds	r7, #28
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	feff8fff 	.word	0xfeff8fff
 800cf04:	40010000 	.word	0x40010000
 800cf08:	40010400 	.word	0x40010400

0800cf0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b087      	sub	sp, #28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6a1b      	ldr	r3, [r3, #32]
 800cf20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	4b1b      	ldr	r3, [pc, #108]	@ (800cfa4 <TIM_OC5_SetConfig+0x98>)
 800cf38:	4013      	ands	r3, r2
 800cf3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cf4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	041b      	lsls	r3, r3, #16
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4a12      	ldr	r2, [pc, #72]	@ (800cfa8 <TIM_OC5_SetConfig+0x9c>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d003      	beq.n	800cf6a <TIM_OC5_SetConfig+0x5e>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a11      	ldr	r2, [pc, #68]	@ (800cfac <TIM_OC5_SetConfig+0xa0>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d109      	bne.n	800cf7e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	695b      	ldr	r3, [r3, #20]
 800cf76:	021b      	lsls	r3, r3, #8
 800cf78:	697a      	ldr	r2, [r7, #20]
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	697a      	ldr	r2, [r7, #20]
 800cf82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	685a      	ldr	r2, [r3, #4]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	621a      	str	r2, [r3, #32]
}
 800cf98:	bf00      	nop
 800cf9a:	371c      	adds	r7, #28
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	fffeff8f 	.word	0xfffeff8f
 800cfa8:	40010000 	.word	0x40010000
 800cfac:	40010400 	.word	0x40010400

0800cfb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b087      	sub	sp, #28
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6a1b      	ldr	r3, [r3, #32]
 800cfc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	4b1c      	ldr	r3, [pc, #112]	@ (800d04c <TIM_OC6_SetConfig+0x9c>)
 800cfdc:	4013      	ands	r3, r2
 800cfde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	021b      	lsls	r3, r3, #8
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	051b      	lsls	r3, r3, #20
 800cffa:	693a      	ldr	r2, [r7, #16]
 800cffc:	4313      	orrs	r3, r2
 800cffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a13      	ldr	r2, [pc, #76]	@ (800d050 <TIM_OC6_SetConfig+0xa0>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d003      	beq.n	800d010 <TIM_OC6_SetConfig+0x60>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a12      	ldr	r2, [pc, #72]	@ (800d054 <TIM_OC6_SetConfig+0xa4>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d109      	bne.n	800d024 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	695b      	ldr	r3, [r3, #20]
 800d01c:	029b      	lsls	r3, r3, #10
 800d01e:	697a      	ldr	r2, [r7, #20]
 800d020:	4313      	orrs	r3, r2
 800d022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	697a      	ldr	r2, [r7, #20]
 800d028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	693a      	ldr	r2, [r7, #16]
 800d03c:	621a      	str	r2, [r3, #32]
}
 800d03e:	bf00      	nop
 800d040:	371c      	adds	r7, #28
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	feff8fff 	.word	0xfeff8fff
 800d050:	40010000 	.word	0x40010000
 800d054:	40010400 	.word	0x40010400

0800d058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d058:	b480      	push	{r7}
 800d05a:	b087      	sub	sp, #28
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6a1b      	ldr	r3, [r3, #32]
 800d068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6a1b      	ldr	r3, [r3, #32]
 800d06e:	f023 0201 	bic.w	r2, r3, #1
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	699b      	ldr	r3, [r3, #24]
 800d07a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	011b      	lsls	r3, r3, #4
 800d088:	693a      	ldr	r2, [r7, #16]
 800d08a:	4313      	orrs	r3, r2
 800d08c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	f023 030a 	bic.w	r3, r3, #10
 800d094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d096:	697a      	ldr	r2, [r7, #20]
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	693a      	ldr	r2, [r7, #16]
 800d0a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	621a      	str	r2, [r3, #32]
}
 800d0aa:	bf00      	nop
 800d0ac:	371c      	adds	r7, #28
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0b6:	b480      	push	{r7}
 800d0b8:	b087      	sub	sp, #28
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	60f8      	str	r0, [r7, #12]
 800d0be:	60b9      	str	r1, [r7, #8]
 800d0c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6a1b      	ldr	r3, [r3, #32]
 800d0c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6a1b      	ldr	r3, [r3, #32]
 800d0cc:	f023 0210 	bic.w	r2, r3, #16
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	699b      	ldr	r3, [r3, #24]
 800d0d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d0e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	031b      	lsls	r3, r3, #12
 800d0e6:	693a      	ldr	r2, [r7, #16]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d0f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	011b      	lsls	r3, r3, #4
 800d0f8:	697a      	ldr	r2, [r7, #20]
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	621a      	str	r2, [r3, #32]
}
 800d10a:	bf00      	nop
 800d10c:	371c      	adds	r7, #28
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d116:	b480      	push	{r7}
 800d118:	b085      	sub	sp, #20
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d12c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	4313      	orrs	r3, r2
 800d134:	f043 0307 	orr.w	r3, r3, #7
 800d138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	609a      	str	r2, [r3, #8]
}
 800d140:	bf00      	nop
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	021a      	lsls	r2, r3, #8
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	431a      	orrs	r2, r3
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	4313      	orrs	r3, r2
 800d174:	697a      	ldr	r2, [r7, #20]
 800d176:	4313      	orrs	r3, r2
 800d178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	697a      	ldr	r2, [r7, #20]
 800d17e:	609a      	str	r2, [r3, #8]
}
 800d180:	bf00      	nop
 800d182:	371c      	adds	r7, #28
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d101      	bne.n	800d1a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d1a0:	2302      	movs	r3, #2
 800d1a2:	e06d      	b.n	800d280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2202      	movs	r2, #2
 800d1b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a30      	ldr	r2, [pc, #192]	@ (800d28c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d004      	beq.n	800d1d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a2f      	ldr	r2, [pc, #188]	@ (800d290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d108      	bne.n	800d1ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d1de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a20      	ldr	r2, [pc, #128]	@ (800d28c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d022      	beq.n	800d254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d216:	d01d      	beq.n	800d254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a1d      	ldr	r2, [pc, #116]	@ (800d294 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d018      	beq.n	800d254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a1c      	ldr	r2, [pc, #112]	@ (800d298 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d013      	beq.n	800d254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a1a      	ldr	r2, [pc, #104]	@ (800d29c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d00e      	beq.n	800d254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a15      	ldr	r2, [pc, #84]	@ (800d290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d009      	beq.n	800d254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a16      	ldr	r2, [pc, #88]	@ (800d2a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d004      	beq.n	800d254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a15      	ldr	r2, [pc, #84]	@ (800d2a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d10c      	bne.n	800d26e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d25a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	68ba      	ldr	r2, [r7, #8]
 800d262:	4313      	orrs	r3, r2
 800d264:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68ba      	ldr	r2, [r7, #8]
 800d26c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2201      	movs	r2, #1
 800d272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d27e:	2300      	movs	r3, #0
}
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr
 800d28c:	40010000 	.word	0x40010000
 800d290:	40010400 	.word	0x40010400
 800d294:	40000400 	.word	0x40000400
 800d298:	40000800 	.word	0x40000800
 800d29c:	40000c00 	.word	0x40000c00
 800d2a0:	40014000 	.word	0x40014000
 800d2a4:	40001800 	.word	0x40001800

0800d2a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d2b0:	bf00      	nop
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d2c4:	bf00      	nop
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d101      	bne.n	800d2f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e040      	b.n	800d378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d106      	bne.n	800d30c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f7f5 fc12 	bl	8002b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2224      	movs	r2, #36	@ 0x24
 800d310:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f022 0201 	bic.w	r2, r2, #1
 800d320:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d326:	2b00      	cmp	r3, #0
 800d328:	d002      	beq.n	800d330 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 fa8c 	bl	800d848 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 f825 	bl	800d380 <UART_SetConfig>
 800d336:	4603      	mov	r3, r0
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d101      	bne.n	800d340 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e01b      	b.n	800d378 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	685a      	ldr	r2, [r3, #4]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d34e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	689a      	ldr	r2, [r3, #8]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d35e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f042 0201 	orr.w	r2, r2, #1
 800d36e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 fb0b 	bl	800d98c <UART_CheckIdleState>
 800d376:	4603      	mov	r3, r0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b088      	sub	sp, #32
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	689a      	ldr	r2, [r3, #8]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	431a      	orrs	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	695b      	ldr	r3, [r3, #20]
 800d39a:	431a      	orrs	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	69db      	ldr	r3, [r3, #28]
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	4ba6      	ldr	r3, [pc, #664]	@ (800d644 <UART_SetConfig+0x2c4>)
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	6812      	ldr	r2, [r2, #0]
 800d3b2:	6979      	ldr	r1, [r7, #20]
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68da      	ldr	r2, [r3, #12]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	430a      	orrs	r2, r1
 800d3cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6a1b      	ldr	r3, [r3, #32]
 800d3d8:	697a      	ldr	r2, [r7, #20]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	430a      	orrs	r2, r1
 800d3f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a94      	ldr	r2, [pc, #592]	@ (800d648 <UART_SetConfig+0x2c8>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d120      	bne.n	800d43e <UART_SetConfig+0xbe>
 800d3fc:	4b93      	ldr	r3, [pc, #588]	@ (800d64c <UART_SetConfig+0x2cc>)
 800d3fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d402:	f003 0303 	and.w	r3, r3, #3
 800d406:	2b03      	cmp	r3, #3
 800d408:	d816      	bhi.n	800d438 <UART_SetConfig+0xb8>
 800d40a:	a201      	add	r2, pc, #4	@ (adr r2, 800d410 <UART_SetConfig+0x90>)
 800d40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d410:	0800d421 	.word	0x0800d421
 800d414:	0800d42d 	.word	0x0800d42d
 800d418:	0800d427 	.word	0x0800d427
 800d41c:	0800d433 	.word	0x0800d433
 800d420:	2301      	movs	r3, #1
 800d422:	77fb      	strb	r3, [r7, #31]
 800d424:	e150      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d426:	2302      	movs	r3, #2
 800d428:	77fb      	strb	r3, [r7, #31]
 800d42a:	e14d      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d42c:	2304      	movs	r3, #4
 800d42e:	77fb      	strb	r3, [r7, #31]
 800d430:	e14a      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d432:	2308      	movs	r3, #8
 800d434:	77fb      	strb	r3, [r7, #31]
 800d436:	e147      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d438:	2310      	movs	r3, #16
 800d43a:	77fb      	strb	r3, [r7, #31]
 800d43c:	e144      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4a83      	ldr	r2, [pc, #524]	@ (800d650 <UART_SetConfig+0x2d0>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d132      	bne.n	800d4ae <UART_SetConfig+0x12e>
 800d448:	4b80      	ldr	r3, [pc, #512]	@ (800d64c <UART_SetConfig+0x2cc>)
 800d44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d44e:	f003 030c 	and.w	r3, r3, #12
 800d452:	2b0c      	cmp	r3, #12
 800d454:	d828      	bhi.n	800d4a8 <UART_SetConfig+0x128>
 800d456:	a201      	add	r2, pc, #4	@ (adr r2, 800d45c <UART_SetConfig+0xdc>)
 800d458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d45c:	0800d491 	.word	0x0800d491
 800d460:	0800d4a9 	.word	0x0800d4a9
 800d464:	0800d4a9 	.word	0x0800d4a9
 800d468:	0800d4a9 	.word	0x0800d4a9
 800d46c:	0800d49d 	.word	0x0800d49d
 800d470:	0800d4a9 	.word	0x0800d4a9
 800d474:	0800d4a9 	.word	0x0800d4a9
 800d478:	0800d4a9 	.word	0x0800d4a9
 800d47c:	0800d497 	.word	0x0800d497
 800d480:	0800d4a9 	.word	0x0800d4a9
 800d484:	0800d4a9 	.word	0x0800d4a9
 800d488:	0800d4a9 	.word	0x0800d4a9
 800d48c:	0800d4a3 	.word	0x0800d4a3
 800d490:	2300      	movs	r3, #0
 800d492:	77fb      	strb	r3, [r7, #31]
 800d494:	e118      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d496:	2302      	movs	r3, #2
 800d498:	77fb      	strb	r3, [r7, #31]
 800d49a:	e115      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d49c:	2304      	movs	r3, #4
 800d49e:	77fb      	strb	r3, [r7, #31]
 800d4a0:	e112      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d4a2:	2308      	movs	r3, #8
 800d4a4:	77fb      	strb	r3, [r7, #31]
 800d4a6:	e10f      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d4a8:	2310      	movs	r3, #16
 800d4aa:	77fb      	strb	r3, [r7, #31]
 800d4ac:	e10c      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a68      	ldr	r2, [pc, #416]	@ (800d654 <UART_SetConfig+0x2d4>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d120      	bne.n	800d4fa <UART_SetConfig+0x17a>
 800d4b8:	4b64      	ldr	r3, [pc, #400]	@ (800d64c <UART_SetConfig+0x2cc>)
 800d4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d4c2:	2b30      	cmp	r3, #48	@ 0x30
 800d4c4:	d013      	beq.n	800d4ee <UART_SetConfig+0x16e>
 800d4c6:	2b30      	cmp	r3, #48	@ 0x30
 800d4c8:	d814      	bhi.n	800d4f4 <UART_SetConfig+0x174>
 800d4ca:	2b20      	cmp	r3, #32
 800d4cc:	d009      	beq.n	800d4e2 <UART_SetConfig+0x162>
 800d4ce:	2b20      	cmp	r3, #32
 800d4d0:	d810      	bhi.n	800d4f4 <UART_SetConfig+0x174>
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <UART_SetConfig+0x15c>
 800d4d6:	2b10      	cmp	r3, #16
 800d4d8:	d006      	beq.n	800d4e8 <UART_SetConfig+0x168>
 800d4da:	e00b      	b.n	800d4f4 <UART_SetConfig+0x174>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	77fb      	strb	r3, [r7, #31]
 800d4e0:	e0f2      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d4e2:	2302      	movs	r3, #2
 800d4e4:	77fb      	strb	r3, [r7, #31]
 800d4e6:	e0ef      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d4e8:	2304      	movs	r3, #4
 800d4ea:	77fb      	strb	r3, [r7, #31]
 800d4ec:	e0ec      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d4ee:	2308      	movs	r3, #8
 800d4f0:	77fb      	strb	r3, [r7, #31]
 800d4f2:	e0e9      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d4f4:	2310      	movs	r3, #16
 800d4f6:	77fb      	strb	r3, [r7, #31]
 800d4f8:	e0e6      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4a56      	ldr	r2, [pc, #344]	@ (800d658 <UART_SetConfig+0x2d8>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d120      	bne.n	800d546 <UART_SetConfig+0x1c6>
 800d504:	4b51      	ldr	r3, [pc, #324]	@ (800d64c <UART_SetConfig+0x2cc>)
 800d506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d50a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d50e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d510:	d013      	beq.n	800d53a <UART_SetConfig+0x1ba>
 800d512:	2bc0      	cmp	r3, #192	@ 0xc0
 800d514:	d814      	bhi.n	800d540 <UART_SetConfig+0x1c0>
 800d516:	2b80      	cmp	r3, #128	@ 0x80
 800d518:	d009      	beq.n	800d52e <UART_SetConfig+0x1ae>
 800d51a:	2b80      	cmp	r3, #128	@ 0x80
 800d51c:	d810      	bhi.n	800d540 <UART_SetConfig+0x1c0>
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d002      	beq.n	800d528 <UART_SetConfig+0x1a8>
 800d522:	2b40      	cmp	r3, #64	@ 0x40
 800d524:	d006      	beq.n	800d534 <UART_SetConfig+0x1b4>
 800d526:	e00b      	b.n	800d540 <UART_SetConfig+0x1c0>
 800d528:	2300      	movs	r3, #0
 800d52a:	77fb      	strb	r3, [r7, #31]
 800d52c:	e0cc      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d52e:	2302      	movs	r3, #2
 800d530:	77fb      	strb	r3, [r7, #31]
 800d532:	e0c9      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d534:	2304      	movs	r3, #4
 800d536:	77fb      	strb	r3, [r7, #31]
 800d538:	e0c6      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d53a:	2308      	movs	r3, #8
 800d53c:	77fb      	strb	r3, [r7, #31]
 800d53e:	e0c3      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d540:	2310      	movs	r3, #16
 800d542:	77fb      	strb	r3, [r7, #31]
 800d544:	e0c0      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a44      	ldr	r2, [pc, #272]	@ (800d65c <UART_SetConfig+0x2dc>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d125      	bne.n	800d59c <UART_SetConfig+0x21c>
 800d550:	4b3e      	ldr	r3, [pc, #248]	@ (800d64c <UART_SetConfig+0x2cc>)
 800d552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d55a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d55e:	d017      	beq.n	800d590 <UART_SetConfig+0x210>
 800d560:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d564:	d817      	bhi.n	800d596 <UART_SetConfig+0x216>
 800d566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d56a:	d00b      	beq.n	800d584 <UART_SetConfig+0x204>
 800d56c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d570:	d811      	bhi.n	800d596 <UART_SetConfig+0x216>
 800d572:	2b00      	cmp	r3, #0
 800d574:	d003      	beq.n	800d57e <UART_SetConfig+0x1fe>
 800d576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d57a:	d006      	beq.n	800d58a <UART_SetConfig+0x20a>
 800d57c:	e00b      	b.n	800d596 <UART_SetConfig+0x216>
 800d57e:	2300      	movs	r3, #0
 800d580:	77fb      	strb	r3, [r7, #31]
 800d582:	e0a1      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d584:	2302      	movs	r3, #2
 800d586:	77fb      	strb	r3, [r7, #31]
 800d588:	e09e      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d58a:	2304      	movs	r3, #4
 800d58c:	77fb      	strb	r3, [r7, #31]
 800d58e:	e09b      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d590:	2308      	movs	r3, #8
 800d592:	77fb      	strb	r3, [r7, #31]
 800d594:	e098      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d596:	2310      	movs	r3, #16
 800d598:	77fb      	strb	r3, [r7, #31]
 800d59a:	e095      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a2f      	ldr	r2, [pc, #188]	@ (800d660 <UART_SetConfig+0x2e0>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d125      	bne.n	800d5f2 <UART_SetConfig+0x272>
 800d5a6:	4b29      	ldr	r3, [pc, #164]	@ (800d64c <UART_SetConfig+0x2cc>)
 800d5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d5b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d5b4:	d017      	beq.n	800d5e6 <UART_SetConfig+0x266>
 800d5b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d5ba:	d817      	bhi.n	800d5ec <UART_SetConfig+0x26c>
 800d5bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5c0:	d00b      	beq.n	800d5da <UART_SetConfig+0x25a>
 800d5c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5c6:	d811      	bhi.n	800d5ec <UART_SetConfig+0x26c>
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d003      	beq.n	800d5d4 <UART_SetConfig+0x254>
 800d5cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5d0:	d006      	beq.n	800d5e0 <UART_SetConfig+0x260>
 800d5d2:	e00b      	b.n	800d5ec <UART_SetConfig+0x26c>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	77fb      	strb	r3, [r7, #31]
 800d5d8:	e076      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d5da:	2302      	movs	r3, #2
 800d5dc:	77fb      	strb	r3, [r7, #31]
 800d5de:	e073      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d5e0:	2304      	movs	r3, #4
 800d5e2:	77fb      	strb	r3, [r7, #31]
 800d5e4:	e070      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d5e6:	2308      	movs	r3, #8
 800d5e8:	77fb      	strb	r3, [r7, #31]
 800d5ea:	e06d      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d5ec:	2310      	movs	r3, #16
 800d5ee:	77fb      	strb	r3, [r7, #31]
 800d5f0:	e06a      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a1b      	ldr	r2, [pc, #108]	@ (800d664 <UART_SetConfig+0x2e4>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d138      	bne.n	800d66e <UART_SetConfig+0x2ee>
 800d5fc:	4b13      	ldr	r3, [pc, #76]	@ (800d64c <UART_SetConfig+0x2cc>)
 800d5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d602:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d606:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d60a:	d017      	beq.n	800d63c <UART_SetConfig+0x2bc>
 800d60c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d610:	d82a      	bhi.n	800d668 <UART_SetConfig+0x2e8>
 800d612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d616:	d00b      	beq.n	800d630 <UART_SetConfig+0x2b0>
 800d618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d61c:	d824      	bhi.n	800d668 <UART_SetConfig+0x2e8>
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d003      	beq.n	800d62a <UART_SetConfig+0x2aa>
 800d622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d626:	d006      	beq.n	800d636 <UART_SetConfig+0x2b6>
 800d628:	e01e      	b.n	800d668 <UART_SetConfig+0x2e8>
 800d62a:	2300      	movs	r3, #0
 800d62c:	77fb      	strb	r3, [r7, #31]
 800d62e:	e04b      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d630:	2302      	movs	r3, #2
 800d632:	77fb      	strb	r3, [r7, #31]
 800d634:	e048      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d636:	2304      	movs	r3, #4
 800d638:	77fb      	strb	r3, [r7, #31]
 800d63a:	e045      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d63c:	2308      	movs	r3, #8
 800d63e:	77fb      	strb	r3, [r7, #31]
 800d640:	e042      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d642:	bf00      	nop
 800d644:	efff69f3 	.word	0xefff69f3
 800d648:	40011000 	.word	0x40011000
 800d64c:	40023800 	.word	0x40023800
 800d650:	40004400 	.word	0x40004400
 800d654:	40004800 	.word	0x40004800
 800d658:	40004c00 	.word	0x40004c00
 800d65c:	40005000 	.word	0x40005000
 800d660:	40011400 	.word	0x40011400
 800d664:	40007800 	.word	0x40007800
 800d668:	2310      	movs	r3, #16
 800d66a:	77fb      	strb	r3, [r7, #31]
 800d66c:	e02c      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a72      	ldr	r2, [pc, #456]	@ (800d83c <UART_SetConfig+0x4bc>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d125      	bne.n	800d6c4 <UART_SetConfig+0x344>
 800d678:	4b71      	ldr	r3, [pc, #452]	@ (800d840 <UART_SetConfig+0x4c0>)
 800d67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d67e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d682:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d686:	d017      	beq.n	800d6b8 <UART_SetConfig+0x338>
 800d688:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d68c:	d817      	bhi.n	800d6be <UART_SetConfig+0x33e>
 800d68e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d692:	d00b      	beq.n	800d6ac <UART_SetConfig+0x32c>
 800d694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d698:	d811      	bhi.n	800d6be <UART_SetConfig+0x33e>
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <UART_SetConfig+0x326>
 800d69e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d6a2:	d006      	beq.n	800d6b2 <UART_SetConfig+0x332>
 800d6a4:	e00b      	b.n	800d6be <UART_SetConfig+0x33e>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	77fb      	strb	r3, [r7, #31]
 800d6aa:	e00d      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	77fb      	strb	r3, [r7, #31]
 800d6b0:	e00a      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d6b2:	2304      	movs	r3, #4
 800d6b4:	77fb      	strb	r3, [r7, #31]
 800d6b6:	e007      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d6b8:	2308      	movs	r3, #8
 800d6ba:	77fb      	strb	r3, [r7, #31]
 800d6bc:	e004      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d6be:	2310      	movs	r3, #16
 800d6c0:	77fb      	strb	r3, [r7, #31]
 800d6c2:	e001      	b.n	800d6c8 <UART_SetConfig+0x348>
 800d6c4:	2310      	movs	r3, #16
 800d6c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	69db      	ldr	r3, [r3, #28]
 800d6cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6d0:	d15b      	bne.n	800d78a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d6d2:	7ffb      	ldrb	r3, [r7, #31]
 800d6d4:	2b08      	cmp	r3, #8
 800d6d6:	d828      	bhi.n	800d72a <UART_SetConfig+0x3aa>
 800d6d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e0 <UART_SetConfig+0x360>)
 800d6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6de:	bf00      	nop
 800d6e0:	0800d705 	.word	0x0800d705
 800d6e4:	0800d70d 	.word	0x0800d70d
 800d6e8:	0800d715 	.word	0x0800d715
 800d6ec:	0800d72b 	.word	0x0800d72b
 800d6f0:	0800d71b 	.word	0x0800d71b
 800d6f4:	0800d72b 	.word	0x0800d72b
 800d6f8:	0800d72b 	.word	0x0800d72b
 800d6fc:	0800d72b 	.word	0x0800d72b
 800d700:	0800d723 	.word	0x0800d723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d704:	f7fd f926 	bl	800a954 <HAL_RCC_GetPCLK1Freq>
 800d708:	61b8      	str	r0, [r7, #24]
        break;
 800d70a:	e013      	b.n	800d734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d70c:	f7fd f936 	bl	800a97c <HAL_RCC_GetPCLK2Freq>
 800d710:	61b8      	str	r0, [r7, #24]
        break;
 800d712:	e00f      	b.n	800d734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d714:	4b4b      	ldr	r3, [pc, #300]	@ (800d844 <UART_SetConfig+0x4c4>)
 800d716:	61bb      	str	r3, [r7, #24]
        break;
 800d718:	e00c      	b.n	800d734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d71a:	f7fd f849 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800d71e:	61b8      	str	r0, [r7, #24]
        break;
 800d720:	e008      	b.n	800d734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d726:	61bb      	str	r3, [r7, #24]
        break;
 800d728:	e004      	b.n	800d734 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d72a:	2300      	movs	r3, #0
 800d72c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	77bb      	strb	r3, [r7, #30]
        break;
 800d732:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d074      	beq.n	800d824 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	005a      	lsls	r2, r3, #1
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	085b      	lsrs	r3, r3, #1
 800d744:	441a      	add	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d74e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	2b0f      	cmp	r3, #15
 800d754:	d916      	bls.n	800d784 <UART_SetConfig+0x404>
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d75c:	d212      	bcs.n	800d784 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	b29b      	uxth	r3, r3
 800d762:	f023 030f 	bic.w	r3, r3, #15
 800d766:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	085b      	lsrs	r3, r3, #1
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	f003 0307 	and.w	r3, r3, #7
 800d772:	b29a      	uxth	r2, r3
 800d774:	89fb      	ldrh	r3, [r7, #14]
 800d776:	4313      	orrs	r3, r2
 800d778:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	89fa      	ldrh	r2, [r7, #14]
 800d780:	60da      	str	r2, [r3, #12]
 800d782:	e04f      	b.n	800d824 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d784:	2301      	movs	r3, #1
 800d786:	77bb      	strb	r3, [r7, #30]
 800d788:	e04c      	b.n	800d824 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d78a:	7ffb      	ldrb	r3, [r7, #31]
 800d78c:	2b08      	cmp	r3, #8
 800d78e:	d828      	bhi.n	800d7e2 <UART_SetConfig+0x462>
 800d790:	a201      	add	r2, pc, #4	@ (adr r2, 800d798 <UART_SetConfig+0x418>)
 800d792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d796:	bf00      	nop
 800d798:	0800d7bd 	.word	0x0800d7bd
 800d79c:	0800d7c5 	.word	0x0800d7c5
 800d7a0:	0800d7cd 	.word	0x0800d7cd
 800d7a4:	0800d7e3 	.word	0x0800d7e3
 800d7a8:	0800d7d3 	.word	0x0800d7d3
 800d7ac:	0800d7e3 	.word	0x0800d7e3
 800d7b0:	0800d7e3 	.word	0x0800d7e3
 800d7b4:	0800d7e3 	.word	0x0800d7e3
 800d7b8:	0800d7db 	.word	0x0800d7db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7bc:	f7fd f8ca 	bl	800a954 <HAL_RCC_GetPCLK1Freq>
 800d7c0:	61b8      	str	r0, [r7, #24]
        break;
 800d7c2:	e013      	b.n	800d7ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7c4:	f7fd f8da 	bl	800a97c <HAL_RCC_GetPCLK2Freq>
 800d7c8:	61b8      	str	r0, [r7, #24]
        break;
 800d7ca:	e00f      	b.n	800d7ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d7cc:	4b1d      	ldr	r3, [pc, #116]	@ (800d844 <UART_SetConfig+0x4c4>)
 800d7ce:	61bb      	str	r3, [r7, #24]
        break;
 800d7d0:	e00c      	b.n	800d7ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d7d2:	f7fc ffed 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800d7d6:	61b8      	str	r0, [r7, #24]
        break;
 800d7d8:	e008      	b.n	800d7ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7de:	61bb      	str	r3, [r7, #24]
        break;
 800d7e0:	e004      	b.n	800d7ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	77bb      	strb	r3, [r7, #30]
        break;
 800d7ea:	bf00      	nop
    }

    if (pclk != 0U)
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d018      	beq.n	800d824 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	085a      	lsrs	r2, r3, #1
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	441a      	add	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	fbb2 f3f3 	udiv	r3, r2, r3
 800d804:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	2b0f      	cmp	r3, #15
 800d80a:	d909      	bls.n	800d820 <UART_SetConfig+0x4a0>
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d812:	d205      	bcs.n	800d820 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	b29a      	uxth	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	60da      	str	r2, [r3, #12]
 800d81e:	e001      	b.n	800d824 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d830:	7fbb      	ldrb	r3, [r7, #30]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3720      	adds	r7, #32
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	40007c00 	.word	0x40007c00
 800d840:	40023800 	.word	0x40023800
 800d844:	00f42400 	.word	0x00f42400

0800d848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d854:	f003 0308 	and.w	r3, r3, #8
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00a      	beq.n	800d872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	430a      	orrs	r2, r1
 800d870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d876:	f003 0301 	and.w	r3, r3, #1
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d00a      	beq.n	800d894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	430a      	orrs	r2, r1
 800d892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d898:	f003 0302 	and.w	r3, r3, #2
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00a      	beq.n	800d8b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	430a      	orrs	r2, r1
 800d8b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ba:	f003 0304 	and.w	r3, r3, #4
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00a      	beq.n	800d8d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	430a      	orrs	r2, r1
 800d8d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8dc:	f003 0310 	and.w	r3, r3, #16
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00a      	beq.n	800d8fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8fe:	f003 0320 	and.w	r3, r3, #32
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00a      	beq.n	800d91c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	430a      	orrs	r2, r1
 800d91a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d924:	2b00      	cmp	r3, #0
 800d926:	d01a      	beq.n	800d95e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	430a      	orrs	r2, r1
 800d93c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d946:	d10a      	bne.n	800d95e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	430a      	orrs	r2, r1
 800d95c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00a      	beq.n	800d980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	430a      	orrs	r2, r1
 800d97e:	605a      	str	r2, [r3, #4]
  }
}
 800d980:	bf00      	nop
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b098      	sub	sp, #96	@ 0x60
 800d990:	af02      	add	r7, sp, #8
 800d992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d99c:	f7f8 f9ba 	bl	8005d14 <HAL_GetTick>
 800d9a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f003 0308 	and.w	r3, r3, #8
 800d9ac:	2b08      	cmp	r3, #8
 800d9ae:	d12e      	bne.n	800da0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d9b4:	9300      	str	r3, [sp, #0]
 800d9b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 f88c 	bl	800dadc <UART_WaitOnFlagUntilTimeout>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d021      	beq.n	800da0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d2:	e853 3f00 	ldrex	r3, [r3]
 800d9d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9de:	653b      	str	r3, [r7, #80]	@ 0x50
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9f0:	e841 2300 	strex	r3, r2, [r1]
 800d9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d9f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1e6      	bne.n	800d9ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2220      	movs	r2, #32
 800da00:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da0a:	2303      	movs	r3, #3
 800da0c:	e062      	b.n	800dad4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f003 0304 	and.w	r3, r3, #4
 800da18:	2b04      	cmp	r3, #4
 800da1a:	d149      	bne.n	800dab0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da24:	2200      	movs	r2, #0
 800da26:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f856 	bl	800dadc <UART_WaitOnFlagUntilTimeout>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d03c      	beq.n	800dab0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3e:	e853 3f00 	ldrex	r3, [r3]
 800da42:	623b      	str	r3, [r7, #32]
   return(result);
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	461a      	mov	r2, r3
 800da52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da54:	633b      	str	r3, [r7, #48]	@ 0x30
 800da56:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da5c:	e841 2300 	strex	r3, r2, [r1]
 800da60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1e6      	bne.n	800da36 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	3308      	adds	r3, #8
 800da6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	e853 3f00 	ldrex	r3, [r3]
 800da76:	60fb      	str	r3, [r7, #12]
   return(result);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f023 0301 	bic.w	r3, r3, #1
 800da7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	3308      	adds	r3, #8
 800da86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da88:	61fa      	str	r2, [r7, #28]
 800da8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da8c:	69b9      	ldr	r1, [r7, #24]
 800da8e:	69fa      	ldr	r2, [r7, #28]
 800da90:	e841 2300 	strex	r3, r2, [r1]
 800da94:	617b      	str	r3, [r7, #20]
   return(result);
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d1e5      	bne.n	800da68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2220      	movs	r2, #32
 800daa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800daac:	2303      	movs	r3, #3
 800daae:	e011      	b.n	800dad4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2220      	movs	r2, #32
 800dab4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2220      	movs	r2, #32
 800daba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3758      	adds	r7, #88	@ 0x58
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	603b      	str	r3, [r7, #0]
 800dae8:	4613      	mov	r3, r2
 800daea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daec:	e04f      	b.n	800db8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf4:	d04b      	beq.n	800db8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800daf6:	f7f8 f90d 	bl	8005d14 <HAL_GetTick>
 800dafa:	4602      	mov	r2, r0
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	69ba      	ldr	r2, [r7, #24]
 800db02:	429a      	cmp	r2, r3
 800db04:	d302      	bcc.n	800db0c <UART_WaitOnFlagUntilTimeout+0x30>
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db0c:	2303      	movs	r3, #3
 800db0e:	e04e      	b.n	800dbae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f003 0304 	and.w	r3, r3, #4
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d037      	beq.n	800db8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2b80      	cmp	r3, #128	@ 0x80
 800db22:	d034      	beq.n	800db8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	2b40      	cmp	r3, #64	@ 0x40
 800db28:	d031      	beq.n	800db8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	69db      	ldr	r3, [r3, #28]
 800db30:	f003 0308 	and.w	r3, r3, #8
 800db34:	2b08      	cmp	r3, #8
 800db36:	d110      	bne.n	800db5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2208      	movs	r2, #8
 800db3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f000 f838 	bl	800dbb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2208      	movs	r2, #8
 800db4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2200      	movs	r2, #0
 800db52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800db56:	2301      	movs	r3, #1
 800db58:	e029      	b.n	800dbae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	69db      	ldr	r3, [r3, #28]
 800db60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db68:	d111      	bne.n	800db8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800db72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f000 f81e 	bl	800dbb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2220      	movs	r2, #32
 800db7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800db8a:	2303      	movs	r3, #3
 800db8c:	e00f      	b.n	800dbae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	69da      	ldr	r2, [r3, #28]
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	4013      	ands	r3, r2
 800db98:	68ba      	ldr	r2, [r7, #8]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	bf0c      	ite	eq
 800db9e:	2301      	moveq	r3, #1
 800dba0:	2300      	movne	r3, #0
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	461a      	mov	r2, r3
 800dba6:	79fb      	ldrb	r3, [r7, #7]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d0a0      	beq.n	800daee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbb6:	b480      	push	{r7}
 800dbb8:	b095      	sub	sp, #84	@ 0x54
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbc6:	e853 3f00 	ldrex	r3, [r3]
 800dbca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	461a      	mov	r2, r3
 800dbda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbdc:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dbe2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbe4:	e841 2300 	strex	r3, r2, [r1]
 800dbe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d1e6      	bne.n	800dbbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf8:	6a3b      	ldr	r3, [r7, #32]
 800dbfa:	e853 3f00 	ldrex	r3, [r3]
 800dbfe:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	f023 0301 	bic.w	r3, r3, #1
 800dc06:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	3308      	adds	r3, #8
 800dc0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc18:	e841 2300 	strex	r3, r2, [r1]
 800dc1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1e5      	bne.n	800dbf0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d118      	bne.n	800dc5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	e853 3f00 	ldrex	r3, [r3]
 800dc38:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	f023 0310 	bic.w	r3, r3, #16
 800dc40:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	461a      	mov	r2, r3
 800dc48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc4a:	61bb      	str	r3, [r7, #24]
 800dc4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4e:	6979      	ldr	r1, [r7, #20]
 800dc50:	69ba      	ldr	r2, [r7, #24]
 800dc52:	e841 2300 	strex	r3, r2, [r1]
 800dc56:	613b      	str	r3, [r7, #16]
   return(result);
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1e6      	bne.n	800dc2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2220      	movs	r2, #32
 800dc62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800dc72:	bf00      	nop
 800dc74:	3754      	adds	r7, #84	@ 0x54
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr

0800dc7e <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b082      	sub	sp, #8
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d101      	bne.n	800dc90 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	e016      	b.n	800dcbe <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7f5 f941 	bl	8002f18 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	68da      	ldr	r2, [r3, #12]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800dca2:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	691a      	ldr	r2, [r3, #16]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	ea42 0103 	orr.w	r1, r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689a      	ldr	r2, [r3, #8]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	430a      	orrs	r2, r1
 800dcba:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
	...

0800dcc8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d121      	bne.n	800dd1e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	4b27      	ldr	r3, [pc, #156]	@ (800dd7c <FMC_SDRAM_Init+0xb4>)
 800dce0:	4013      	ands	r3, r2
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	6851      	ldr	r1, [r2, #4]
 800dce6:	683a      	ldr	r2, [r7, #0]
 800dce8:	6892      	ldr	r2, [r2, #8]
 800dcea:	4311      	orrs	r1, r2
 800dcec:	683a      	ldr	r2, [r7, #0]
 800dcee:	68d2      	ldr	r2, [r2, #12]
 800dcf0:	4311      	orrs	r1, r2
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	6912      	ldr	r2, [r2, #16]
 800dcf6:	4311      	orrs	r1, r2
 800dcf8:	683a      	ldr	r2, [r7, #0]
 800dcfa:	6952      	ldr	r2, [r2, #20]
 800dcfc:	4311      	orrs	r1, r2
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	6992      	ldr	r2, [r2, #24]
 800dd02:	4311      	orrs	r1, r2
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	69d2      	ldr	r2, [r2, #28]
 800dd08:	4311      	orrs	r1, r2
 800dd0a:	683a      	ldr	r2, [r7, #0]
 800dd0c:	6a12      	ldr	r2, [r2, #32]
 800dd0e:	4311      	orrs	r1, r2
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800dd14:	430a      	orrs	r2, r1
 800dd16:	431a      	orrs	r2, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	601a      	str	r2, [r3, #0]
 800dd1c:	e026      	b.n	800dd6c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	69d9      	ldr	r1, [r3, #28]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	6a1b      	ldr	r3, [r3, #32]
 800dd2e:	4319      	orrs	r1, r3
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd34:	430b      	orrs	r3, r1
 800dd36:	431a      	orrs	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	685a      	ldr	r2, [r3, #4]
 800dd40:	4b0e      	ldr	r3, [pc, #56]	@ (800dd7c <FMC_SDRAM_Init+0xb4>)
 800dd42:	4013      	ands	r3, r2
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	6851      	ldr	r1, [r2, #4]
 800dd48:	683a      	ldr	r2, [r7, #0]
 800dd4a:	6892      	ldr	r2, [r2, #8]
 800dd4c:	4311      	orrs	r1, r2
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	68d2      	ldr	r2, [r2, #12]
 800dd52:	4311      	orrs	r1, r2
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	6912      	ldr	r2, [r2, #16]
 800dd58:	4311      	orrs	r1, r2
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	6952      	ldr	r2, [r2, #20]
 800dd5e:	4311      	orrs	r1, r2
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	6992      	ldr	r2, [r2, #24]
 800dd64:	430a      	orrs	r2, r1
 800dd66:	431a      	orrs	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	370c      	adds	r7, #12
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
 800dd7a:	bf00      	nop
 800dd7c:	ffff8000 	.word	0xffff8000

0800dd80 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d128      	bne.n	800dde4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	1e59      	subs	r1, r3, #1
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	3b01      	subs	r3, #1
 800dda6:	011b      	lsls	r3, r3, #4
 800dda8:	4319      	orrs	r1, r3
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	021b      	lsls	r3, r3, #8
 800ddb2:	4319      	orrs	r1, r3
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	031b      	lsls	r3, r3, #12
 800ddbc:	4319      	orrs	r1, r3
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	691b      	ldr	r3, [r3, #16]
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	041b      	lsls	r3, r3, #16
 800ddc6:	4319      	orrs	r1, r3
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	695b      	ldr	r3, [r3, #20]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	051b      	lsls	r3, r3, #20
 800ddd0:	4319      	orrs	r1, r3
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	699b      	ldr	r3, [r3, #24]
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	061b      	lsls	r3, r3, #24
 800ddda:	430b      	orrs	r3, r1
 800dddc:	431a      	orrs	r2, r3
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	609a      	str	r2, [r3, #8]
 800dde2:	e02d      	b.n	800de40 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	689a      	ldr	r2, [r3, #8]
 800dde8:	4b19      	ldr	r3, [pc, #100]	@ (800de50 <FMC_SDRAM_Timing_Init+0xd0>)
 800ddea:	4013      	ands	r3, r2
 800ddec:	68ba      	ldr	r2, [r7, #8]
 800ddee:	68d2      	ldr	r2, [r2, #12]
 800ddf0:	3a01      	subs	r2, #1
 800ddf2:	0311      	lsls	r1, r2, #12
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	6952      	ldr	r2, [r2, #20]
 800ddf8:	3a01      	subs	r2, #1
 800ddfa:	0512      	lsls	r2, r2, #20
 800ddfc:	430a      	orrs	r2, r1
 800ddfe:	431a      	orrs	r2, r3
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	1e59      	subs	r1, r3, #1
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	3b01      	subs	r3, #1
 800de18:	011b      	lsls	r3, r3, #4
 800de1a:	4319      	orrs	r1, r3
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	3b01      	subs	r3, #1
 800de22:	021b      	lsls	r3, r3, #8
 800de24:	4319      	orrs	r1, r3
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	3b01      	subs	r3, #1
 800de2c:	041b      	lsls	r3, r3, #16
 800de2e:	4319      	orrs	r1, r3
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	699b      	ldr	r3, [r3, #24]
 800de34:	3b01      	subs	r3, #1
 800de36:	061b      	lsls	r3, r3, #24
 800de38:	430b      	orrs	r3, r1
 800de3a:	431a      	orrs	r2, r3
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800de40:	2300      	movs	r3, #0
}
 800de42:	4618      	mov	r0, r3
 800de44:	3714      	adds	r7, #20
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	ff0f0fff 	.word	0xff0f0fff

0800de54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800de54:	b084      	sub	sp, #16
 800de56:	b580      	push	{r7, lr}
 800de58:	b084      	sub	sp, #16
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
 800de5e:	f107 001c 	add.w	r0, r7, #28
 800de62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d121      	bne.n	800deb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68da      	ldr	r2, [r3, #12]
 800de7e:	4b21      	ldr	r3, [pc, #132]	@ (800df04 <USB_CoreInit+0xb0>)
 800de80:	4013      	ands	r3, r2
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800de92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800de96:	2b01      	cmp	r3, #1
 800de98:	d105      	bne.n	800dea6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 fdae 	bl	800ea08 <USB_CoreReset>
 800deac:	4603      	mov	r3, r0
 800deae:	73fb      	strb	r3, [r7, #15]
 800deb0:	e010      	b.n	800ded4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fda2 	bl	800ea08 <USB_CoreReset>
 800dec4:	4603      	mov	r3, r0
 800dec6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800decc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800ded4:	7fbb      	ldrb	r3, [r7, #30]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d10b      	bne.n	800def2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	f043 0206 	orr.w	r2, r3, #6
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	f043 0220 	orr.w	r2, r3, #32
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800def2:	7bfb      	ldrb	r3, [r7, #15]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800defe:	b004      	add	sp, #16
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	ffbdffbf 	.word	0xffbdffbf

0800df08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800df08:	b480      	push	{r7}
 800df0a:	b087      	sub	sp, #28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	4613      	mov	r3, r2
 800df14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800df16:	79fb      	ldrb	r3, [r7, #7]
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d165      	bne.n	800dfe8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	4a41      	ldr	r2, [pc, #260]	@ (800e024 <USB_SetTurnaroundTime+0x11c>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d906      	bls.n	800df32 <USB_SetTurnaroundTime+0x2a>
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	4a40      	ldr	r2, [pc, #256]	@ (800e028 <USB_SetTurnaroundTime+0x120>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d202      	bcs.n	800df32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800df2c:	230f      	movs	r3, #15
 800df2e:	617b      	str	r3, [r7, #20]
 800df30:	e062      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	4a3c      	ldr	r2, [pc, #240]	@ (800e028 <USB_SetTurnaroundTime+0x120>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d306      	bcc.n	800df48 <USB_SetTurnaroundTime+0x40>
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	4a3b      	ldr	r2, [pc, #236]	@ (800e02c <USB_SetTurnaroundTime+0x124>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d202      	bcs.n	800df48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800df42:	230e      	movs	r3, #14
 800df44:	617b      	str	r3, [r7, #20]
 800df46:	e057      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	4a38      	ldr	r2, [pc, #224]	@ (800e02c <USB_SetTurnaroundTime+0x124>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d306      	bcc.n	800df5e <USB_SetTurnaroundTime+0x56>
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	4a37      	ldr	r2, [pc, #220]	@ (800e030 <USB_SetTurnaroundTime+0x128>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d202      	bcs.n	800df5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800df58:	230d      	movs	r3, #13
 800df5a:	617b      	str	r3, [r7, #20]
 800df5c:	e04c      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	4a33      	ldr	r2, [pc, #204]	@ (800e030 <USB_SetTurnaroundTime+0x128>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d306      	bcc.n	800df74 <USB_SetTurnaroundTime+0x6c>
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	4a32      	ldr	r2, [pc, #200]	@ (800e034 <USB_SetTurnaroundTime+0x12c>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d802      	bhi.n	800df74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800df6e:	230c      	movs	r3, #12
 800df70:	617b      	str	r3, [r7, #20]
 800df72:	e041      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	4a2f      	ldr	r2, [pc, #188]	@ (800e034 <USB_SetTurnaroundTime+0x12c>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d906      	bls.n	800df8a <USB_SetTurnaroundTime+0x82>
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	4a2e      	ldr	r2, [pc, #184]	@ (800e038 <USB_SetTurnaroundTime+0x130>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d802      	bhi.n	800df8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800df84:	230b      	movs	r3, #11
 800df86:	617b      	str	r3, [r7, #20]
 800df88:	e036      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	4a2a      	ldr	r2, [pc, #168]	@ (800e038 <USB_SetTurnaroundTime+0x130>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d906      	bls.n	800dfa0 <USB_SetTurnaroundTime+0x98>
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	4a29      	ldr	r2, [pc, #164]	@ (800e03c <USB_SetTurnaroundTime+0x134>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d802      	bhi.n	800dfa0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800df9a:	230a      	movs	r3, #10
 800df9c:	617b      	str	r3, [r7, #20]
 800df9e:	e02b      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	4a26      	ldr	r2, [pc, #152]	@ (800e03c <USB_SetTurnaroundTime+0x134>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d906      	bls.n	800dfb6 <USB_SetTurnaroundTime+0xae>
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	4a25      	ldr	r2, [pc, #148]	@ (800e040 <USB_SetTurnaroundTime+0x138>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d202      	bcs.n	800dfb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dfb0:	2309      	movs	r3, #9
 800dfb2:	617b      	str	r3, [r7, #20]
 800dfb4:	e020      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	4a21      	ldr	r2, [pc, #132]	@ (800e040 <USB_SetTurnaroundTime+0x138>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d306      	bcc.n	800dfcc <USB_SetTurnaroundTime+0xc4>
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	4a20      	ldr	r2, [pc, #128]	@ (800e044 <USB_SetTurnaroundTime+0x13c>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d802      	bhi.n	800dfcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dfc6:	2308      	movs	r3, #8
 800dfc8:	617b      	str	r3, [r7, #20]
 800dfca:	e015      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	4a1d      	ldr	r2, [pc, #116]	@ (800e044 <USB_SetTurnaroundTime+0x13c>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d906      	bls.n	800dfe2 <USB_SetTurnaroundTime+0xda>
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	4a1c      	ldr	r2, [pc, #112]	@ (800e048 <USB_SetTurnaroundTime+0x140>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d202      	bcs.n	800dfe2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dfdc:	2307      	movs	r3, #7
 800dfde:	617b      	str	r3, [r7, #20]
 800dfe0:	e00a      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dfe2:	2306      	movs	r3, #6
 800dfe4:	617b      	str	r3, [r7, #20]
 800dfe6:	e007      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dfe8:	79fb      	ldrb	r3, [r7, #7]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d102      	bne.n	800dff4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dfee:	2309      	movs	r3, #9
 800dff0:	617b      	str	r3, [r7, #20]
 800dff2:	e001      	b.n	800dff8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dff4:	2309      	movs	r3, #9
 800dff6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	68da      	ldr	r2, [r3, #12]
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	029b      	lsls	r3, r3, #10
 800e00c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e010:	431a      	orrs	r2, r3
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e016:	2300      	movs	r3, #0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	371c      	adds	r7, #28
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr
 800e024:	00d8acbf 	.word	0x00d8acbf
 800e028:	00e4e1c0 	.word	0x00e4e1c0
 800e02c:	00f42400 	.word	0x00f42400
 800e030:	01067380 	.word	0x01067380
 800e034:	011a499f 	.word	0x011a499f
 800e038:	01312cff 	.word	0x01312cff
 800e03c:	014ca43f 	.word	0x014ca43f
 800e040:	016e3600 	.word	0x016e3600
 800e044:	01a6ab1f 	.word	0x01a6ab1f
 800e048:	01e84800 	.word	0x01e84800

0800e04c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	f023 0201 	bic.w	r2, r3, #1
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e060:	2300      	movs	r3, #0
}
 800e062:	4618      	mov	r0, r3
 800e064:	370c      	adds	r7, #12
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr

0800e06e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b084      	sub	sp, #16
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
 800e076:	460b      	mov	r3, r1
 800e078:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e07a:	2300      	movs	r3, #0
 800e07c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e08a:	78fb      	ldrb	r3, [r7, #3]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d115      	bne.n	800e0bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e09c:	200a      	movs	r0, #10
 800e09e:	f7f7 fe45 	bl	8005d2c <HAL_Delay>
      ms += 10U;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	330a      	adds	r3, #10
 800e0a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fc1d 	bl	800e8e8 <USB_GetMode>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d01e      	beq.n	800e0f2 <USB_SetCurrentMode+0x84>
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2bc7      	cmp	r3, #199	@ 0xc7
 800e0b8:	d9f0      	bls.n	800e09c <USB_SetCurrentMode+0x2e>
 800e0ba:	e01a      	b.n	800e0f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e0bc:	78fb      	ldrb	r3, [r7, #3]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d115      	bne.n	800e0ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e0ce:	200a      	movs	r0, #10
 800e0d0:	f7f7 fe2c 	bl	8005d2c <HAL_Delay>
      ms += 10U;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	330a      	adds	r3, #10
 800e0d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 fc04 	bl	800e8e8 <USB_GetMode>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d005      	beq.n	800e0f2 <USB_SetCurrentMode+0x84>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2bc7      	cmp	r3, #199	@ 0xc7
 800e0ea:	d9f0      	bls.n	800e0ce <USB_SetCurrentMode+0x60>
 800e0ec:	e001      	b.n	800e0f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e005      	b.n	800e0fe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2bc8      	cmp	r3, #200	@ 0xc8
 800e0f6:	d101      	bne.n	800e0fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e000      	b.n	800e0fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e108:	b084      	sub	sp, #16
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b086      	sub	sp, #24
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e11a:	2300      	movs	r3, #0
 800e11c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e122:	2300      	movs	r3, #0
 800e124:	613b      	str	r3, [r7, #16]
 800e126:	e009      	b.n	800e13c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	3340      	adds	r3, #64	@ 0x40
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4413      	add	r3, r2
 800e132:	2200      	movs	r2, #0
 800e134:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	3301      	adds	r3, #1
 800e13a:	613b      	str	r3, [r7, #16]
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	2b0e      	cmp	r3, #14
 800e140:	d9f2      	bls.n	800e128 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e142:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e146:	2b00      	cmp	r3, #0
 800e148:	d11c      	bne.n	800e184 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e158:	f043 0302 	orr.w	r3, r3, #2
 800e15c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e162:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	601a      	str	r2, [r3, #0]
 800e182:	e005      	b.n	800e190 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e188:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e196:	461a      	mov	r2, r3
 800e198:	2300      	movs	r3, #0
 800e19a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e19c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d10d      	bne.n	800e1c0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d104      	bne.n	800e1b6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f968 	bl	800e484 <USB_SetDevSpeed>
 800e1b4:	e008      	b.n	800e1c8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e1b6:	2101      	movs	r1, #1
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 f963 	bl	800e484 <USB_SetDevSpeed>
 800e1be:	e003      	b.n	800e1c8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e1c0:	2103      	movs	r1, #3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 f95e 	bl	800e484 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e1c8:	2110      	movs	r1, #16
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 f8fa 	bl	800e3c4 <USB_FlushTxFifo>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 f924 	bl	800e428 <USB_FlushRxFifo>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	2300      	movs	r3, #0
 800e200:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e208:	461a      	mov	r2, r3
 800e20a:	2300      	movs	r3, #0
 800e20c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e20e:	2300      	movs	r3, #0
 800e210:	613b      	str	r3, [r7, #16]
 800e212:	e043      	b.n	800e29c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	015a      	lsls	r2, r3, #5
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	4413      	add	r3, r2
 800e21c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e226:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e22a:	d118      	bne.n	800e25e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10a      	bne.n	800e248 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	015a      	lsls	r2, r3, #5
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	4413      	add	r3, r2
 800e23a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e23e:	461a      	mov	r2, r3
 800e240:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e244:	6013      	str	r3, [r2, #0]
 800e246:	e013      	b.n	800e270 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	015a      	lsls	r2, r3, #5
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	4413      	add	r3, r2
 800e250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e254:	461a      	mov	r2, r3
 800e256:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e25a:	6013      	str	r3, [r2, #0]
 800e25c:	e008      	b.n	800e270 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	015a      	lsls	r2, r3, #5
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	4413      	add	r3, r2
 800e266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e26a:	461a      	mov	r2, r3
 800e26c:	2300      	movs	r3, #0
 800e26e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	015a      	lsls	r2, r3, #5
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	4413      	add	r3, r2
 800e278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e27c:	461a      	mov	r2, r3
 800e27e:	2300      	movs	r3, #0
 800e280:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	015a      	lsls	r2, r3, #5
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	4413      	add	r3, r2
 800e28a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e28e:	461a      	mov	r2, r3
 800e290:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e294:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	3301      	adds	r3, #1
 800e29a:	613b      	str	r3, [r7, #16]
 800e29c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d3b5      	bcc.n	800e214 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	613b      	str	r3, [r7, #16]
 800e2ac:	e043      	b.n	800e336 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	015a      	lsls	r2, r3, #5
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e2c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2c4:	d118      	bne.n	800e2f8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d10a      	bne.n	800e2e2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	015a      	lsls	r2, r3, #5
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2d8:	461a      	mov	r2, r3
 800e2da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e2de:	6013      	str	r3, [r2, #0]
 800e2e0:	e013      	b.n	800e30a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	015a      	lsls	r2, r3, #5
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e2f4:	6013      	str	r3, [r2, #0]
 800e2f6:	e008      	b.n	800e30a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	015a      	lsls	r2, r3, #5
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	4413      	add	r3, r2
 800e300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e304:	461a      	mov	r2, r3
 800e306:	2300      	movs	r3, #0
 800e308:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	015a      	lsls	r2, r3, #5
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	4413      	add	r3, r2
 800e312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e316:	461a      	mov	r2, r3
 800e318:	2300      	movs	r3, #0
 800e31a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	015a      	lsls	r2, r3, #5
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	4413      	add	r3, r2
 800e324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e328:	461a      	mov	r2, r3
 800e32a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e32e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	3301      	adds	r3, #1
 800e334:	613b      	str	r3, [r7, #16]
 800e336:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e33a:	461a      	mov	r2, r3
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	4293      	cmp	r3, r2
 800e340:	d3b5      	bcc.n	800e2ae <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e354:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e362:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d105      	bne.n	800e378 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	699b      	ldr	r3, [r3, #24]
 800e370:	f043 0210 	orr.w	r2, r3, #16
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	699a      	ldr	r2, [r3, #24]
 800e37c:	4b0f      	ldr	r3, [pc, #60]	@ (800e3bc <USB_DevInit+0x2b4>)
 800e37e:	4313      	orrs	r3, r2
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e384:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d005      	beq.n	800e398 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	f043 0208 	orr.w	r2, r3, #8
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e398:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d105      	bne.n	800e3ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	699a      	ldr	r2, [r3, #24]
 800e3a4:	4b06      	ldr	r3, [pc, #24]	@ (800e3c0 <USB_DevInit+0x2b8>)
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3718      	adds	r7, #24
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3b8:	b004      	add	sp, #16
 800e3ba:	4770      	bx	lr
 800e3bc:	803c3800 	.word	0x803c3800
 800e3c0:	40000004 	.word	0x40000004

0800e3c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e3de:	d901      	bls.n	800e3e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e3e0:	2303      	movs	r3, #3
 800e3e2:	e01b      	b.n	800e41c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	691b      	ldr	r3, [r3, #16]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	daf2      	bge.n	800e3d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	019b      	lsls	r3, r3, #6
 800e3f4:	f043 0220 	orr.w	r2, r3, #32
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	3301      	adds	r3, #1
 800e400:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e408:	d901      	bls.n	800e40e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e40a:	2303      	movs	r3, #3
 800e40c:	e006      	b.n	800e41c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	691b      	ldr	r3, [r3, #16]
 800e412:	f003 0320 	and.w	r3, r3, #32
 800e416:	2b20      	cmp	r3, #32
 800e418:	d0f0      	beq.n	800e3fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e428:	b480      	push	{r7}
 800e42a:	b085      	sub	sp, #20
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e430:	2300      	movs	r3, #0
 800e432:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3301      	adds	r3, #1
 800e438:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e440:	d901      	bls.n	800e446 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e442:	2303      	movs	r3, #3
 800e444:	e018      	b.n	800e478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	daf2      	bge.n	800e434 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e44e:	2300      	movs	r3, #0
 800e450:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2210      	movs	r2, #16
 800e456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	3301      	adds	r3, #1
 800e45c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e464:	d901      	bls.n	800e46a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e466:	2303      	movs	r3, #3
 800e468:	e006      	b.n	800e478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	f003 0310 	and.w	r3, r3, #16
 800e472:	2b10      	cmp	r3, #16
 800e474:	d0f0      	beq.n	800e458 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3714      	adds	r7, #20
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr

0800e484 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	460b      	mov	r3, r1
 800e48e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	78fb      	ldrb	r3, [r7, #3]
 800e49e:	68f9      	ldr	r1, [r7, #12]
 800e4a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3714      	adds	r7, #20
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e4b6:	b480      	push	{r7}
 800e4b8:	b087      	sub	sp, #28
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	f003 0306 	and.w	r3, r3, #6
 800e4ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d102      	bne.n	800e4dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	75fb      	strb	r3, [r7, #23]
 800e4da:	e00a      	b.n	800e4f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d002      	beq.n	800e4e8 <USB_GetDevSpeed+0x32>
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2b06      	cmp	r3, #6
 800e4e6:	d102      	bne.n	800e4ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e4e8:	2302      	movs	r3, #2
 800e4ea:	75fb      	strb	r3, [r7, #23]
 800e4ec:	e001      	b.n	800e4f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e4ee:	230f      	movs	r3, #15
 800e4f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	371c      	adds	r7, #28
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e500:	b480      	push	{r7}
 800e502:	b087      	sub	sp, #28
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e50a:	2300      	movs	r3, #0
 800e50c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	785b      	ldrb	r3, [r3, #1]
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d14a      	bne.n	800e5b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	015a      	lsls	r2, r3, #5
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	4413      	add	r3, r2
 800e528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e532:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e536:	f040 8086 	bne.w	800e646 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	015a      	lsls	r2, r3, #5
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	4413      	add	r3, r2
 800e544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	7812      	ldrb	r2, [r2, #0]
 800e54e:	0151      	lsls	r1, r2, #5
 800e550:	693a      	ldr	r2, [r7, #16]
 800e552:	440a      	add	r2, r1
 800e554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e558:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e55c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	015a      	lsls	r2, r3, #5
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	4413      	add	r3, r2
 800e568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	7812      	ldrb	r2, [r2, #0]
 800e572:	0151      	lsls	r1, r2, #5
 800e574:	693a      	ldr	r2, [r7, #16]
 800e576:	440a      	add	r2, r1
 800e578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e57c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e580:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	3301      	adds	r3, #1
 800e586:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e58e:	4293      	cmp	r3, r2
 800e590:	d902      	bls.n	800e598 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	75fb      	strb	r3, [r7, #23]
          break;
 800e596:	e056      	b.n	800e646 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	015a      	lsls	r2, r3, #5
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5b0:	d0e7      	beq.n	800e582 <USB_EPStopXfer+0x82>
 800e5b2:	e048      	b.n	800e646 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	015a      	lsls	r2, r3, #5
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	4413      	add	r3, r2
 800e5be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5cc:	d13b      	bne.n	800e646 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	015a      	lsls	r2, r3, #5
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	683a      	ldr	r2, [r7, #0]
 800e5e0:	7812      	ldrb	r2, [r2, #0]
 800e5e2:	0151      	lsls	r1, r2, #5
 800e5e4:	693a      	ldr	r2, [r7, #16]
 800e5e6:	440a      	add	r2, r1
 800e5e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e5f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	015a      	lsls	r2, r3, #5
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	7812      	ldrb	r2, [r2, #0]
 800e606:	0151      	lsls	r1, r2, #5
 800e608:	693a      	ldr	r2, [r7, #16]
 800e60a:	440a      	add	r2, r1
 800e60c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e610:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e614:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	3301      	adds	r3, #1
 800e61a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e622:	4293      	cmp	r3, r2
 800e624:	d902      	bls.n	800e62c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e626:	2301      	movs	r3, #1
 800e628:	75fb      	strb	r3, [r7, #23]
          break;
 800e62a:	e00c      	b.n	800e646 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	015a      	lsls	r2, r3, #5
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	4413      	add	r3, r2
 800e636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e644:	d0e7      	beq.n	800e616 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e646:	7dfb      	ldrb	r3, [r7, #23]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	371c      	adds	r7, #28
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr

0800e654 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e654:	b480      	push	{r7}
 800e656:	b089      	sub	sp, #36	@ 0x24
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	4611      	mov	r1, r2
 800e660:	461a      	mov	r2, r3
 800e662:	460b      	mov	r3, r1
 800e664:	71fb      	strb	r3, [r7, #7]
 800e666:	4613      	mov	r3, r2
 800e668:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e672:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e676:	2b00      	cmp	r3, #0
 800e678:	d123      	bne.n	800e6c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e67a:	88bb      	ldrh	r3, [r7, #4]
 800e67c:	3303      	adds	r3, #3
 800e67e:	089b      	lsrs	r3, r3, #2
 800e680:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e682:	2300      	movs	r3, #0
 800e684:	61bb      	str	r3, [r7, #24]
 800e686:	e018      	b.n	800e6ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e688:	79fb      	ldrb	r3, [r7, #7]
 800e68a:	031a      	lsls	r2, r3, #12
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	4413      	add	r3, r2
 800e690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e694:	461a      	mov	r2, r3
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6a8:	69fb      	ldr	r3, [r7, #28]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	61bb      	str	r3, [r7, #24]
 800e6ba:	69ba      	ldr	r2, [r7, #24]
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d3e2      	bcc.n	800e688 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e6c2:	2300      	movs	r3, #0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3724      	adds	r7, #36	@ 0x24
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b08b      	sub	sp, #44	@ 0x2c
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e6e6:	88fb      	ldrh	r3, [r7, #6]
 800e6e8:	089b      	lsrs	r3, r3, #2
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e6ee:	88fb      	ldrh	r3, [r7, #6]
 800e6f0:	f003 0303 	and.w	r3, r3, #3
 800e6f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	623b      	str	r3, [r7, #32]
 800e6fa:	e014      	b.n	800e726 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e706:	601a      	str	r2, [r3, #0]
    pDest++;
 800e708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e70a:	3301      	adds	r3, #1
 800e70c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e710:	3301      	adds	r3, #1
 800e712:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e716:	3301      	adds	r3, #1
 800e718:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71c:	3301      	adds	r3, #1
 800e71e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e720:	6a3b      	ldr	r3, [r7, #32]
 800e722:	3301      	adds	r3, #1
 800e724:	623b      	str	r3, [r7, #32]
 800e726:	6a3a      	ldr	r2, [r7, #32]
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d3e6      	bcc.n	800e6fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e72e:	8bfb      	ldrh	r3, [r7, #30]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d01e      	beq.n	800e772 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e734:	2300      	movs	r3, #0
 800e736:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e73e:	461a      	mov	r2, r3
 800e740:	f107 0310 	add.w	r3, r7, #16
 800e744:	6812      	ldr	r2, [r2, #0]
 800e746:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e748:	693a      	ldr	r2, [r7, #16]
 800e74a:	6a3b      	ldr	r3, [r7, #32]
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	00db      	lsls	r3, r3, #3
 800e750:	fa22 f303 	lsr.w	r3, r2, r3
 800e754:	b2da      	uxtb	r2, r3
 800e756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e758:	701a      	strb	r2, [r3, #0]
      i++;
 800e75a:	6a3b      	ldr	r3, [r7, #32]
 800e75c:	3301      	adds	r3, #1
 800e75e:	623b      	str	r3, [r7, #32]
      pDest++;
 800e760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e762:	3301      	adds	r3, #1
 800e764:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e766:	8bfb      	ldrh	r3, [r7, #30]
 800e768:	3b01      	subs	r3, #1
 800e76a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e76c:	8bfb      	ldrh	r3, [r7, #30]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1ea      	bne.n	800e748 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e774:	4618      	mov	r0, r3
 800e776:	372c      	adds	r7, #44	@ 0x2c
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e780:	b480      	push	{r7}
 800e782:	b085      	sub	sp, #20
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e79a:	f023 0303 	bic.w	r3, r3, #3
 800e79e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e7ae:	f043 0302 	orr.w	r3, r3, #2
 800e7b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3714      	adds	r7, #20
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e7c2:	b480      	push	{r7}
 800e7c4:	b085      	sub	sp, #20
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	695b      	ldr	r3, [r3, #20]
 800e7ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	699b      	ldr	r3, [r3, #24]
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	4013      	ands	r3, r2
 800e7d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e7da:	68fb      	ldr	r3, [r7, #12]
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3714      	adds	r7, #20
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7fa:	699b      	ldr	r3, [r3, #24]
 800e7fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e804:	69db      	ldr	r3, [r3, #28]
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	4013      	ands	r3, r2
 800e80a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	0c1b      	lsrs	r3, r3, #16
}
 800e810:	4618      	mov	r0, r3
 800e812:	3714      	adds	r7, #20
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b085      	sub	sp, #20
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e82e:	699b      	ldr	r3, [r3, #24]
 800e830:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e838:	69db      	ldr	r3, [r3, #28]
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	4013      	ands	r3, r2
 800e83e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	b29b      	uxth	r3, r3
}
 800e844:	4618      	mov	r0, r3
 800e846:	3714      	adds	r7, #20
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	460b      	mov	r3, r1
 800e85a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e860:	78fb      	ldrb	r3, [r7, #3]
 800e862:	015a      	lsls	r2, r3, #5
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	4413      	add	r3, r2
 800e868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e876:	695b      	ldr	r3, [r3, #20]
 800e878:	68ba      	ldr	r2, [r7, #8]
 800e87a:	4013      	ands	r3, r2
 800e87c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e87e:	68bb      	ldr	r3, [r7, #8]
}
 800e880:	4618      	mov	r0, r3
 800e882:	3714      	adds	r7, #20
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b087      	sub	sp, #28
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	460b      	mov	r3, r1
 800e896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8a2:	691b      	ldr	r3, [r3, #16]
 800e8a4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8ae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	f003 030f 	and.w	r3, r3, #15
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	fa22 f303 	lsr.w	r3, r2, r3
 800e8bc:	01db      	lsls	r3, r3, #7
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	693a      	ldr	r2, [r7, #16]
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e8c6:	78fb      	ldrb	r3, [r7, #3]
 800e8c8:	015a      	lsls	r2, r3, #5
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	693a      	ldr	r2, [r7, #16]
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e8da:	68bb      	ldr	r3, [r7, #8]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	371c      	adds	r7, #28
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	695b      	ldr	r3, [r3, #20]
 800e8f4:	f003 0301 	and.w	r3, r3, #1
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	370c      	adds	r7, #12
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr

0800e904 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e91e:	4619      	mov	r1, r3
 800e920:	4b09      	ldr	r3, [pc, #36]	@ (800e948 <USB_ActivateSetup+0x44>)
 800e922:	4013      	ands	r3, r2
 800e924:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	68fa      	ldr	r2, [r7, #12]
 800e930:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e938:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3714      	adds	r7, #20
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	fffff800 	.word	0xfffff800

0800e94c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b087      	sub	sp, #28
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	460b      	mov	r3, r1
 800e956:	607a      	str	r2, [r7, #4]
 800e958:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	333c      	adds	r3, #60	@ 0x3c
 800e962:	3304      	adds	r3, #4
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	4a26      	ldr	r2, [pc, #152]	@ (800ea04 <USB_EP0_OutStart+0xb8>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d90a      	bls.n	800e986 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e97c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e980:	d101      	bne.n	800e986 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	e037      	b.n	800e9f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e98c:	461a      	mov	r2, r3
 800e98e:	2300      	movs	r3, #0
 800e990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	697a      	ldr	r2, [r7, #20]
 800e99c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e9a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	697a      	ldr	r2, [r7, #20]
 800e9b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9b4:	f043 0318 	orr.w	r3, r3, #24
 800e9b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9c0:	691b      	ldr	r3, [r3, #16]
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e9cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e9ce:	7afb      	ldrb	r3, [r7, #11]
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d10f      	bne.n	800e9f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9da:	461a      	mov	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	697a      	ldr	r2, [r7, #20]
 800e9ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800e9f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e9f4:	2300      	movs	r3, #0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	371c      	adds	r7, #28
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	4f54300a 	.word	0x4f54300a

0800ea08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ea10:	2300      	movs	r3, #0
 800ea12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3301      	adds	r3, #1
 800ea18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ea20:	d901      	bls.n	800ea26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ea22:	2303      	movs	r3, #3
 800ea24:	e022      	b.n	800ea6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	691b      	ldr	r3, [r3, #16]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	daf2      	bge.n	800ea14 <USB_CoreReset+0xc>

  count = 10U;
 800ea2e:	230a      	movs	r3, #10
 800ea30:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800ea32:	e002      	b.n	800ea3a <USB_CoreReset+0x32>
  {
    count--;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	3b01      	subs	r3, #1
 800ea38:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1f9      	bne.n	800ea34 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	691b      	ldr	r3, [r3, #16]
 800ea44:	f043 0201 	orr.w	r2, r3, #1
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ea58:	d901      	bls.n	800ea5e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800ea5a:	2303      	movs	r3, #3
 800ea5c:	e006      	b.n	800ea6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	691b      	ldr	r3, [r3, #16]
 800ea62:	f003 0301 	and.w	r3, r3, #1
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d0f0      	beq.n	800ea4c <USB_CoreReset+0x44>

  return HAL_OK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3714      	adds	r7, #20
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	4603      	mov	r3, r0
 800ea80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ea82:	2300      	movs	r3, #0
 800ea84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ea86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea8a:	2b84      	cmp	r3, #132	@ 0x84
 800ea8c:	d005      	beq.n	800ea9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ea8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	4413      	add	r3, r2
 800ea96:	3303      	adds	r3, #3
 800ea98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3714      	adds	r7, #20
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800eaac:	f000 fafa 	bl	800f0a4 <vTaskStartScheduler>
  
  return osOK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eab8:	b089      	sub	sp, #36	@ 0x24
 800eaba:	af04      	add	r7, sp, #16
 800eabc:	6078      	str	r0, [r7, #4]
 800eabe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	695b      	ldr	r3, [r3, #20]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d020      	beq.n	800eb0a <osThreadCreate+0x54>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d01c      	beq.n	800eb0a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	685c      	ldr	r4, [r3, #4]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	691e      	ldr	r6, [r3, #16]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7ff ffc8 	bl	800ea78 <makeFreeRtosPriority>
 800eae8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	695b      	ldr	r3, [r3, #20]
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eaf2:	9202      	str	r2, [sp, #8]
 800eaf4:	9301      	str	r3, [sp, #4]
 800eaf6:	9100      	str	r1, [sp, #0]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	4632      	mov	r2, r6
 800eafc:	4629      	mov	r1, r5
 800eafe:	4620      	mov	r0, r4
 800eb00:	f000 f8ed 	bl	800ecde <xTaskCreateStatic>
 800eb04:	4603      	mov	r3, r0
 800eb06:	60fb      	str	r3, [r7, #12]
 800eb08:	e01c      	b.n	800eb44 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	685c      	ldr	r4, [r3, #4]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb16:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7ff ffaa 	bl	800ea78 <makeFreeRtosPriority>
 800eb24:	4602      	mov	r2, r0
 800eb26:	f107 030c 	add.w	r3, r7, #12
 800eb2a:	9301      	str	r3, [sp, #4]
 800eb2c:	9200      	str	r2, [sp, #0]
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	4632      	mov	r2, r6
 800eb32:	4629      	mov	r1, r5
 800eb34:	4620      	mov	r0, r4
 800eb36:	f000 f938 	bl	800edaa <xTaskCreate>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d001      	beq.n	800eb44 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800eb40:	2300      	movs	r3, #0
 800eb42:	e000      	b.n	800eb46 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800eb44:	68fb      	ldr	r3, [r7, #12]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3714      	adds	r7, #20
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b084      	sub	sp, #16
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d001      	beq.n	800eb64 <osDelay+0x16>
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	e000      	b.n	800eb66 <osDelay+0x18>
 800eb64:	2301      	movs	r3, #1
 800eb66:	4618      	mov	r0, r3
 800eb68:	f000 fa64 	bl	800f034 <vTaskDelay>
  
  return osOK;
 800eb6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eb76:	b480      	push	{r7}
 800eb78:	b083      	sub	sp, #12
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f103 0208 	add.w	r2, r3, #8
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb8e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f103 0208 	add.w	r2, r3, #8
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f103 0208 	add.w	r2, r3, #8
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2200      	movs	r2, #0
 800eba8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ebaa:	bf00      	nop
 800ebac:	370c      	adds	r7, #12
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr

0800ebb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ebb6:	b480      	push	{r7}
 800ebb8:	b083      	sub	sp, #12
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ebc4:	bf00      	nop
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	689a      	ldr	r2, [r3, #8]
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	683a      	ldr	r2, [r7, #0]
 800ebfa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	1c5a      	adds	r2, r3, #1
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	601a      	str	r2, [r3, #0]
}
 800ec0c:	bf00      	nop
 800ec0e:	3714      	adds	r7, #20
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr

0800ec18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b085      	sub	sp, #20
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec2e:	d103      	bne.n	800ec38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	691b      	ldr	r3, [r3, #16]
 800ec34:	60fb      	str	r3, [r7, #12]
 800ec36:	e00c      	b.n	800ec52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	3308      	adds	r3, #8
 800ec3c:	60fb      	str	r3, [r7, #12]
 800ec3e:	e002      	b.n	800ec46 <vListInsert+0x2e>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	60fb      	str	r3, [r7, #12]
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	68ba      	ldr	r2, [r7, #8]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d2f6      	bcs.n	800ec40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	685a      	ldr	r2, [r3, #4]
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	1c5a      	adds	r2, r3, #1
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	601a      	str	r2, [r3, #0]
}
 800ec7e:	bf00      	nop
 800ec80:	3714      	adds	r7, #20
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr

0800ec8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ec8a:	b480      	push	{r7}
 800ec8c:	b085      	sub	sp, #20
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	691b      	ldr	r3, [r3, #16]
 800ec96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	6892      	ldr	r2, [r2, #8]
 800eca0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	689b      	ldr	r3, [r3, #8]
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	6852      	ldr	r2, [r2, #4]
 800ecaa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d103      	bne.n	800ecbe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	689a      	ldr	r2, [r3, #8]
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	1e5a      	subs	r2, r3, #1
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3714      	adds	r7, #20
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr

0800ecde <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b08e      	sub	sp, #56	@ 0x38
 800ece2:	af04      	add	r7, sp, #16
 800ece4:	60f8      	str	r0, [r7, #12]
 800ece6:	60b9      	str	r1, [r7, #8]
 800ece8:	607a      	str	r2, [r7, #4]
 800ecea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ecec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10d      	bne.n	800ed0e <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ecf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf6:	b672      	cpsid	i
 800ecf8:	f383 8811 	msr	BASEPRI, r3
 800ecfc:	f3bf 8f6f 	isb	sy
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	b662      	cpsie	i
 800ed06:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ed08:	bf00      	nop
 800ed0a:	bf00      	nop
 800ed0c:	e7fd      	b.n	800ed0a <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ed0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10d      	bne.n	800ed30 <xTaskCreateStatic+0x52>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed18:	b672      	cpsid	i
 800ed1a:	f383 8811 	msr	BASEPRI, r3
 800ed1e:	f3bf 8f6f 	isb	sy
 800ed22:	f3bf 8f4f 	dsb	sy
 800ed26:	b662      	cpsie	i
 800ed28:	61fb      	str	r3, [r7, #28]
}
 800ed2a:	bf00      	nop
 800ed2c:	bf00      	nop
 800ed2e:	e7fd      	b.n	800ed2c <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed30:	2358      	movs	r3, #88	@ 0x58
 800ed32:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	2b58      	cmp	r3, #88	@ 0x58
 800ed38:	d00d      	beq.n	800ed56 <xTaskCreateStatic+0x78>
	__asm volatile
 800ed3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed3e:	b672      	cpsid	i
 800ed40:	f383 8811 	msr	BASEPRI, r3
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	f3bf 8f4f 	dsb	sy
 800ed4c:	b662      	cpsie	i
 800ed4e:	61bb      	str	r3, [r7, #24]
}
 800ed50:	bf00      	nop
 800ed52:	bf00      	nop
 800ed54:	e7fd      	b.n	800ed52 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d01e      	beq.n	800ed9c <xTaskCreateStatic+0xbe>
 800ed5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d01b      	beq.n	800ed9c <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed66:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ed68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed6c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed70:	2202      	movs	r2, #2
 800ed72:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ed76:	2300      	movs	r3, #0
 800ed78:	9303      	str	r3, [sp, #12]
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7c:	9302      	str	r3, [sp, #8]
 800ed7e:	f107 0314 	add.w	r3, r7, #20
 800ed82:	9301      	str	r3, [sp, #4]
 800ed84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed86:	9300      	str	r3, [sp, #0]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	68b9      	ldr	r1, [r7, #8]
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f000 f850 	bl	800ee34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed96:	f000 f8e3 	bl	800ef60 <prvAddNewTaskToReadyList>
 800ed9a:	e001      	b.n	800eda0 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eda0:	697b      	ldr	r3, [r7, #20]
	}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3728      	adds	r7, #40	@ 0x28
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b08c      	sub	sp, #48	@ 0x30
 800edae:	af04      	add	r7, sp, #16
 800edb0:	60f8      	str	r0, [r7, #12]
 800edb2:	60b9      	str	r1, [r7, #8]
 800edb4:	603b      	str	r3, [r7, #0]
 800edb6:	4613      	mov	r3, r2
 800edb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800edba:	88fb      	ldrh	r3, [r7, #6]
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4618      	mov	r0, r3
 800edc0:	f000 fefc 	bl	800fbbc <pvPortMalloc>
 800edc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00e      	beq.n	800edea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800edcc:	2058      	movs	r0, #88	@ 0x58
 800edce:	f000 fef5 	bl	800fbbc <pvPortMalloc>
 800edd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d003      	beq.n	800ede2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	697a      	ldr	r2, [r7, #20]
 800edde:	631a      	str	r2, [r3, #48]	@ 0x30
 800ede0:	e005      	b.n	800edee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ede2:	6978      	ldr	r0, [r7, #20]
 800ede4:	f000 ffbc 	bl	800fd60 <vPortFree>
 800ede8:	e001      	b.n	800edee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800edea:	2300      	movs	r3, #0
 800edec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d017      	beq.n	800ee24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	2200      	movs	r2, #0
 800edf8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800edfc:	88fa      	ldrh	r2, [r7, #6]
 800edfe:	2300      	movs	r3, #0
 800ee00:	9303      	str	r3, [sp, #12]
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	9302      	str	r3, [sp, #8]
 800ee06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee08:	9301      	str	r3, [sp, #4]
 800ee0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	68b9      	ldr	r1, [r7, #8]
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f000 f80e 	bl	800ee34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee18:	69f8      	ldr	r0, [r7, #28]
 800ee1a:	f000 f8a1 	bl	800ef60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	61bb      	str	r3, [r7, #24]
 800ee22:	e002      	b.n	800ee2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ee24:	f04f 33ff 	mov.w	r3, #4294967295
 800ee28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ee2a:	69bb      	ldr	r3, [r7, #24]
	}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3720      	adds	r7, #32
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b088      	sub	sp, #32
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	607a      	str	r2, [r7, #4]
 800ee40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ee42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	21a5      	movs	r1, #165	@ 0xa5
 800ee4e:	f001 ff97 	bl	8010d80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ee52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee56:	6879      	ldr	r1, [r7, #4]
 800ee58:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ee5c:	440b      	add	r3, r1
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	f023 0307 	bic.w	r3, r3, #7
 800ee6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	f003 0307 	and.w	r3, r3, #7
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00d      	beq.n	800ee92 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800ee76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee7a:	b672      	cpsid	i
 800ee7c:	f383 8811 	msr	BASEPRI, r3
 800ee80:	f3bf 8f6f 	isb	sy
 800ee84:	f3bf 8f4f 	dsb	sy
 800ee88:	b662      	cpsie	i
 800ee8a:	617b      	str	r3, [r7, #20]
}
 800ee8c:	bf00      	nop
 800ee8e:	bf00      	nop
 800ee90:	e7fd      	b.n	800ee8e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d01f      	beq.n	800eed8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee98:	2300      	movs	r3, #0
 800ee9a:	61fb      	str	r3, [r7, #28]
 800ee9c:	e012      	b.n	800eec4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ee9e:	68ba      	ldr	r2, [r7, #8]
 800eea0:	69fb      	ldr	r3, [r7, #28]
 800eea2:	4413      	add	r3, r2
 800eea4:	7819      	ldrb	r1, [r3, #0]
 800eea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	4413      	add	r3, r2
 800eeac:	3334      	adds	r3, #52	@ 0x34
 800eeae:	460a      	mov	r2, r1
 800eeb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eeb2:	68ba      	ldr	r2, [r7, #8]
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d006      	beq.n	800eecc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	3301      	adds	r3, #1
 800eec2:	61fb      	str	r3, [r7, #28]
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	2b0f      	cmp	r3, #15
 800eec8:	d9e9      	bls.n	800ee9e <prvInitialiseNewTask+0x6a>
 800eeca:	e000      	b.n	800eece <prvInitialiseNewTask+0x9a>
			{
				break;
 800eecc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed0:	2200      	movs	r2, #0
 800eed2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eed6:	e003      	b.n	800eee0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeda:	2200      	movs	r2, #0
 800eedc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eee2:	2b06      	cmp	r3, #6
 800eee4:	d901      	bls.n	800eeea <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eee6:	2306      	movs	r3, #6
 800eee8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eeea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eeee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eef4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800eef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef8:	2200      	movs	r2, #0
 800eefa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eefe:	3304      	adds	r3, #4
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7ff fe58 	bl	800ebb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef08:	3318      	adds	r3, #24
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7ff fe53 	bl	800ebb6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ef10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef18:	f1c3 0207 	rsb	r2, r3, #7
 800ef1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ef20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef24:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ef26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef28:	2200      	movs	r2, #0
 800ef2a:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2e:	2200      	movs	r2, #0
 800ef30:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef34:	2200      	movs	r2, #0
 800ef36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	68f9      	ldr	r1, [r7, #12]
 800ef3e:	69b8      	ldr	r0, [r7, #24]
 800ef40:	f000 fc44 	bl	800f7cc <pxPortInitialiseStack>
 800ef44:	4602      	mov	r2, r0
 800ef46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ef4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d002      	beq.n	800ef56 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef56:	bf00      	nop
 800ef58:	3720      	adds	r7, #32
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
	...

0800ef60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ef68:	f000 fd40 	bl	800f9ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ef6c:	4b2a      	ldr	r3, [pc, #168]	@ (800f018 <prvAddNewTaskToReadyList+0xb8>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	3301      	adds	r3, #1
 800ef72:	4a29      	ldr	r2, [pc, #164]	@ (800f018 <prvAddNewTaskToReadyList+0xb8>)
 800ef74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ef76:	4b29      	ldr	r3, [pc, #164]	@ (800f01c <prvAddNewTaskToReadyList+0xbc>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d109      	bne.n	800ef92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ef7e:	4a27      	ldr	r2, [pc, #156]	@ (800f01c <prvAddNewTaskToReadyList+0xbc>)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ef84:	4b24      	ldr	r3, [pc, #144]	@ (800f018 <prvAddNewTaskToReadyList+0xb8>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d110      	bne.n	800efae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ef8c:	f000 faf8 	bl	800f580 <prvInitialiseTaskLists>
 800ef90:	e00d      	b.n	800efae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ef92:	4b23      	ldr	r3, [pc, #140]	@ (800f020 <prvAddNewTaskToReadyList+0xc0>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d109      	bne.n	800efae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ef9a:	4b20      	ldr	r3, [pc, #128]	@ (800f01c <prvAddNewTaskToReadyList+0xbc>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d802      	bhi.n	800efae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800efa8:	4a1c      	ldr	r2, [pc, #112]	@ (800f01c <prvAddNewTaskToReadyList+0xbc>)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800efae:	4b1d      	ldr	r3, [pc, #116]	@ (800f024 <prvAddNewTaskToReadyList+0xc4>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	3301      	adds	r3, #1
 800efb4:	4a1b      	ldr	r2, [pc, #108]	@ (800f024 <prvAddNewTaskToReadyList+0xc4>)
 800efb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efbc:	2201      	movs	r2, #1
 800efbe:	409a      	lsls	r2, r3
 800efc0:	4b19      	ldr	r3, [pc, #100]	@ (800f028 <prvAddNewTaskToReadyList+0xc8>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4313      	orrs	r3, r2
 800efc6:	4a18      	ldr	r2, [pc, #96]	@ (800f028 <prvAddNewTaskToReadyList+0xc8>)
 800efc8:	6013      	str	r3, [r2, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efce:	4613      	mov	r3, r2
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	4413      	add	r3, r2
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	4a15      	ldr	r2, [pc, #84]	@ (800f02c <prvAddNewTaskToReadyList+0xcc>)
 800efd8:	441a      	add	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	3304      	adds	r3, #4
 800efde:	4619      	mov	r1, r3
 800efe0:	4610      	mov	r0, r2
 800efe2:	f7ff fdf5 	bl	800ebd0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800efe6:	f000 fd37 	bl	800fa58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800efea:	4b0d      	ldr	r3, [pc, #52]	@ (800f020 <prvAddNewTaskToReadyList+0xc0>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00e      	beq.n	800f010 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eff2:	4b0a      	ldr	r3, [pc, #40]	@ (800f01c <prvAddNewTaskToReadyList+0xbc>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800effc:	429a      	cmp	r2, r3
 800effe:	d207      	bcs.n	800f010 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f000:	4b0b      	ldr	r3, [pc, #44]	@ (800f030 <prvAddNewTaskToReadyList+0xd0>)
 800f002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f006:	601a      	str	r2, [r3, #0]
 800f008:	f3bf 8f4f 	dsb	sy
 800f00c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f010:	bf00      	nop
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	200015a0 	.word	0x200015a0
 800f01c:	200014a0 	.word	0x200014a0
 800f020:	200015ac 	.word	0x200015ac
 800f024:	200015bc 	.word	0x200015bc
 800f028:	200015a8 	.word	0x200015a8
 800f02c:	200014a4 	.word	0x200014a4
 800f030:	e000ed04 	.word	0xe000ed04

0800f034 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f03c:	2300      	movs	r3, #0
 800f03e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d01a      	beq.n	800f07c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f046:	4b15      	ldr	r3, [pc, #84]	@ (800f09c <vTaskDelay+0x68>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00d      	beq.n	800f06a <vTaskDelay+0x36>
	__asm volatile
 800f04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f052:	b672      	cpsid	i
 800f054:	f383 8811 	msr	BASEPRI, r3
 800f058:	f3bf 8f6f 	isb	sy
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	b662      	cpsie	i
 800f062:	60bb      	str	r3, [r7, #8]
}
 800f064:	bf00      	nop
 800f066:	bf00      	nop
 800f068:	e7fd      	b.n	800f066 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f06a:	f000 f881 	bl	800f170 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f06e:	2100      	movs	r1, #0
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 fb45 	bl	800f700 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f076:	f000 f889 	bl	800f18c <xTaskResumeAll>
 800f07a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d107      	bne.n	800f092 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f082:	4b07      	ldr	r3, [pc, #28]	@ (800f0a0 <vTaskDelay+0x6c>)
 800f084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f088:	601a      	str	r2, [r3, #0]
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f092:	bf00      	nop
 800f094:	3710      	adds	r7, #16
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	200015c8 	.word	0x200015c8
 800f0a0:	e000ed04 	.word	0xe000ed04

0800f0a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b08a      	sub	sp, #40	@ 0x28
 800f0a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f0b2:	463a      	mov	r2, r7
 800f0b4:	1d39      	adds	r1, r7, #4
 800f0b6:	f107 0308 	add.w	r3, r7, #8
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7f1 fb28 	bl	8000710 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f0c0:	6839      	ldr	r1, [r7, #0]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	9202      	str	r2, [sp, #8]
 800f0c8:	9301      	str	r3, [sp, #4]
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	9300      	str	r3, [sp, #0]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	460a      	mov	r2, r1
 800f0d2:	4921      	ldr	r1, [pc, #132]	@ (800f158 <vTaskStartScheduler+0xb4>)
 800f0d4:	4821      	ldr	r0, [pc, #132]	@ (800f15c <vTaskStartScheduler+0xb8>)
 800f0d6:	f7ff fe02 	bl	800ecde <xTaskCreateStatic>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	4a20      	ldr	r2, [pc, #128]	@ (800f160 <vTaskStartScheduler+0xbc>)
 800f0de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f0e0:	4b1f      	ldr	r3, [pc, #124]	@ (800f160 <vTaskStartScheduler+0xbc>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	617b      	str	r3, [r7, #20]
 800f0ec:	e001      	b.n	800f0f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d118      	bne.n	800f12a <vTaskStartScheduler+0x86>
	__asm volatile
 800f0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0fc:	b672      	cpsid	i
 800f0fe:	f383 8811 	msr	BASEPRI, r3
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	b662      	cpsie	i
 800f10c:	613b      	str	r3, [r7, #16]
}
 800f10e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f110:	4b14      	ldr	r3, [pc, #80]	@ (800f164 <vTaskStartScheduler+0xc0>)
 800f112:	f04f 32ff 	mov.w	r2, #4294967295
 800f116:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f118:	4b13      	ldr	r3, [pc, #76]	@ (800f168 <vTaskStartScheduler+0xc4>)
 800f11a:	2201      	movs	r2, #1
 800f11c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f11e:	4b13      	ldr	r3, [pc, #76]	@ (800f16c <vTaskStartScheduler+0xc8>)
 800f120:	2200      	movs	r2, #0
 800f122:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f124:	f000 fbe4 	bl	800f8f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f128:	e011      	b.n	800f14e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f130:	d10d      	bne.n	800f14e <vTaskStartScheduler+0xaa>
	__asm volatile
 800f132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f136:	b672      	cpsid	i
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	b662      	cpsie	i
 800f146:	60fb      	str	r3, [r7, #12]
}
 800f148:	bf00      	nop
 800f14a:	bf00      	nop
 800f14c:	e7fd      	b.n	800f14a <vTaskStartScheduler+0xa6>
}
 800f14e:	bf00      	nop
 800f150:	3718      	adds	r7, #24
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	08013464 	.word	0x08013464
 800f15c:	0800f54d 	.word	0x0800f54d
 800f160:	200015c4 	.word	0x200015c4
 800f164:	200015c0 	.word	0x200015c0
 800f168:	200015ac 	.word	0x200015ac
 800f16c:	200015a4 	.word	0x200015a4

0800f170 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f170:	b480      	push	{r7}
 800f172:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f174:	4b04      	ldr	r3, [pc, #16]	@ (800f188 <vTaskSuspendAll+0x18>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	3301      	adds	r3, #1
 800f17a:	4a03      	ldr	r2, [pc, #12]	@ (800f188 <vTaskSuspendAll+0x18>)
 800f17c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f17e:	bf00      	nop
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	200015c8 	.word	0x200015c8

0800f18c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f192:	2300      	movs	r3, #0
 800f194:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f196:	2300      	movs	r3, #0
 800f198:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f19a:	4b43      	ldr	r3, [pc, #268]	@ (800f2a8 <xTaskResumeAll+0x11c>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d10d      	bne.n	800f1be <xTaskResumeAll+0x32>
	__asm volatile
 800f1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a6:	b672      	cpsid	i
 800f1a8:	f383 8811 	msr	BASEPRI, r3
 800f1ac:	f3bf 8f6f 	isb	sy
 800f1b0:	f3bf 8f4f 	dsb	sy
 800f1b4:	b662      	cpsie	i
 800f1b6:	603b      	str	r3, [r7, #0]
}
 800f1b8:	bf00      	nop
 800f1ba:	bf00      	nop
 800f1bc:	e7fd      	b.n	800f1ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f1be:	f000 fc15 	bl	800f9ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f1c2:	4b39      	ldr	r3, [pc, #228]	@ (800f2a8 <xTaskResumeAll+0x11c>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	4a37      	ldr	r2, [pc, #220]	@ (800f2a8 <xTaskResumeAll+0x11c>)
 800f1ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1cc:	4b36      	ldr	r3, [pc, #216]	@ (800f2a8 <xTaskResumeAll+0x11c>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d161      	bne.n	800f298 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f1d4:	4b35      	ldr	r3, [pc, #212]	@ (800f2ac <xTaskResumeAll+0x120>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d05d      	beq.n	800f298 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1dc:	e02e      	b.n	800f23c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1de:	4b34      	ldr	r3, [pc, #208]	@ (800f2b0 <xTaskResumeAll+0x124>)
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	3318      	adds	r3, #24
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7ff fd4d 	bl	800ec8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	3304      	adds	r3, #4
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7ff fd48 	bl	800ec8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1fe:	2201      	movs	r2, #1
 800f200:	409a      	lsls	r2, r3
 800f202:	4b2c      	ldr	r3, [pc, #176]	@ (800f2b4 <xTaskResumeAll+0x128>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	4313      	orrs	r3, r2
 800f208:	4a2a      	ldr	r2, [pc, #168]	@ (800f2b4 <xTaskResumeAll+0x128>)
 800f20a:	6013      	str	r3, [r2, #0]
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f210:	4613      	mov	r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	4413      	add	r3, r2
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	4a27      	ldr	r2, [pc, #156]	@ (800f2b8 <xTaskResumeAll+0x12c>)
 800f21a:	441a      	add	r2, r3
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	3304      	adds	r3, #4
 800f220:	4619      	mov	r1, r3
 800f222:	4610      	mov	r0, r2
 800f224:	f7ff fcd4 	bl	800ebd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f22c:	4b23      	ldr	r3, [pc, #140]	@ (800f2bc <xTaskResumeAll+0x130>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f232:	429a      	cmp	r2, r3
 800f234:	d302      	bcc.n	800f23c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f236:	4b22      	ldr	r3, [pc, #136]	@ (800f2c0 <xTaskResumeAll+0x134>)
 800f238:	2201      	movs	r2, #1
 800f23a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f23c:	4b1c      	ldr	r3, [pc, #112]	@ (800f2b0 <xTaskResumeAll+0x124>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1cc      	bne.n	800f1de <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d001      	beq.n	800f24e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f24a:	f000 fa39 	bl	800f6c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f24e:	4b1d      	ldr	r3, [pc, #116]	@ (800f2c4 <xTaskResumeAll+0x138>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d010      	beq.n	800f27c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f25a:	f000 f837 	bl	800f2cc <xTaskIncrementTick>
 800f25e:	4603      	mov	r3, r0
 800f260:	2b00      	cmp	r3, #0
 800f262:	d002      	beq.n	800f26a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f264:	4b16      	ldr	r3, [pc, #88]	@ (800f2c0 <xTaskResumeAll+0x134>)
 800f266:	2201      	movs	r2, #1
 800f268:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	3b01      	subs	r3, #1
 800f26e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d1f1      	bne.n	800f25a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f276:	4b13      	ldr	r3, [pc, #76]	@ (800f2c4 <xTaskResumeAll+0x138>)
 800f278:	2200      	movs	r2, #0
 800f27a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f27c:	4b10      	ldr	r3, [pc, #64]	@ (800f2c0 <xTaskResumeAll+0x134>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d009      	beq.n	800f298 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f284:	2301      	movs	r3, #1
 800f286:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f288:	4b0f      	ldr	r3, [pc, #60]	@ (800f2c8 <xTaskResumeAll+0x13c>)
 800f28a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f28e:	601a      	str	r2, [r3, #0]
 800f290:	f3bf 8f4f 	dsb	sy
 800f294:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f298:	f000 fbde 	bl	800fa58 <vPortExitCritical>

	return xAlreadyYielded;
 800f29c:	68bb      	ldr	r3, [r7, #8]
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3710      	adds	r7, #16
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	200015c8 	.word	0x200015c8
 800f2ac:	200015a0 	.word	0x200015a0
 800f2b0:	20001560 	.word	0x20001560
 800f2b4:	200015a8 	.word	0x200015a8
 800f2b8:	200014a4 	.word	0x200014a4
 800f2bc:	200014a0 	.word	0x200014a0
 800f2c0:	200015b4 	.word	0x200015b4
 800f2c4:	200015b0 	.word	0x200015b0
 800f2c8:	e000ed04 	.word	0xe000ed04

0800f2cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b086      	sub	sp, #24
 800f2d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2d6:	4b50      	ldr	r3, [pc, #320]	@ (800f418 <xTaskIncrementTick+0x14c>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f040 808b 	bne.w	800f3f6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f2e0:	4b4e      	ldr	r3, [pc, #312]	@ (800f41c <xTaskIncrementTick+0x150>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f2e8:	4a4c      	ldr	r2, [pc, #304]	@ (800f41c <xTaskIncrementTick+0x150>)
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d123      	bne.n	800f33c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f2f4:	4b4a      	ldr	r3, [pc, #296]	@ (800f420 <xTaskIncrementTick+0x154>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00d      	beq.n	800f31a <xTaskIncrementTick+0x4e>
	__asm volatile
 800f2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f302:	b672      	cpsid	i
 800f304:	f383 8811 	msr	BASEPRI, r3
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	f3bf 8f4f 	dsb	sy
 800f310:	b662      	cpsie	i
 800f312:	603b      	str	r3, [r7, #0]
}
 800f314:	bf00      	nop
 800f316:	bf00      	nop
 800f318:	e7fd      	b.n	800f316 <xTaskIncrementTick+0x4a>
 800f31a:	4b41      	ldr	r3, [pc, #260]	@ (800f420 <xTaskIncrementTick+0x154>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	60fb      	str	r3, [r7, #12]
 800f320:	4b40      	ldr	r3, [pc, #256]	@ (800f424 <xTaskIncrementTick+0x158>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a3e      	ldr	r2, [pc, #248]	@ (800f420 <xTaskIncrementTick+0x154>)
 800f326:	6013      	str	r3, [r2, #0]
 800f328:	4a3e      	ldr	r2, [pc, #248]	@ (800f424 <xTaskIncrementTick+0x158>)
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6013      	str	r3, [r2, #0]
 800f32e:	4b3e      	ldr	r3, [pc, #248]	@ (800f428 <xTaskIncrementTick+0x15c>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	3301      	adds	r3, #1
 800f334:	4a3c      	ldr	r2, [pc, #240]	@ (800f428 <xTaskIncrementTick+0x15c>)
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	f000 f9c2 	bl	800f6c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f33c:	4b3b      	ldr	r3, [pc, #236]	@ (800f42c <xTaskIncrementTick+0x160>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	693a      	ldr	r2, [r7, #16]
 800f342:	429a      	cmp	r2, r3
 800f344:	d348      	bcc.n	800f3d8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f346:	4b36      	ldr	r3, [pc, #216]	@ (800f420 <xTaskIncrementTick+0x154>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d104      	bne.n	800f35a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f350:	4b36      	ldr	r3, [pc, #216]	@ (800f42c <xTaskIncrementTick+0x160>)
 800f352:	f04f 32ff 	mov.w	r2, #4294967295
 800f356:	601a      	str	r2, [r3, #0]
					break;
 800f358:	e03e      	b.n	800f3d8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f35a:	4b31      	ldr	r3, [pc, #196]	@ (800f420 <xTaskIncrementTick+0x154>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f36a:	693a      	ldr	r2, [r7, #16]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d203      	bcs.n	800f37a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f372:	4a2e      	ldr	r2, [pc, #184]	@ (800f42c <xTaskIncrementTick+0x160>)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f378:	e02e      	b.n	800f3d8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	3304      	adds	r3, #4
 800f37e:	4618      	mov	r0, r3
 800f380:	f7ff fc83 	bl	800ec8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d004      	beq.n	800f396 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	3318      	adds	r3, #24
 800f390:	4618      	mov	r0, r3
 800f392:	f7ff fc7a 	bl	800ec8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f39a:	2201      	movs	r2, #1
 800f39c:	409a      	lsls	r2, r3
 800f39e:	4b24      	ldr	r3, [pc, #144]	@ (800f430 <xTaskIncrementTick+0x164>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	4a22      	ldr	r2, [pc, #136]	@ (800f430 <xTaskIncrementTick+0x164>)
 800f3a6:	6013      	str	r3, [r2, #0]
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	4413      	add	r3, r2
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	4a1f      	ldr	r2, [pc, #124]	@ (800f434 <xTaskIncrementTick+0x168>)
 800f3b6:	441a      	add	r2, r3
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	3304      	adds	r3, #4
 800f3bc:	4619      	mov	r1, r3
 800f3be:	4610      	mov	r0, r2
 800f3c0:	f7ff fc06 	bl	800ebd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3c8:	4b1b      	ldr	r3, [pc, #108]	@ (800f438 <xTaskIncrementTick+0x16c>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d3b9      	bcc.n	800f346 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3d6:	e7b6      	b.n	800f346 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f3d8:	4b17      	ldr	r3, [pc, #92]	@ (800f438 <xTaskIncrementTick+0x16c>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3de:	4915      	ldr	r1, [pc, #84]	@ (800f434 <xTaskIncrementTick+0x168>)
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	4413      	add	r3, r2
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	440b      	add	r3, r1
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d907      	bls.n	800f400 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	617b      	str	r3, [r7, #20]
 800f3f4:	e004      	b.n	800f400 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f3f6:	4b11      	ldr	r3, [pc, #68]	@ (800f43c <xTaskIncrementTick+0x170>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	4a0f      	ldr	r2, [pc, #60]	@ (800f43c <xTaskIncrementTick+0x170>)
 800f3fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f400:	4b0f      	ldr	r3, [pc, #60]	@ (800f440 <xTaskIncrementTick+0x174>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d001      	beq.n	800f40c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f408:	2301      	movs	r3, #1
 800f40a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f40c:	697b      	ldr	r3, [r7, #20]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3718      	adds	r7, #24
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
 800f416:	bf00      	nop
 800f418:	200015c8 	.word	0x200015c8
 800f41c:	200015a4 	.word	0x200015a4
 800f420:	20001558 	.word	0x20001558
 800f424:	2000155c 	.word	0x2000155c
 800f428:	200015b8 	.word	0x200015b8
 800f42c:	200015c0 	.word	0x200015c0
 800f430:	200015a8 	.word	0x200015a8
 800f434:	200014a4 	.word	0x200014a4
 800f438:	200014a0 	.word	0x200014a0
 800f43c:	200015b0 	.word	0x200015b0
 800f440:	200015b4 	.word	0x200015b4

0800f444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b088      	sub	sp, #32
 800f448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f44a:	4b3b      	ldr	r3, [pc, #236]	@ (800f538 <vTaskSwitchContext+0xf4>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d003      	beq.n	800f45a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f452:	4b3a      	ldr	r3, [pc, #232]	@ (800f53c <vTaskSwitchContext+0xf8>)
 800f454:	2201      	movs	r2, #1
 800f456:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f458:	e069      	b.n	800f52e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 800f45a:	4b38      	ldr	r3, [pc, #224]	@ (800f53c <vTaskSwitchContext+0xf8>)
 800f45c:	2200      	movs	r2, #0
 800f45e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f460:	4b37      	ldr	r3, [pc, #220]	@ (800f540 <vTaskSwitchContext+0xfc>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f466:	61fb      	str	r3, [r7, #28]
 800f468:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f46c:	61bb      	str	r3, [r7, #24]
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	69ba      	ldr	r2, [r7, #24]
 800f474:	429a      	cmp	r2, r3
 800f476:	d111      	bne.n	800f49c <vTaskSwitchContext+0x58>
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	3304      	adds	r3, #4
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	69ba      	ldr	r2, [r7, #24]
 800f480:	429a      	cmp	r2, r3
 800f482:	d10b      	bne.n	800f49c <vTaskSwitchContext+0x58>
 800f484:	69fb      	ldr	r3, [r7, #28]
 800f486:	3308      	adds	r3, #8
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	69ba      	ldr	r2, [r7, #24]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d105      	bne.n	800f49c <vTaskSwitchContext+0x58>
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	330c      	adds	r3, #12
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	69ba      	ldr	r2, [r7, #24]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d008      	beq.n	800f4ae <vTaskSwitchContext+0x6a>
 800f49c:	4b28      	ldr	r3, [pc, #160]	@ (800f540 <vTaskSwitchContext+0xfc>)
 800f49e:	681a      	ldr	r2, [r3, #0]
 800f4a0:	4b27      	ldr	r3, [pc, #156]	@ (800f540 <vTaskSwitchContext+0xfc>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	3334      	adds	r3, #52	@ 0x34
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	4610      	mov	r0, r2
 800f4aa:	f7f1 f91e 	bl	80006ea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ae:	4b25      	ldr	r3, [pc, #148]	@ (800f544 <vTaskSwitchContext+0x100>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	fab3 f383 	clz	r3, r3
 800f4ba:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f4bc:	7afb      	ldrb	r3, [r7, #11]
 800f4be:	f1c3 031f 	rsb	r3, r3, #31
 800f4c2:	617b      	str	r3, [r7, #20]
 800f4c4:	4920      	ldr	r1, [pc, #128]	@ (800f548 <vTaskSwitchContext+0x104>)
 800f4c6:	697a      	ldr	r2, [r7, #20]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	4413      	add	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	440b      	add	r3, r1
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d10d      	bne.n	800f4f4 <vTaskSwitchContext+0xb0>
	__asm volatile
 800f4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4dc:	b672      	cpsid	i
 800f4de:	f383 8811 	msr	BASEPRI, r3
 800f4e2:	f3bf 8f6f 	isb	sy
 800f4e6:	f3bf 8f4f 	dsb	sy
 800f4ea:	b662      	cpsie	i
 800f4ec:	607b      	str	r3, [r7, #4]
}
 800f4ee:	bf00      	nop
 800f4f0:	bf00      	nop
 800f4f2:	e7fd      	b.n	800f4f0 <vTaskSwitchContext+0xac>
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	4413      	add	r3, r2
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	4a12      	ldr	r2, [pc, #72]	@ (800f548 <vTaskSwitchContext+0x104>)
 800f500:	4413      	add	r3, r2
 800f502:	613b      	str	r3, [r7, #16]
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	685a      	ldr	r2, [r3, #4]
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	605a      	str	r2, [r3, #4]
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	685a      	ldr	r2, [r3, #4]
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	3308      	adds	r3, #8
 800f516:	429a      	cmp	r2, r3
 800f518:	d104      	bne.n	800f524 <vTaskSwitchContext+0xe0>
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	685a      	ldr	r2, [r3, #4]
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	605a      	str	r2, [r3, #4]
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	4a05      	ldr	r2, [pc, #20]	@ (800f540 <vTaskSwitchContext+0xfc>)
 800f52c:	6013      	str	r3, [r2, #0]
}
 800f52e:	bf00      	nop
 800f530:	3720      	adds	r7, #32
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	200015c8 	.word	0x200015c8
 800f53c:	200015b4 	.word	0x200015b4
 800f540:	200014a0 	.word	0x200014a0
 800f544:	200015a8 	.word	0x200015a8
 800f548:	200014a4 	.word	0x200014a4

0800f54c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f554:	f000 f854 	bl	800f600 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f558:	4b07      	ldr	r3, [pc, #28]	@ (800f578 <prvIdleTask+0x2c>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d907      	bls.n	800f570 <prvIdleTask+0x24>
			{
				taskYIELD();
 800f560:	4b06      	ldr	r3, [pc, #24]	@ (800f57c <prvIdleTask+0x30>)
 800f562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f566:	601a      	str	r2, [r3, #0]
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800f570:	f7f1 f8b4 	bl	80006dc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f574:	e7ee      	b.n	800f554 <prvIdleTask+0x8>
 800f576:	bf00      	nop
 800f578:	200014a4 	.word	0x200014a4
 800f57c:	e000ed04 	.word	0xe000ed04

0800f580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f586:	2300      	movs	r3, #0
 800f588:	607b      	str	r3, [r7, #4]
 800f58a:	e00c      	b.n	800f5a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	4613      	mov	r3, r2
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4413      	add	r3, r2
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	4a12      	ldr	r2, [pc, #72]	@ (800f5e0 <prvInitialiseTaskLists+0x60>)
 800f598:	4413      	add	r3, r2
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff faeb 	bl	800eb76 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	607b      	str	r3, [r7, #4]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2b06      	cmp	r3, #6
 800f5aa:	d9ef      	bls.n	800f58c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f5ac:	480d      	ldr	r0, [pc, #52]	@ (800f5e4 <prvInitialiseTaskLists+0x64>)
 800f5ae:	f7ff fae2 	bl	800eb76 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f5b2:	480d      	ldr	r0, [pc, #52]	@ (800f5e8 <prvInitialiseTaskLists+0x68>)
 800f5b4:	f7ff fadf 	bl	800eb76 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f5b8:	480c      	ldr	r0, [pc, #48]	@ (800f5ec <prvInitialiseTaskLists+0x6c>)
 800f5ba:	f7ff fadc 	bl	800eb76 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f5be:	480c      	ldr	r0, [pc, #48]	@ (800f5f0 <prvInitialiseTaskLists+0x70>)
 800f5c0:	f7ff fad9 	bl	800eb76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f5c4:	480b      	ldr	r0, [pc, #44]	@ (800f5f4 <prvInitialiseTaskLists+0x74>)
 800f5c6:	f7ff fad6 	bl	800eb76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f5ca:	4b0b      	ldr	r3, [pc, #44]	@ (800f5f8 <prvInitialiseTaskLists+0x78>)
 800f5cc:	4a05      	ldr	r2, [pc, #20]	@ (800f5e4 <prvInitialiseTaskLists+0x64>)
 800f5ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f5d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f5fc <prvInitialiseTaskLists+0x7c>)
 800f5d2:	4a05      	ldr	r2, [pc, #20]	@ (800f5e8 <prvInitialiseTaskLists+0x68>)
 800f5d4:	601a      	str	r2, [r3, #0]
}
 800f5d6:	bf00      	nop
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	200014a4 	.word	0x200014a4
 800f5e4:	20001530 	.word	0x20001530
 800f5e8:	20001544 	.word	0x20001544
 800f5ec:	20001560 	.word	0x20001560
 800f5f0:	20001574 	.word	0x20001574
 800f5f4:	2000158c 	.word	0x2000158c
 800f5f8:	20001558 	.word	0x20001558
 800f5fc:	2000155c 	.word	0x2000155c

0800f600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f606:	e019      	b.n	800f63c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f608:	f000 f9f0 	bl	800f9ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f60c:	4b10      	ldr	r3, [pc, #64]	@ (800f650 <prvCheckTasksWaitingTermination+0x50>)
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	3304      	adds	r3, #4
 800f618:	4618      	mov	r0, r3
 800f61a:	f7ff fb36 	bl	800ec8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f61e:	4b0d      	ldr	r3, [pc, #52]	@ (800f654 <prvCheckTasksWaitingTermination+0x54>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	3b01      	subs	r3, #1
 800f624:	4a0b      	ldr	r2, [pc, #44]	@ (800f654 <prvCheckTasksWaitingTermination+0x54>)
 800f626:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f628:	4b0b      	ldr	r3, [pc, #44]	@ (800f658 <prvCheckTasksWaitingTermination+0x58>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3b01      	subs	r3, #1
 800f62e:	4a0a      	ldr	r2, [pc, #40]	@ (800f658 <prvCheckTasksWaitingTermination+0x58>)
 800f630:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f632:	f000 fa11 	bl	800fa58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 f810 	bl	800f65c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f63c:	4b06      	ldr	r3, [pc, #24]	@ (800f658 <prvCheckTasksWaitingTermination+0x58>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1e1      	bne.n	800f608 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop
 800f648:	3708      	adds	r7, #8
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	20001574 	.word	0x20001574
 800f654:	200015a0 	.word	0x200015a0
 800f658:	20001588 	.word	0x20001588

0800f65c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d108      	bne.n	800f680 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f672:	4618      	mov	r0, r3
 800f674:	f000 fb74 	bl	800fd60 <vPortFree>
				vPortFree( pxTCB );
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 fb71 	bl	800fd60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f67e:	e01b      	b.n	800f6b8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800f686:	2b01      	cmp	r3, #1
 800f688:	d103      	bne.n	800f692 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 fb68 	bl	800fd60 <vPortFree>
	}
 800f690:	e012      	b.n	800f6b8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d00d      	beq.n	800f6b8 <prvDeleteTCB+0x5c>
	__asm volatile
 800f69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a0:	b672      	cpsid	i
 800f6a2:	f383 8811 	msr	BASEPRI, r3
 800f6a6:	f3bf 8f6f 	isb	sy
 800f6aa:	f3bf 8f4f 	dsb	sy
 800f6ae:	b662      	cpsie	i
 800f6b0:	60fb      	str	r3, [r7, #12]
}
 800f6b2:	bf00      	nop
 800f6b4:	bf00      	nop
 800f6b6:	e7fd      	b.n	800f6b4 <prvDeleteTCB+0x58>
	}
 800f6b8:	bf00      	nop
 800f6ba:	3710      	adds	r7, #16
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800f6f8 <prvResetNextTaskUnblockTime+0x38>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d104      	bne.n	800f6da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f6d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f6fc <prvResetNextTaskUnblockTime+0x3c>)
 800f6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f6d8:	e008      	b.n	800f6ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6da:	4b07      	ldr	r3, [pc, #28]	@ (800f6f8 <prvResetNextTaskUnblockTime+0x38>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	68db      	ldr	r3, [r3, #12]
 800f6e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	4a04      	ldr	r2, [pc, #16]	@ (800f6fc <prvResetNextTaskUnblockTime+0x3c>)
 800f6ea:	6013      	str	r3, [r2, #0]
}
 800f6ec:	bf00      	nop
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr
 800f6f8:	20001558 	.word	0x20001558
 800f6fc:	200015c0 	.word	0x200015c0

0800f700 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f70a:	4b29      	ldr	r3, [pc, #164]	@ (800f7b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f710:	4b28      	ldr	r3, [pc, #160]	@ (800f7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	3304      	adds	r3, #4
 800f716:	4618      	mov	r0, r3
 800f718:	f7ff fab7 	bl	800ec8a <uxListRemove>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d10b      	bne.n	800f73a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f722:	4b24      	ldr	r3, [pc, #144]	@ (800f7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f728:	2201      	movs	r2, #1
 800f72a:	fa02 f303 	lsl.w	r3, r2, r3
 800f72e:	43da      	mvns	r2, r3
 800f730:	4b21      	ldr	r3, [pc, #132]	@ (800f7b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4013      	ands	r3, r2
 800f736:	4a20      	ldr	r2, [pc, #128]	@ (800f7b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f738:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f740:	d10a      	bne.n	800f758 <prvAddCurrentTaskToDelayedList+0x58>
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d007      	beq.n	800f758 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f748:	4b1a      	ldr	r3, [pc, #104]	@ (800f7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	3304      	adds	r3, #4
 800f74e:	4619      	mov	r1, r3
 800f750:	481a      	ldr	r0, [pc, #104]	@ (800f7bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800f752:	f7ff fa3d 	bl	800ebd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f756:	e026      	b.n	800f7a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4413      	add	r3, r2
 800f75e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f760:	4b14      	ldr	r3, [pc, #80]	@ (800f7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f768:	68ba      	ldr	r2, [r7, #8]
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d209      	bcs.n	800f784 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f770:	4b13      	ldr	r3, [pc, #76]	@ (800f7c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	4b0f      	ldr	r3, [pc, #60]	@ (800f7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	3304      	adds	r3, #4
 800f77a:	4619      	mov	r1, r3
 800f77c:	4610      	mov	r0, r2
 800f77e:	f7ff fa4b 	bl	800ec18 <vListInsert>
}
 800f782:	e010      	b.n	800f7a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f784:	4b0f      	ldr	r3, [pc, #60]	@ (800f7c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	4b0a      	ldr	r3, [pc, #40]	@ (800f7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	3304      	adds	r3, #4
 800f78e:	4619      	mov	r1, r3
 800f790:	4610      	mov	r0, r2
 800f792:	f7ff fa41 	bl	800ec18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f796:	4b0c      	ldr	r3, [pc, #48]	@ (800f7c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	68ba      	ldr	r2, [r7, #8]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d202      	bcs.n	800f7a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f7a0:	4a09      	ldr	r2, [pc, #36]	@ (800f7c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	6013      	str	r3, [r2, #0]
}
 800f7a6:	bf00      	nop
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	200015a4 	.word	0x200015a4
 800f7b4:	200014a0 	.word	0x200014a0
 800f7b8:	200015a8 	.word	0x200015a8
 800f7bc:	2000158c 	.word	0x2000158c
 800f7c0:	2000155c 	.word	0x2000155c
 800f7c4:	20001558 	.word	0x20001558
 800f7c8:	200015c0 	.word	0x200015c0

0800f7cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b085      	sub	sp, #20
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	3b04      	subs	r3, #4
 800f7dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f7e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	3b04      	subs	r3, #4
 800f7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	f023 0201 	bic.w	r2, r3, #1
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	3b04      	subs	r3, #4
 800f7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f7fc:	4a0c      	ldr	r2, [pc, #48]	@ (800f830 <pxPortInitialiseStack+0x64>)
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	3b14      	subs	r3, #20
 800f806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	3b04      	subs	r3, #4
 800f812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f06f 0202 	mvn.w	r2, #2
 800f81a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	3b20      	subs	r3, #32
 800f820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f822:	68fb      	ldr	r3, [r7, #12]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3714      	adds	r7, #20
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr
 800f830:	0800f835 	.word	0x0800f835

0800f834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f83a:	2300      	movs	r3, #0
 800f83c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f83e:	4b15      	ldr	r3, [pc, #84]	@ (800f894 <prvTaskExitError+0x60>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f846:	d00d      	beq.n	800f864 <prvTaskExitError+0x30>
	__asm volatile
 800f848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f84c:	b672      	cpsid	i
 800f84e:	f383 8811 	msr	BASEPRI, r3
 800f852:	f3bf 8f6f 	isb	sy
 800f856:	f3bf 8f4f 	dsb	sy
 800f85a:	b662      	cpsie	i
 800f85c:	60fb      	str	r3, [r7, #12]
}
 800f85e:	bf00      	nop
 800f860:	bf00      	nop
 800f862:	e7fd      	b.n	800f860 <prvTaskExitError+0x2c>
	__asm volatile
 800f864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f868:	b672      	cpsid	i
 800f86a:	f383 8811 	msr	BASEPRI, r3
 800f86e:	f3bf 8f6f 	isb	sy
 800f872:	f3bf 8f4f 	dsb	sy
 800f876:	b662      	cpsie	i
 800f878:	60bb      	str	r3, [r7, #8]
}
 800f87a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f87c:	bf00      	nop
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d0fc      	beq.n	800f87e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f884:	bf00      	nop
 800f886:	bf00      	nop
 800f888:	3714      	adds	r7, #20
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	2000000c 	.word	0x2000000c
	...

0800f8a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f8a0:	4b07      	ldr	r3, [pc, #28]	@ (800f8c0 <pxCurrentTCBConst2>)
 800f8a2:	6819      	ldr	r1, [r3, #0]
 800f8a4:	6808      	ldr	r0, [r1, #0]
 800f8a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8aa:	f380 8809 	msr	PSP, r0
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	f04f 0000 	mov.w	r0, #0
 800f8b6:	f380 8811 	msr	BASEPRI, r0
 800f8ba:	4770      	bx	lr
 800f8bc:	f3af 8000 	nop.w

0800f8c0 <pxCurrentTCBConst2>:
 800f8c0:	200014a0 	.word	0x200014a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f8c4:	bf00      	nop
 800f8c6:	bf00      	nop

0800f8c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f8c8:	4808      	ldr	r0, [pc, #32]	@ (800f8ec <prvPortStartFirstTask+0x24>)
 800f8ca:	6800      	ldr	r0, [r0, #0]
 800f8cc:	6800      	ldr	r0, [r0, #0]
 800f8ce:	f380 8808 	msr	MSP, r0
 800f8d2:	f04f 0000 	mov.w	r0, #0
 800f8d6:	f380 8814 	msr	CONTROL, r0
 800f8da:	b662      	cpsie	i
 800f8dc:	b661      	cpsie	f
 800f8de:	f3bf 8f4f 	dsb	sy
 800f8e2:	f3bf 8f6f 	isb	sy
 800f8e6:	df00      	svc	0
 800f8e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f8ea:	bf00      	nop
 800f8ec:	e000ed08 	.word	0xe000ed08

0800f8f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f8f6:	4b37      	ldr	r3, [pc, #220]	@ (800f9d4 <xPortStartScheduler+0xe4>)
 800f8f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	22ff      	movs	r2, #255	@ 0xff
 800f906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f910:	78fb      	ldrb	r3, [r7, #3]
 800f912:	b2db      	uxtb	r3, r3
 800f914:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	4b2f      	ldr	r3, [pc, #188]	@ (800f9d8 <xPortStartScheduler+0xe8>)
 800f91c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f91e:	4b2f      	ldr	r3, [pc, #188]	@ (800f9dc <xPortStartScheduler+0xec>)
 800f920:	2207      	movs	r2, #7
 800f922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f924:	e009      	b.n	800f93a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f926:	4b2d      	ldr	r3, [pc, #180]	@ (800f9dc <xPortStartScheduler+0xec>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	3b01      	subs	r3, #1
 800f92c:	4a2b      	ldr	r2, [pc, #172]	@ (800f9dc <xPortStartScheduler+0xec>)
 800f92e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f930:	78fb      	ldrb	r3, [r7, #3]
 800f932:	b2db      	uxtb	r3, r3
 800f934:	005b      	lsls	r3, r3, #1
 800f936:	b2db      	uxtb	r3, r3
 800f938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f93a:	78fb      	ldrb	r3, [r7, #3]
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f942:	2b80      	cmp	r3, #128	@ 0x80
 800f944:	d0ef      	beq.n	800f926 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f946:	4b25      	ldr	r3, [pc, #148]	@ (800f9dc <xPortStartScheduler+0xec>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f1c3 0307 	rsb	r3, r3, #7
 800f94e:	2b04      	cmp	r3, #4
 800f950:	d00d      	beq.n	800f96e <xPortStartScheduler+0x7e>
	__asm volatile
 800f952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f956:	b672      	cpsid	i
 800f958:	f383 8811 	msr	BASEPRI, r3
 800f95c:	f3bf 8f6f 	isb	sy
 800f960:	f3bf 8f4f 	dsb	sy
 800f964:	b662      	cpsie	i
 800f966:	60bb      	str	r3, [r7, #8]
}
 800f968:	bf00      	nop
 800f96a:	bf00      	nop
 800f96c:	e7fd      	b.n	800f96a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f96e:	4b1b      	ldr	r3, [pc, #108]	@ (800f9dc <xPortStartScheduler+0xec>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	021b      	lsls	r3, r3, #8
 800f974:	4a19      	ldr	r2, [pc, #100]	@ (800f9dc <xPortStartScheduler+0xec>)
 800f976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f978:	4b18      	ldr	r3, [pc, #96]	@ (800f9dc <xPortStartScheduler+0xec>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f980:	4a16      	ldr	r2, [pc, #88]	@ (800f9dc <xPortStartScheduler+0xec>)
 800f982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	b2da      	uxtb	r2, r3
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f98c:	4b14      	ldr	r3, [pc, #80]	@ (800f9e0 <xPortStartScheduler+0xf0>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a13      	ldr	r2, [pc, #76]	@ (800f9e0 <xPortStartScheduler+0xf0>)
 800f992:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f998:	4b11      	ldr	r3, [pc, #68]	@ (800f9e0 <xPortStartScheduler+0xf0>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a10      	ldr	r2, [pc, #64]	@ (800f9e0 <xPortStartScheduler+0xf0>)
 800f99e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f9a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f9a4:	f000 f8dc 	bl	800fb60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f9e4 <xPortStartScheduler+0xf4>)
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f9ae:	f000 f8fb 	bl	800fba8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f9e8 <xPortStartScheduler+0xf8>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a0c      	ldr	r2, [pc, #48]	@ (800f9e8 <xPortStartScheduler+0xf8>)
 800f9b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f9bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f9be:	f7ff ff83 	bl	800f8c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f9c2:	f7ff fd3f 	bl	800f444 <vTaskSwitchContext>
	prvTaskExitError();
 800f9c6:	f7ff ff35 	bl	800f834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3710      	adds	r7, #16
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	e000e400 	.word	0xe000e400
 800f9d8:	200015cc 	.word	0x200015cc
 800f9dc:	200015d0 	.word	0x200015d0
 800f9e0:	e000ed20 	.word	0xe000ed20
 800f9e4:	2000000c 	.word	0x2000000c
 800f9e8:	e000ef34 	.word	0xe000ef34

0800f9ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
	__asm volatile
 800f9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f6:	b672      	cpsid	i
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	b662      	cpsie	i
 800fa06:	607b      	str	r3, [r7, #4]
}
 800fa08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fa0a:	4b11      	ldr	r3, [pc, #68]	@ (800fa50 <vPortEnterCritical+0x64>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	4a0f      	ldr	r2, [pc, #60]	@ (800fa50 <vPortEnterCritical+0x64>)
 800fa12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fa14:	4b0e      	ldr	r3, [pc, #56]	@ (800fa50 <vPortEnterCritical+0x64>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d112      	bne.n	800fa42 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa1c:	4b0d      	ldr	r3, [pc, #52]	@ (800fa54 <vPortEnterCritical+0x68>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00d      	beq.n	800fa42 <vPortEnterCritical+0x56>
	__asm volatile
 800fa26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa2a:	b672      	cpsid	i
 800fa2c:	f383 8811 	msr	BASEPRI, r3
 800fa30:	f3bf 8f6f 	isb	sy
 800fa34:	f3bf 8f4f 	dsb	sy
 800fa38:	b662      	cpsie	i
 800fa3a:	603b      	str	r3, [r7, #0]
}
 800fa3c:	bf00      	nop
 800fa3e:	bf00      	nop
 800fa40:	e7fd      	b.n	800fa3e <vPortEnterCritical+0x52>
	}
}
 800fa42:	bf00      	nop
 800fa44:	370c      	adds	r7, #12
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr
 800fa4e:	bf00      	nop
 800fa50:	2000000c 	.word	0x2000000c
 800fa54:	e000ed04 	.word	0xe000ed04

0800fa58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa5e:	4b13      	ldr	r3, [pc, #76]	@ (800faac <vPortExitCritical+0x54>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d10d      	bne.n	800fa82 <vPortExitCritical+0x2a>
	__asm volatile
 800fa66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa6a:	b672      	cpsid	i
 800fa6c:	f383 8811 	msr	BASEPRI, r3
 800fa70:	f3bf 8f6f 	isb	sy
 800fa74:	f3bf 8f4f 	dsb	sy
 800fa78:	b662      	cpsie	i
 800fa7a:	607b      	str	r3, [r7, #4]
}
 800fa7c:	bf00      	nop
 800fa7e:	bf00      	nop
 800fa80:	e7fd      	b.n	800fa7e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800fa82:	4b0a      	ldr	r3, [pc, #40]	@ (800faac <vPortExitCritical+0x54>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	3b01      	subs	r3, #1
 800fa88:	4a08      	ldr	r2, [pc, #32]	@ (800faac <vPortExitCritical+0x54>)
 800fa8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa8c:	4b07      	ldr	r3, [pc, #28]	@ (800faac <vPortExitCritical+0x54>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d105      	bne.n	800faa0 <vPortExitCritical+0x48>
 800fa94:	2300      	movs	r3, #0
 800fa96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fa9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800faa0:	bf00      	nop
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr
 800faac:	2000000c 	.word	0x2000000c

0800fab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fab0:	f3ef 8009 	mrs	r0, PSP
 800fab4:	f3bf 8f6f 	isb	sy
 800fab8:	4b15      	ldr	r3, [pc, #84]	@ (800fb10 <pxCurrentTCBConst>)
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	f01e 0f10 	tst.w	lr, #16
 800fac0:	bf08      	it	eq
 800fac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faca:	6010      	str	r0, [r2, #0]
 800facc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fad0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fad4:	b672      	cpsid	i
 800fad6:	f380 8811 	msr	BASEPRI, r0
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	f3bf 8f6f 	isb	sy
 800fae2:	b662      	cpsie	i
 800fae4:	f7ff fcae 	bl	800f444 <vTaskSwitchContext>
 800fae8:	f04f 0000 	mov.w	r0, #0
 800faec:	f380 8811 	msr	BASEPRI, r0
 800faf0:	bc09      	pop	{r0, r3}
 800faf2:	6819      	ldr	r1, [r3, #0]
 800faf4:	6808      	ldr	r0, [r1, #0]
 800faf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafa:	f01e 0f10 	tst.w	lr, #16
 800fafe:	bf08      	it	eq
 800fb00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fb04:	f380 8809 	msr	PSP, r0
 800fb08:	f3bf 8f6f 	isb	sy
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop

0800fb10 <pxCurrentTCBConst>:
 800fb10:	200014a0 	.word	0x200014a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fb14:	bf00      	nop
 800fb16:	bf00      	nop

0800fb18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb22:	b672      	cpsid	i
 800fb24:	f383 8811 	msr	BASEPRI, r3
 800fb28:	f3bf 8f6f 	isb	sy
 800fb2c:	f3bf 8f4f 	dsb	sy
 800fb30:	b662      	cpsie	i
 800fb32:	607b      	str	r3, [r7, #4]
}
 800fb34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb36:	f7ff fbc9 	bl	800f2cc <xTaskIncrementTick>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d003      	beq.n	800fb48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb40:	4b06      	ldr	r3, [pc, #24]	@ (800fb5c <SysTick_Handler+0x44>)
 800fb42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb46:	601a      	str	r2, [r3, #0]
 800fb48:	2300      	movs	r3, #0
 800fb4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	f383 8811 	msr	BASEPRI, r3
}
 800fb52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb54:	bf00      	nop
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	e000ed04 	.word	0xe000ed04

0800fb60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb60:	b480      	push	{r7}
 800fb62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb64:	4b0b      	ldr	r3, [pc, #44]	@ (800fb94 <vPortSetupTimerInterrupt+0x34>)
 800fb66:	2200      	movs	r2, #0
 800fb68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb6a:	4b0b      	ldr	r3, [pc, #44]	@ (800fb98 <vPortSetupTimerInterrupt+0x38>)
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb70:	4b0a      	ldr	r3, [pc, #40]	@ (800fb9c <vPortSetupTimerInterrupt+0x3c>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a0a      	ldr	r2, [pc, #40]	@ (800fba0 <vPortSetupTimerInterrupt+0x40>)
 800fb76:	fba2 2303 	umull	r2, r3, r2, r3
 800fb7a:	099b      	lsrs	r3, r3, #6
 800fb7c:	4a09      	ldr	r2, [pc, #36]	@ (800fba4 <vPortSetupTimerInterrupt+0x44>)
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fb82:	4b04      	ldr	r3, [pc, #16]	@ (800fb94 <vPortSetupTimerInterrupt+0x34>)
 800fb84:	2207      	movs	r2, #7
 800fb86:	601a      	str	r2, [r3, #0]
}
 800fb88:	bf00      	nop
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	e000e010 	.word	0xe000e010
 800fb98:	e000e018 	.word	0xe000e018
 800fb9c:	20000000 	.word	0x20000000
 800fba0:	10624dd3 	.word	0x10624dd3
 800fba4:	e000e014 	.word	0xe000e014

0800fba8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fba8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fbb8 <vPortEnableVFP+0x10>
 800fbac:	6801      	ldr	r1, [r0, #0]
 800fbae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fbb2:	6001      	str	r1, [r0, #0]
 800fbb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fbb6:	bf00      	nop
 800fbb8:	e000ed88 	.word	0xe000ed88

0800fbbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b08a      	sub	sp, #40	@ 0x28
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fbc8:	f7ff fad2 	bl	800f170 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fbcc:	4b5f      	ldr	r3, [pc, #380]	@ (800fd4c <pvPortMalloc+0x190>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d101      	bne.n	800fbd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fbd4:	f000 f924 	bl	800fe20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fbd8:	4b5d      	ldr	r3, [pc, #372]	@ (800fd50 <pvPortMalloc+0x194>)
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	4013      	ands	r3, r2
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f040 8094 	bne.w	800fd0e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d020      	beq.n	800fc2e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800fbec:	2208      	movs	r2, #8
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4413      	add	r3, r2
 800fbf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f003 0307 	and.w	r3, r3, #7
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d017      	beq.n	800fc2e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f023 0307 	bic.w	r3, r3, #7
 800fc04:	3308      	adds	r3, #8
 800fc06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f003 0307 	and.w	r3, r3, #7
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d00d      	beq.n	800fc2e <pvPortMalloc+0x72>
	__asm volatile
 800fc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc16:	b672      	cpsid	i
 800fc18:	f383 8811 	msr	BASEPRI, r3
 800fc1c:	f3bf 8f6f 	isb	sy
 800fc20:	f3bf 8f4f 	dsb	sy
 800fc24:	b662      	cpsie	i
 800fc26:	617b      	str	r3, [r7, #20]
}
 800fc28:	bf00      	nop
 800fc2a:	bf00      	nop
 800fc2c:	e7fd      	b.n	800fc2a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d06c      	beq.n	800fd0e <pvPortMalloc+0x152>
 800fc34:	4b47      	ldr	r3, [pc, #284]	@ (800fd54 <pvPortMalloc+0x198>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d867      	bhi.n	800fd0e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc3e:	4b46      	ldr	r3, [pc, #280]	@ (800fd58 <pvPortMalloc+0x19c>)
 800fc40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc42:	4b45      	ldr	r3, [pc, #276]	@ (800fd58 <pvPortMalloc+0x19c>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc48:	e004      	b.n	800fc54 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800fc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d903      	bls.n	800fc66 <pvPortMalloc+0xaa>
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d1f1      	bne.n	800fc4a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc66:	4b39      	ldr	r3, [pc, #228]	@ (800fd4c <pvPortMalloc+0x190>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d04e      	beq.n	800fd0e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc70:	6a3b      	ldr	r3, [r7, #32]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2208      	movs	r2, #8
 800fc76:	4413      	add	r3, r2
 800fc78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc84:	685a      	ldr	r2, [r3, #4]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	1ad2      	subs	r2, r2, r3
 800fc8a:	2308      	movs	r3, #8
 800fc8c:	005b      	lsls	r3, r3, #1
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d922      	bls.n	800fcd8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4413      	add	r3, r2
 800fc98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	f003 0307 	and.w	r3, r3, #7
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00d      	beq.n	800fcc0 <pvPortMalloc+0x104>
	__asm volatile
 800fca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca8:	b672      	cpsid	i
 800fcaa:	f383 8811 	msr	BASEPRI, r3
 800fcae:	f3bf 8f6f 	isb	sy
 800fcb2:	f3bf 8f4f 	dsb	sy
 800fcb6:	b662      	cpsie	i
 800fcb8:	613b      	str	r3, [r7, #16]
}
 800fcba:	bf00      	nop
 800fcbc:	bf00      	nop
 800fcbe:	e7fd      	b.n	800fcbc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc2:	685a      	ldr	r2, [r3, #4]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	1ad2      	subs	r2, r2, r3
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fcd2:	69b8      	ldr	r0, [r7, #24]
 800fcd4:	f000 f906 	bl	800fee4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fcd8:	4b1e      	ldr	r3, [pc, #120]	@ (800fd54 <pvPortMalloc+0x198>)
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	1ad3      	subs	r3, r2, r3
 800fce2:	4a1c      	ldr	r2, [pc, #112]	@ (800fd54 <pvPortMalloc+0x198>)
 800fce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fce6:	4b1b      	ldr	r3, [pc, #108]	@ (800fd54 <pvPortMalloc+0x198>)
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	4b1c      	ldr	r3, [pc, #112]	@ (800fd5c <pvPortMalloc+0x1a0>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d203      	bcs.n	800fcfa <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fcf2:	4b18      	ldr	r3, [pc, #96]	@ (800fd54 <pvPortMalloc+0x198>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4a19      	ldr	r2, [pc, #100]	@ (800fd5c <pvPortMalloc+0x1a0>)
 800fcf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcfc:	685a      	ldr	r2, [r3, #4]
 800fcfe:	4b14      	ldr	r3, [pc, #80]	@ (800fd50 <pvPortMalloc+0x194>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	431a      	orrs	r2, r3
 800fd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd0e:	f7ff fa3d 	bl	800f18c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d101      	bne.n	800fd1c <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800fd18:	f7f0 fcf2 	bl	8000700 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	f003 0307 	and.w	r3, r3, #7
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00d      	beq.n	800fd42 <pvPortMalloc+0x186>
	__asm volatile
 800fd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd2a:	b672      	cpsid	i
 800fd2c:	f383 8811 	msr	BASEPRI, r3
 800fd30:	f3bf 8f6f 	isb	sy
 800fd34:	f3bf 8f4f 	dsb	sy
 800fd38:	b662      	cpsie	i
 800fd3a:	60fb      	str	r3, [r7, #12]
}
 800fd3c:	bf00      	nop
 800fd3e:	bf00      	nop
 800fd40:	e7fd      	b.n	800fd3e <pvPortMalloc+0x182>
	return pvReturn;
 800fd42:	69fb      	ldr	r3, [r7, #28]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3728      	adds	r7, #40	@ 0x28
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	200095dc 	.word	0x200095dc
 800fd50:	200095e8 	.word	0x200095e8
 800fd54:	200095e0 	.word	0x200095e0
 800fd58:	200095d4 	.word	0x200095d4
 800fd5c:	200095e4 	.word	0x200095e4

0800fd60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b086      	sub	sp, #24
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d04e      	beq.n	800fe10 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd72:	2308      	movs	r3, #8
 800fd74:	425b      	negs	r3, r3
 800fd76:	697a      	ldr	r2, [r7, #20]
 800fd78:	4413      	add	r3, r2
 800fd7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	685a      	ldr	r2, [r3, #4]
 800fd84:	4b24      	ldr	r3, [pc, #144]	@ (800fe18 <vPortFree+0xb8>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4013      	ands	r3, r2
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10d      	bne.n	800fdaa <vPortFree+0x4a>
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd92:	b672      	cpsid	i
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	b662      	cpsie	i
 800fda2:	60fb      	str	r3, [r7, #12]
}
 800fda4:	bf00      	nop
 800fda6:	bf00      	nop
 800fda8:	e7fd      	b.n	800fda6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d00d      	beq.n	800fdce <vPortFree+0x6e>
	__asm volatile
 800fdb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb6:	b672      	cpsid	i
 800fdb8:	f383 8811 	msr	BASEPRI, r3
 800fdbc:	f3bf 8f6f 	isb	sy
 800fdc0:	f3bf 8f4f 	dsb	sy
 800fdc4:	b662      	cpsie	i
 800fdc6:	60bb      	str	r3, [r7, #8]
}
 800fdc8:	bf00      	nop
 800fdca:	bf00      	nop
 800fdcc:	e7fd      	b.n	800fdca <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	685a      	ldr	r2, [r3, #4]
 800fdd2:	4b11      	ldr	r3, [pc, #68]	@ (800fe18 <vPortFree+0xb8>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	4013      	ands	r3, r2
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d019      	beq.n	800fe10 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d115      	bne.n	800fe10 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	685a      	ldr	r2, [r3, #4]
 800fde8:	4b0b      	ldr	r3, [pc, #44]	@ (800fe18 <vPortFree+0xb8>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	43db      	mvns	r3, r3
 800fdee:	401a      	ands	r2, r3
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fdf4:	f7ff f9bc 	bl	800f170 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	685a      	ldr	r2, [r3, #4]
 800fdfc:	4b07      	ldr	r3, [pc, #28]	@ (800fe1c <vPortFree+0xbc>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4413      	add	r3, r2
 800fe02:	4a06      	ldr	r2, [pc, #24]	@ (800fe1c <vPortFree+0xbc>)
 800fe04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe06:	6938      	ldr	r0, [r7, #16]
 800fe08:	f000 f86c 	bl	800fee4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fe0c:	f7ff f9be 	bl	800f18c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe10:	bf00      	nop
 800fe12:	3718      	adds	r7, #24
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	200095e8 	.word	0x200095e8
 800fe1c:	200095e0 	.word	0x200095e0

0800fe20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fe2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fe2c:	4b27      	ldr	r3, [pc, #156]	@ (800fecc <prvHeapInit+0xac>)
 800fe2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	f003 0307 	and.w	r3, r3, #7
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d00c      	beq.n	800fe54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	3307      	adds	r3, #7
 800fe3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f023 0307 	bic.w	r3, r3, #7
 800fe46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	1ad3      	subs	r3, r2, r3
 800fe4e:	4a1f      	ldr	r2, [pc, #124]	@ (800fecc <prvHeapInit+0xac>)
 800fe50:	4413      	add	r3, r2
 800fe52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fe58:	4a1d      	ldr	r2, [pc, #116]	@ (800fed0 <prvHeapInit+0xb0>)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fe5e:	4b1c      	ldr	r3, [pc, #112]	@ (800fed0 <prvHeapInit+0xb0>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	68ba      	ldr	r2, [r7, #8]
 800fe68:	4413      	add	r3, r2
 800fe6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe6c:	2208      	movs	r2, #8
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	1a9b      	subs	r3, r3, r2
 800fe72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f023 0307 	bic.w	r3, r3, #7
 800fe7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	4a15      	ldr	r2, [pc, #84]	@ (800fed4 <prvHeapInit+0xb4>)
 800fe80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe82:	4b14      	ldr	r3, [pc, #80]	@ (800fed4 <prvHeapInit+0xb4>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2200      	movs	r2, #0
 800fe88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe8a:	4b12      	ldr	r3, [pc, #72]	@ (800fed4 <prvHeapInit+0xb4>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	68fa      	ldr	r2, [r7, #12]
 800fe9a:	1ad2      	subs	r2, r2, r3
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fea0:	4b0c      	ldr	r3, [pc, #48]	@ (800fed4 <prvHeapInit+0xb4>)
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	4a0a      	ldr	r2, [pc, #40]	@ (800fed8 <prvHeapInit+0xb8>)
 800feae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	4a09      	ldr	r2, [pc, #36]	@ (800fedc <prvHeapInit+0xbc>)
 800feb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800feb8:	4b09      	ldr	r3, [pc, #36]	@ (800fee0 <prvHeapInit+0xc0>)
 800feba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800febe:	601a      	str	r2, [r3, #0]
}
 800fec0:	bf00      	nop
 800fec2:	3714      	adds	r7, #20
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr
 800fecc:	200015d4 	.word	0x200015d4
 800fed0:	200095d4 	.word	0x200095d4
 800fed4:	200095dc 	.word	0x200095dc
 800fed8:	200095e4 	.word	0x200095e4
 800fedc:	200095e0 	.word	0x200095e0
 800fee0:	200095e8 	.word	0x200095e8

0800fee4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fee4:	b480      	push	{r7}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800feec:	4b28      	ldr	r3, [pc, #160]	@ (800ff90 <prvInsertBlockIntoFreeList+0xac>)
 800feee:	60fb      	str	r3, [r7, #12]
 800fef0:	e002      	b.n	800fef8 <prvInsertBlockIntoFreeList+0x14>
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	60fb      	str	r3, [r7, #12]
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	687a      	ldr	r2, [r7, #4]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d8f7      	bhi.n	800fef2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d108      	bne.n	800ff26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	685a      	ldr	r2, [r3, #4]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	441a      	add	r2, r3
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	68ba      	ldr	r2, [r7, #8]
 800ff30:	441a      	add	r2, r3
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d118      	bne.n	800ff6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	4b15      	ldr	r3, [pc, #84]	@ (800ff94 <prvInsertBlockIntoFreeList+0xb0>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d00d      	beq.n	800ff62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	685a      	ldr	r2, [r3, #4]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	441a      	add	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	601a      	str	r2, [r3, #0]
 800ff60:	e008      	b.n	800ff74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff62:	4b0c      	ldr	r3, [pc, #48]	@ (800ff94 <prvInsertBlockIntoFreeList+0xb0>)
 800ff64:	681a      	ldr	r2, [r3, #0]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	601a      	str	r2, [r3, #0]
 800ff6a:	e003      	b.n	800ff74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d002      	beq.n	800ff82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	687a      	ldr	r2, [r7, #4]
 800ff80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff82:	bf00      	nop
 800ff84:	3714      	adds	r7, #20
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop
 800ff90:	200095d4 	.word	0x200095d4
 800ff94:	200095dc 	.word	0x200095dc

0800ff98 <malloc>:
 800ff98:	4b02      	ldr	r3, [pc, #8]	@ (800ffa4 <malloc+0xc>)
 800ff9a:	4601      	mov	r1, r0
 800ff9c:	6818      	ldr	r0, [r3, #0]
 800ff9e:	f000 b825 	b.w	800ffec <_malloc_r>
 800ffa2:	bf00      	nop
 800ffa4:	2000001c 	.word	0x2000001c

0800ffa8 <sbrk_aligned>:
 800ffa8:	b570      	push	{r4, r5, r6, lr}
 800ffaa:	4e0f      	ldr	r6, [pc, #60]	@ (800ffe8 <sbrk_aligned+0x40>)
 800ffac:	460c      	mov	r4, r1
 800ffae:	6831      	ldr	r1, [r6, #0]
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	b911      	cbnz	r1, 800ffba <sbrk_aligned+0x12>
 800ffb4:	f000 ff24 	bl	8010e00 <_sbrk_r>
 800ffb8:	6030      	str	r0, [r6, #0]
 800ffba:	4621      	mov	r1, r4
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	f000 ff1f 	bl	8010e00 <_sbrk_r>
 800ffc2:	1c43      	adds	r3, r0, #1
 800ffc4:	d103      	bne.n	800ffce <sbrk_aligned+0x26>
 800ffc6:	f04f 34ff 	mov.w	r4, #4294967295
 800ffca:	4620      	mov	r0, r4
 800ffcc:	bd70      	pop	{r4, r5, r6, pc}
 800ffce:	1cc4      	adds	r4, r0, #3
 800ffd0:	f024 0403 	bic.w	r4, r4, #3
 800ffd4:	42a0      	cmp	r0, r4
 800ffd6:	d0f8      	beq.n	800ffca <sbrk_aligned+0x22>
 800ffd8:	1a21      	subs	r1, r4, r0
 800ffda:	4628      	mov	r0, r5
 800ffdc:	f000 ff10 	bl	8010e00 <_sbrk_r>
 800ffe0:	3001      	adds	r0, #1
 800ffe2:	d1f2      	bne.n	800ffca <sbrk_aligned+0x22>
 800ffe4:	e7ef      	b.n	800ffc6 <sbrk_aligned+0x1e>
 800ffe6:	bf00      	nop
 800ffe8:	200095ec 	.word	0x200095ec

0800ffec <_malloc_r>:
 800ffec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fff0:	1ccd      	adds	r5, r1, #3
 800fff2:	f025 0503 	bic.w	r5, r5, #3
 800fff6:	3508      	adds	r5, #8
 800fff8:	2d0c      	cmp	r5, #12
 800fffa:	bf38      	it	cc
 800fffc:	250c      	movcc	r5, #12
 800fffe:	2d00      	cmp	r5, #0
 8010000:	4606      	mov	r6, r0
 8010002:	db01      	blt.n	8010008 <_malloc_r+0x1c>
 8010004:	42a9      	cmp	r1, r5
 8010006:	d904      	bls.n	8010012 <_malloc_r+0x26>
 8010008:	230c      	movs	r3, #12
 801000a:	6033      	str	r3, [r6, #0]
 801000c:	2000      	movs	r0, #0
 801000e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80100e8 <_malloc_r+0xfc>
 8010016:	f000 f869 	bl	80100ec <__malloc_lock>
 801001a:	f8d8 3000 	ldr.w	r3, [r8]
 801001e:	461c      	mov	r4, r3
 8010020:	bb44      	cbnz	r4, 8010074 <_malloc_r+0x88>
 8010022:	4629      	mov	r1, r5
 8010024:	4630      	mov	r0, r6
 8010026:	f7ff ffbf 	bl	800ffa8 <sbrk_aligned>
 801002a:	1c43      	adds	r3, r0, #1
 801002c:	4604      	mov	r4, r0
 801002e:	d158      	bne.n	80100e2 <_malloc_r+0xf6>
 8010030:	f8d8 4000 	ldr.w	r4, [r8]
 8010034:	4627      	mov	r7, r4
 8010036:	2f00      	cmp	r7, #0
 8010038:	d143      	bne.n	80100c2 <_malloc_r+0xd6>
 801003a:	2c00      	cmp	r4, #0
 801003c:	d04b      	beq.n	80100d6 <_malloc_r+0xea>
 801003e:	6823      	ldr	r3, [r4, #0]
 8010040:	4639      	mov	r1, r7
 8010042:	4630      	mov	r0, r6
 8010044:	eb04 0903 	add.w	r9, r4, r3
 8010048:	f000 feda 	bl	8010e00 <_sbrk_r>
 801004c:	4581      	cmp	r9, r0
 801004e:	d142      	bne.n	80100d6 <_malloc_r+0xea>
 8010050:	6821      	ldr	r1, [r4, #0]
 8010052:	1a6d      	subs	r5, r5, r1
 8010054:	4629      	mov	r1, r5
 8010056:	4630      	mov	r0, r6
 8010058:	f7ff ffa6 	bl	800ffa8 <sbrk_aligned>
 801005c:	3001      	adds	r0, #1
 801005e:	d03a      	beq.n	80100d6 <_malloc_r+0xea>
 8010060:	6823      	ldr	r3, [r4, #0]
 8010062:	442b      	add	r3, r5
 8010064:	6023      	str	r3, [r4, #0]
 8010066:	f8d8 3000 	ldr.w	r3, [r8]
 801006a:	685a      	ldr	r2, [r3, #4]
 801006c:	bb62      	cbnz	r2, 80100c8 <_malloc_r+0xdc>
 801006e:	f8c8 7000 	str.w	r7, [r8]
 8010072:	e00f      	b.n	8010094 <_malloc_r+0xa8>
 8010074:	6822      	ldr	r2, [r4, #0]
 8010076:	1b52      	subs	r2, r2, r5
 8010078:	d420      	bmi.n	80100bc <_malloc_r+0xd0>
 801007a:	2a0b      	cmp	r2, #11
 801007c:	d917      	bls.n	80100ae <_malloc_r+0xc2>
 801007e:	1961      	adds	r1, r4, r5
 8010080:	42a3      	cmp	r3, r4
 8010082:	6025      	str	r5, [r4, #0]
 8010084:	bf18      	it	ne
 8010086:	6059      	strne	r1, [r3, #4]
 8010088:	6863      	ldr	r3, [r4, #4]
 801008a:	bf08      	it	eq
 801008c:	f8c8 1000 	streq.w	r1, [r8]
 8010090:	5162      	str	r2, [r4, r5]
 8010092:	604b      	str	r3, [r1, #4]
 8010094:	4630      	mov	r0, r6
 8010096:	f000 f82f 	bl	80100f8 <__malloc_unlock>
 801009a:	f104 000b 	add.w	r0, r4, #11
 801009e:	1d23      	adds	r3, r4, #4
 80100a0:	f020 0007 	bic.w	r0, r0, #7
 80100a4:	1ac2      	subs	r2, r0, r3
 80100a6:	bf1c      	itt	ne
 80100a8:	1a1b      	subne	r3, r3, r0
 80100aa:	50a3      	strne	r3, [r4, r2]
 80100ac:	e7af      	b.n	801000e <_malloc_r+0x22>
 80100ae:	6862      	ldr	r2, [r4, #4]
 80100b0:	42a3      	cmp	r3, r4
 80100b2:	bf0c      	ite	eq
 80100b4:	f8c8 2000 	streq.w	r2, [r8]
 80100b8:	605a      	strne	r2, [r3, #4]
 80100ba:	e7eb      	b.n	8010094 <_malloc_r+0xa8>
 80100bc:	4623      	mov	r3, r4
 80100be:	6864      	ldr	r4, [r4, #4]
 80100c0:	e7ae      	b.n	8010020 <_malloc_r+0x34>
 80100c2:	463c      	mov	r4, r7
 80100c4:	687f      	ldr	r7, [r7, #4]
 80100c6:	e7b6      	b.n	8010036 <_malloc_r+0x4a>
 80100c8:	461a      	mov	r2, r3
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	42a3      	cmp	r3, r4
 80100ce:	d1fb      	bne.n	80100c8 <_malloc_r+0xdc>
 80100d0:	2300      	movs	r3, #0
 80100d2:	6053      	str	r3, [r2, #4]
 80100d4:	e7de      	b.n	8010094 <_malloc_r+0xa8>
 80100d6:	230c      	movs	r3, #12
 80100d8:	6033      	str	r3, [r6, #0]
 80100da:	4630      	mov	r0, r6
 80100dc:	f000 f80c 	bl	80100f8 <__malloc_unlock>
 80100e0:	e794      	b.n	801000c <_malloc_r+0x20>
 80100e2:	6005      	str	r5, [r0, #0]
 80100e4:	e7d6      	b.n	8010094 <_malloc_r+0xa8>
 80100e6:	bf00      	nop
 80100e8:	200095f0 	.word	0x200095f0

080100ec <__malloc_lock>:
 80100ec:	4801      	ldr	r0, [pc, #4]	@ (80100f4 <__malloc_lock+0x8>)
 80100ee:	f000 bed4 	b.w	8010e9a <__retarget_lock_acquire_recursive>
 80100f2:	bf00      	nop
 80100f4:	20009734 	.word	0x20009734

080100f8 <__malloc_unlock>:
 80100f8:	4801      	ldr	r0, [pc, #4]	@ (8010100 <__malloc_unlock+0x8>)
 80100fa:	f000 becf 	b.w	8010e9c <__retarget_lock_release_recursive>
 80100fe:	bf00      	nop
 8010100:	20009734 	.word	0x20009734

08010104 <__cvt>:
 8010104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010106:	ed2d 8b02 	vpush	{d8}
 801010a:	eeb0 8b40 	vmov.f64	d8, d0
 801010e:	b085      	sub	sp, #20
 8010110:	4617      	mov	r7, r2
 8010112:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010114:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010116:	ee18 2a90 	vmov	r2, s17
 801011a:	f025 0520 	bic.w	r5, r5, #32
 801011e:	2a00      	cmp	r2, #0
 8010120:	bfb6      	itet	lt
 8010122:	222d      	movlt	r2, #45	@ 0x2d
 8010124:	2200      	movge	r2, #0
 8010126:	eeb1 8b40 	vneglt.f64	d8, d0
 801012a:	2d46      	cmp	r5, #70	@ 0x46
 801012c:	460c      	mov	r4, r1
 801012e:	701a      	strb	r2, [r3, #0]
 8010130:	d004      	beq.n	801013c <__cvt+0x38>
 8010132:	2d45      	cmp	r5, #69	@ 0x45
 8010134:	d100      	bne.n	8010138 <__cvt+0x34>
 8010136:	3401      	adds	r4, #1
 8010138:	2102      	movs	r1, #2
 801013a:	e000      	b.n	801013e <__cvt+0x3a>
 801013c:	2103      	movs	r1, #3
 801013e:	ab03      	add	r3, sp, #12
 8010140:	9301      	str	r3, [sp, #4]
 8010142:	ab02      	add	r3, sp, #8
 8010144:	9300      	str	r3, [sp, #0]
 8010146:	4622      	mov	r2, r4
 8010148:	4633      	mov	r3, r6
 801014a:	eeb0 0b48 	vmov.f64	d0, d8
 801014e:	f000 ff3f 	bl	8010fd0 <_dtoa_r>
 8010152:	2d47      	cmp	r5, #71	@ 0x47
 8010154:	d114      	bne.n	8010180 <__cvt+0x7c>
 8010156:	07fb      	lsls	r3, r7, #31
 8010158:	d50a      	bpl.n	8010170 <__cvt+0x6c>
 801015a:	1902      	adds	r2, r0, r4
 801015c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010164:	bf08      	it	eq
 8010166:	9203      	streq	r2, [sp, #12]
 8010168:	2130      	movs	r1, #48	@ 0x30
 801016a:	9b03      	ldr	r3, [sp, #12]
 801016c:	4293      	cmp	r3, r2
 801016e:	d319      	bcc.n	80101a4 <__cvt+0xa0>
 8010170:	9b03      	ldr	r3, [sp, #12]
 8010172:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010174:	1a1b      	subs	r3, r3, r0
 8010176:	6013      	str	r3, [r2, #0]
 8010178:	b005      	add	sp, #20
 801017a:	ecbd 8b02 	vpop	{d8}
 801017e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010180:	2d46      	cmp	r5, #70	@ 0x46
 8010182:	eb00 0204 	add.w	r2, r0, r4
 8010186:	d1e9      	bne.n	801015c <__cvt+0x58>
 8010188:	7803      	ldrb	r3, [r0, #0]
 801018a:	2b30      	cmp	r3, #48	@ 0x30
 801018c:	d107      	bne.n	801019e <__cvt+0x9a>
 801018e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010196:	bf1c      	itt	ne
 8010198:	f1c4 0401 	rsbne	r4, r4, #1
 801019c:	6034      	strne	r4, [r6, #0]
 801019e:	6833      	ldr	r3, [r6, #0]
 80101a0:	441a      	add	r2, r3
 80101a2:	e7db      	b.n	801015c <__cvt+0x58>
 80101a4:	1c5c      	adds	r4, r3, #1
 80101a6:	9403      	str	r4, [sp, #12]
 80101a8:	7019      	strb	r1, [r3, #0]
 80101aa:	e7de      	b.n	801016a <__cvt+0x66>

080101ac <__exponent>:
 80101ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101ae:	2900      	cmp	r1, #0
 80101b0:	bfba      	itte	lt
 80101b2:	4249      	neglt	r1, r1
 80101b4:	232d      	movlt	r3, #45	@ 0x2d
 80101b6:	232b      	movge	r3, #43	@ 0x2b
 80101b8:	2909      	cmp	r1, #9
 80101ba:	7002      	strb	r2, [r0, #0]
 80101bc:	7043      	strb	r3, [r0, #1]
 80101be:	dd29      	ble.n	8010214 <__exponent+0x68>
 80101c0:	f10d 0307 	add.w	r3, sp, #7
 80101c4:	461d      	mov	r5, r3
 80101c6:	270a      	movs	r7, #10
 80101c8:	461a      	mov	r2, r3
 80101ca:	fbb1 f6f7 	udiv	r6, r1, r7
 80101ce:	fb07 1416 	mls	r4, r7, r6, r1
 80101d2:	3430      	adds	r4, #48	@ 0x30
 80101d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80101d8:	460c      	mov	r4, r1
 80101da:	2c63      	cmp	r4, #99	@ 0x63
 80101dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80101e0:	4631      	mov	r1, r6
 80101e2:	dcf1      	bgt.n	80101c8 <__exponent+0x1c>
 80101e4:	3130      	adds	r1, #48	@ 0x30
 80101e6:	1e94      	subs	r4, r2, #2
 80101e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80101ec:	1c41      	adds	r1, r0, #1
 80101ee:	4623      	mov	r3, r4
 80101f0:	42ab      	cmp	r3, r5
 80101f2:	d30a      	bcc.n	801020a <__exponent+0x5e>
 80101f4:	f10d 0309 	add.w	r3, sp, #9
 80101f8:	1a9b      	subs	r3, r3, r2
 80101fa:	42ac      	cmp	r4, r5
 80101fc:	bf88      	it	hi
 80101fe:	2300      	movhi	r3, #0
 8010200:	3302      	adds	r3, #2
 8010202:	4403      	add	r3, r0
 8010204:	1a18      	subs	r0, r3, r0
 8010206:	b003      	add	sp, #12
 8010208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801020e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010212:	e7ed      	b.n	80101f0 <__exponent+0x44>
 8010214:	2330      	movs	r3, #48	@ 0x30
 8010216:	3130      	adds	r1, #48	@ 0x30
 8010218:	7083      	strb	r3, [r0, #2]
 801021a:	70c1      	strb	r1, [r0, #3]
 801021c:	1d03      	adds	r3, r0, #4
 801021e:	e7f1      	b.n	8010204 <__exponent+0x58>

08010220 <_printf_float>:
 8010220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010224:	b08d      	sub	sp, #52	@ 0x34
 8010226:	460c      	mov	r4, r1
 8010228:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801022c:	4616      	mov	r6, r2
 801022e:	461f      	mov	r7, r3
 8010230:	4605      	mov	r5, r0
 8010232:	f000 fdad 	bl	8010d90 <_localeconv_r>
 8010236:	f8d0 b000 	ldr.w	fp, [r0]
 801023a:	4658      	mov	r0, fp
 801023c:	f7f0 f8b0 	bl	80003a0 <strlen>
 8010240:	2300      	movs	r3, #0
 8010242:	930a      	str	r3, [sp, #40]	@ 0x28
 8010244:	f8d8 3000 	ldr.w	r3, [r8]
 8010248:	f894 9018 	ldrb.w	r9, [r4, #24]
 801024c:	6822      	ldr	r2, [r4, #0]
 801024e:	9005      	str	r0, [sp, #20]
 8010250:	3307      	adds	r3, #7
 8010252:	f023 0307 	bic.w	r3, r3, #7
 8010256:	f103 0108 	add.w	r1, r3, #8
 801025a:	f8c8 1000 	str.w	r1, [r8]
 801025e:	ed93 0b00 	vldr	d0, [r3]
 8010262:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80104c0 <_printf_float+0x2a0>
 8010266:	eeb0 7bc0 	vabs.f64	d7, d0
 801026a:	eeb4 7b46 	vcmp.f64	d7, d6
 801026e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010272:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8010276:	dd24      	ble.n	80102c2 <_printf_float+0xa2>
 8010278:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801027c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010280:	d502      	bpl.n	8010288 <_printf_float+0x68>
 8010282:	232d      	movs	r3, #45	@ 0x2d
 8010284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010288:	498f      	ldr	r1, [pc, #572]	@ (80104c8 <_printf_float+0x2a8>)
 801028a:	4b90      	ldr	r3, [pc, #576]	@ (80104cc <_printf_float+0x2ac>)
 801028c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8010290:	bf8c      	ite	hi
 8010292:	4688      	movhi	r8, r1
 8010294:	4698      	movls	r8, r3
 8010296:	f022 0204 	bic.w	r2, r2, #4
 801029a:	2303      	movs	r3, #3
 801029c:	6123      	str	r3, [r4, #16]
 801029e:	6022      	str	r2, [r4, #0]
 80102a0:	f04f 0a00 	mov.w	sl, #0
 80102a4:	9700      	str	r7, [sp, #0]
 80102a6:	4633      	mov	r3, r6
 80102a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80102aa:	4621      	mov	r1, r4
 80102ac:	4628      	mov	r0, r5
 80102ae:	f000 f9d1 	bl	8010654 <_printf_common>
 80102b2:	3001      	adds	r0, #1
 80102b4:	f040 8089 	bne.w	80103ca <_printf_float+0x1aa>
 80102b8:	f04f 30ff 	mov.w	r0, #4294967295
 80102bc:	b00d      	add	sp, #52	@ 0x34
 80102be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80102c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ca:	d709      	bvc.n	80102e0 <_printf_float+0xc0>
 80102cc:	ee10 3a90 	vmov	r3, s1
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	bfbc      	itt	lt
 80102d4:	232d      	movlt	r3, #45	@ 0x2d
 80102d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80102da:	497d      	ldr	r1, [pc, #500]	@ (80104d0 <_printf_float+0x2b0>)
 80102dc:	4b7d      	ldr	r3, [pc, #500]	@ (80104d4 <_printf_float+0x2b4>)
 80102de:	e7d5      	b.n	801028c <_printf_float+0x6c>
 80102e0:	6863      	ldr	r3, [r4, #4]
 80102e2:	1c59      	adds	r1, r3, #1
 80102e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80102e8:	d139      	bne.n	801035e <_printf_float+0x13e>
 80102ea:	2306      	movs	r3, #6
 80102ec:	6063      	str	r3, [r4, #4]
 80102ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80102f2:	2300      	movs	r3, #0
 80102f4:	6022      	str	r2, [r4, #0]
 80102f6:	9303      	str	r3, [sp, #12]
 80102f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80102fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80102fe:	ab09      	add	r3, sp, #36	@ 0x24
 8010300:	9300      	str	r3, [sp, #0]
 8010302:	6861      	ldr	r1, [r4, #4]
 8010304:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010308:	4628      	mov	r0, r5
 801030a:	f7ff fefb 	bl	8010104 <__cvt>
 801030e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010312:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010314:	4680      	mov	r8, r0
 8010316:	d129      	bne.n	801036c <_printf_float+0x14c>
 8010318:	1cc8      	adds	r0, r1, #3
 801031a:	db02      	blt.n	8010322 <_printf_float+0x102>
 801031c:	6863      	ldr	r3, [r4, #4]
 801031e:	4299      	cmp	r1, r3
 8010320:	dd41      	ble.n	80103a6 <_printf_float+0x186>
 8010322:	f1a9 0902 	sub.w	r9, r9, #2
 8010326:	fa5f f989 	uxtb.w	r9, r9
 801032a:	3901      	subs	r1, #1
 801032c:	464a      	mov	r2, r9
 801032e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010332:	9109      	str	r1, [sp, #36]	@ 0x24
 8010334:	f7ff ff3a 	bl	80101ac <__exponent>
 8010338:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801033a:	1813      	adds	r3, r2, r0
 801033c:	2a01      	cmp	r2, #1
 801033e:	4682      	mov	sl, r0
 8010340:	6123      	str	r3, [r4, #16]
 8010342:	dc02      	bgt.n	801034a <_printf_float+0x12a>
 8010344:	6822      	ldr	r2, [r4, #0]
 8010346:	07d2      	lsls	r2, r2, #31
 8010348:	d501      	bpl.n	801034e <_printf_float+0x12e>
 801034a:	3301      	adds	r3, #1
 801034c:	6123      	str	r3, [r4, #16]
 801034e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010352:	2b00      	cmp	r3, #0
 8010354:	d0a6      	beq.n	80102a4 <_printf_float+0x84>
 8010356:	232d      	movs	r3, #45	@ 0x2d
 8010358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801035c:	e7a2      	b.n	80102a4 <_printf_float+0x84>
 801035e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010362:	d1c4      	bne.n	80102ee <_printf_float+0xce>
 8010364:	2b00      	cmp	r3, #0
 8010366:	d1c2      	bne.n	80102ee <_printf_float+0xce>
 8010368:	2301      	movs	r3, #1
 801036a:	e7bf      	b.n	80102ec <_printf_float+0xcc>
 801036c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010370:	d9db      	bls.n	801032a <_printf_float+0x10a>
 8010372:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8010376:	d118      	bne.n	80103aa <_printf_float+0x18a>
 8010378:	2900      	cmp	r1, #0
 801037a:	6863      	ldr	r3, [r4, #4]
 801037c:	dd0b      	ble.n	8010396 <_printf_float+0x176>
 801037e:	6121      	str	r1, [r4, #16]
 8010380:	b913      	cbnz	r3, 8010388 <_printf_float+0x168>
 8010382:	6822      	ldr	r2, [r4, #0]
 8010384:	07d0      	lsls	r0, r2, #31
 8010386:	d502      	bpl.n	801038e <_printf_float+0x16e>
 8010388:	3301      	adds	r3, #1
 801038a:	440b      	add	r3, r1
 801038c:	6123      	str	r3, [r4, #16]
 801038e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010390:	f04f 0a00 	mov.w	sl, #0
 8010394:	e7db      	b.n	801034e <_printf_float+0x12e>
 8010396:	b913      	cbnz	r3, 801039e <_printf_float+0x17e>
 8010398:	6822      	ldr	r2, [r4, #0]
 801039a:	07d2      	lsls	r2, r2, #31
 801039c:	d501      	bpl.n	80103a2 <_printf_float+0x182>
 801039e:	3302      	adds	r3, #2
 80103a0:	e7f4      	b.n	801038c <_printf_float+0x16c>
 80103a2:	2301      	movs	r3, #1
 80103a4:	e7f2      	b.n	801038c <_printf_float+0x16c>
 80103a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80103aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103ac:	4299      	cmp	r1, r3
 80103ae:	db05      	blt.n	80103bc <_printf_float+0x19c>
 80103b0:	6823      	ldr	r3, [r4, #0]
 80103b2:	6121      	str	r1, [r4, #16]
 80103b4:	07d8      	lsls	r0, r3, #31
 80103b6:	d5ea      	bpl.n	801038e <_printf_float+0x16e>
 80103b8:	1c4b      	adds	r3, r1, #1
 80103ba:	e7e7      	b.n	801038c <_printf_float+0x16c>
 80103bc:	2900      	cmp	r1, #0
 80103be:	bfd4      	ite	le
 80103c0:	f1c1 0202 	rsble	r2, r1, #2
 80103c4:	2201      	movgt	r2, #1
 80103c6:	4413      	add	r3, r2
 80103c8:	e7e0      	b.n	801038c <_printf_float+0x16c>
 80103ca:	6823      	ldr	r3, [r4, #0]
 80103cc:	055a      	lsls	r2, r3, #21
 80103ce:	d407      	bmi.n	80103e0 <_printf_float+0x1c0>
 80103d0:	6923      	ldr	r3, [r4, #16]
 80103d2:	4642      	mov	r2, r8
 80103d4:	4631      	mov	r1, r6
 80103d6:	4628      	mov	r0, r5
 80103d8:	47b8      	blx	r7
 80103da:	3001      	adds	r0, #1
 80103dc:	d12a      	bne.n	8010434 <_printf_float+0x214>
 80103de:	e76b      	b.n	80102b8 <_printf_float+0x98>
 80103e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80103e4:	f240 80e0 	bls.w	80105a8 <_printf_float+0x388>
 80103e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80103ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80103f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f4:	d133      	bne.n	801045e <_printf_float+0x23e>
 80103f6:	4a38      	ldr	r2, [pc, #224]	@ (80104d8 <_printf_float+0x2b8>)
 80103f8:	2301      	movs	r3, #1
 80103fa:	4631      	mov	r1, r6
 80103fc:	4628      	mov	r0, r5
 80103fe:	47b8      	blx	r7
 8010400:	3001      	adds	r0, #1
 8010402:	f43f af59 	beq.w	80102b8 <_printf_float+0x98>
 8010406:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801040a:	4543      	cmp	r3, r8
 801040c:	db02      	blt.n	8010414 <_printf_float+0x1f4>
 801040e:	6823      	ldr	r3, [r4, #0]
 8010410:	07d8      	lsls	r0, r3, #31
 8010412:	d50f      	bpl.n	8010434 <_printf_float+0x214>
 8010414:	9b05      	ldr	r3, [sp, #20]
 8010416:	465a      	mov	r2, fp
 8010418:	4631      	mov	r1, r6
 801041a:	4628      	mov	r0, r5
 801041c:	47b8      	blx	r7
 801041e:	3001      	adds	r0, #1
 8010420:	f43f af4a 	beq.w	80102b8 <_printf_float+0x98>
 8010424:	f04f 0900 	mov.w	r9, #0
 8010428:	f108 38ff 	add.w	r8, r8, #4294967295
 801042c:	f104 0a1a 	add.w	sl, r4, #26
 8010430:	45c8      	cmp	r8, r9
 8010432:	dc09      	bgt.n	8010448 <_printf_float+0x228>
 8010434:	6823      	ldr	r3, [r4, #0]
 8010436:	079b      	lsls	r3, r3, #30
 8010438:	f100 8107 	bmi.w	801064a <_printf_float+0x42a>
 801043c:	68e0      	ldr	r0, [r4, #12]
 801043e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010440:	4298      	cmp	r0, r3
 8010442:	bfb8      	it	lt
 8010444:	4618      	movlt	r0, r3
 8010446:	e739      	b.n	80102bc <_printf_float+0x9c>
 8010448:	2301      	movs	r3, #1
 801044a:	4652      	mov	r2, sl
 801044c:	4631      	mov	r1, r6
 801044e:	4628      	mov	r0, r5
 8010450:	47b8      	blx	r7
 8010452:	3001      	adds	r0, #1
 8010454:	f43f af30 	beq.w	80102b8 <_printf_float+0x98>
 8010458:	f109 0901 	add.w	r9, r9, #1
 801045c:	e7e8      	b.n	8010430 <_printf_float+0x210>
 801045e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010460:	2b00      	cmp	r3, #0
 8010462:	dc3b      	bgt.n	80104dc <_printf_float+0x2bc>
 8010464:	4a1c      	ldr	r2, [pc, #112]	@ (80104d8 <_printf_float+0x2b8>)
 8010466:	2301      	movs	r3, #1
 8010468:	4631      	mov	r1, r6
 801046a:	4628      	mov	r0, r5
 801046c:	47b8      	blx	r7
 801046e:	3001      	adds	r0, #1
 8010470:	f43f af22 	beq.w	80102b8 <_printf_float+0x98>
 8010474:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010478:	ea59 0303 	orrs.w	r3, r9, r3
 801047c:	d102      	bne.n	8010484 <_printf_float+0x264>
 801047e:	6823      	ldr	r3, [r4, #0]
 8010480:	07d9      	lsls	r1, r3, #31
 8010482:	d5d7      	bpl.n	8010434 <_printf_float+0x214>
 8010484:	9b05      	ldr	r3, [sp, #20]
 8010486:	465a      	mov	r2, fp
 8010488:	4631      	mov	r1, r6
 801048a:	4628      	mov	r0, r5
 801048c:	47b8      	blx	r7
 801048e:	3001      	adds	r0, #1
 8010490:	f43f af12 	beq.w	80102b8 <_printf_float+0x98>
 8010494:	f04f 0a00 	mov.w	sl, #0
 8010498:	f104 0b1a 	add.w	fp, r4, #26
 801049c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801049e:	425b      	negs	r3, r3
 80104a0:	4553      	cmp	r3, sl
 80104a2:	dc01      	bgt.n	80104a8 <_printf_float+0x288>
 80104a4:	464b      	mov	r3, r9
 80104a6:	e794      	b.n	80103d2 <_printf_float+0x1b2>
 80104a8:	2301      	movs	r3, #1
 80104aa:	465a      	mov	r2, fp
 80104ac:	4631      	mov	r1, r6
 80104ae:	4628      	mov	r0, r5
 80104b0:	47b8      	blx	r7
 80104b2:	3001      	adds	r0, #1
 80104b4:	f43f af00 	beq.w	80102b8 <_printf_float+0x98>
 80104b8:	f10a 0a01 	add.w	sl, sl, #1
 80104bc:	e7ee      	b.n	801049c <_printf_float+0x27c>
 80104be:	bf00      	nop
 80104c0:	ffffffff 	.word	0xffffffff
 80104c4:	7fefffff 	.word	0x7fefffff
 80104c8:	080268e0 	.word	0x080268e0
 80104cc:	080268dc 	.word	0x080268dc
 80104d0:	080268e8 	.word	0x080268e8
 80104d4:	080268e4 	.word	0x080268e4
 80104d8:	080268ec 	.word	0x080268ec
 80104dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80104de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80104e2:	4553      	cmp	r3, sl
 80104e4:	bfa8      	it	ge
 80104e6:	4653      	movge	r3, sl
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	4699      	mov	r9, r3
 80104ec:	dc37      	bgt.n	801055e <_printf_float+0x33e>
 80104ee:	2300      	movs	r3, #0
 80104f0:	9307      	str	r3, [sp, #28]
 80104f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104f6:	f104 021a 	add.w	r2, r4, #26
 80104fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80104fc:	9907      	ldr	r1, [sp, #28]
 80104fe:	9306      	str	r3, [sp, #24]
 8010500:	eba3 0309 	sub.w	r3, r3, r9
 8010504:	428b      	cmp	r3, r1
 8010506:	dc31      	bgt.n	801056c <_printf_float+0x34c>
 8010508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801050a:	459a      	cmp	sl, r3
 801050c:	dc3b      	bgt.n	8010586 <_printf_float+0x366>
 801050e:	6823      	ldr	r3, [r4, #0]
 8010510:	07da      	lsls	r2, r3, #31
 8010512:	d438      	bmi.n	8010586 <_printf_float+0x366>
 8010514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010516:	ebaa 0903 	sub.w	r9, sl, r3
 801051a:	9b06      	ldr	r3, [sp, #24]
 801051c:	ebaa 0303 	sub.w	r3, sl, r3
 8010520:	4599      	cmp	r9, r3
 8010522:	bfa8      	it	ge
 8010524:	4699      	movge	r9, r3
 8010526:	f1b9 0f00 	cmp.w	r9, #0
 801052a:	dc34      	bgt.n	8010596 <_printf_float+0x376>
 801052c:	f04f 0800 	mov.w	r8, #0
 8010530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010534:	f104 0b1a 	add.w	fp, r4, #26
 8010538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801053a:	ebaa 0303 	sub.w	r3, sl, r3
 801053e:	eba3 0309 	sub.w	r3, r3, r9
 8010542:	4543      	cmp	r3, r8
 8010544:	f77f af76 	ble.w	8010434 <_printf_float+0x214>
 8010548:	2301      	movs	r3, #1
 801054a:	465a      	mov	r2, fp
 801054c:	4631      	mov	r1, r6
 801054e:	4628      	mov	r0, r5
 8010550:	47b8      	blx	r7
 8010552:	3001      	adds	r0, #1
 8010554:	f43f aeb0 	beq.w	80102b8 <_printf_float+0x98>
 8010558:	f108 0801 	add.w	r8, r8, #1
 801055c:	e7ec      	b.n	8010538 <_printf_float+0x318>
 801055e:	4642      	mov	r2, r8
 8010560:	4631      	mov	r1, r6
 8010562:	4628      	mov	r0, r5
 8010564:	47b8      	blx	r7
 8010566:	3001      	adds	r0, #1
 8010568:	d1c1      	bne.n	80104ee <_printf_float+0x2ce>
 801056a:	e6a5      	b.n	80102b8 <_printf_float+0x98>
 801056c:	2301      	movs	r3, #1
 801056e:	4631      	mov	r1, r6
 8010570:	4628      	mov	r0, r5
 8010572:	9206      	str	r2, [sp, #24]
 8010574:	47b8      	blx	r7
 8010576:	3001      	adds	r0, #1
 8010578:	f43f ae9e 	beq.w	80102b8 <_printf_float+0x98>
 801057c:	9b07      	ldr	r3, [sp, #28]
 801057e:	9a06      	ldr	r2, [sp, #24]
 8010580:	3301      	adds	r3, #1
 8010582:	9307      	str	r3, [sp, #28]
 8010584:	e7b9      	b.n	80104fa <_printf_float+0x2da>
 8010586:	9b05      	ldr	r3, [sp, #20]
 8010588:	465a      	mov	r2, fp
 801058a:	4631      	mov	r1, r6
 801058c:	4628      	mov	r0, r5
 801058e:	47b8      	blx	r7
 8010590:	3001      	adds	r0, #1
 8010592:	d1bf      	bne.n	8010514 <_printf_float+0x2f4>
 8010594:	e690      	b.n	80102b8 <_printf_float+0x98>
 8010596:	9a06      	ldr	r2, [sp, #24]
 8010598:	464b      	mov	r3, r9
 801059a:	4442      	add	r2, r8
 801059c:	4631      	mov	r1, r6
 801059e:	4628      	mov	r0, r5
 80105a0:	47b8      	blx	r7
 80105a2:	3001      	adds	r0, #1
 80105a4:	d1c2      	bne.n	801052c <_printf_float+0x30c>
 80105a6:	e687      	b.n	80102b8 <_printf_float+0x98>
 80105a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80105ac:	f1b9 0f01 	cmp.w	r9, #1
 80105b0:	dc01      	bgt.n	80105b6 <_printf_float+0x396>
 80105b2:	07db      	lsls	r3, r3, #31
 80105b4:	d536      	bpl.n	8010624 <_printf_float+0x404>
 80105b6:	2301      	movs	r3, #1
 80105b8:	4642      	mov	r2, r8
 80105ba:	4631      	mov	r1, r6
 80105bc:	4628      	mov	r0, r5
 80105be:	47b8      	blx	r7
 80105c0:	3001      	adds	r0, #1
 80105c2:	f43f ae79 	beq.w	80102b8 <_printf_float+0x98>
 80105c6:	9b05      	ldr	r3, [sp, #20]
 80105c8:	465a      	mov	r2, fp
 80105ca:	4631      	mov	r1, r6
 80105cc:	4628      	mov	r0, r5
 80105ce:	47b8      	blx	r7
 80105d0:	3001      	adds	r0, #1
 80105d2:	f43f ae71 	beq.w	80102b8 <_printf_float+0x98>
 80105d6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80105da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80105de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80105e6:	d018      	beq.n	801061a <_printf_float+0x3fa>
 80105e8:	464b      	mov	r3, r9
 80105ea:	f108 0201 	add.w	r2, r8, #1
 80105ee:	4631      	mov	r1, r6
 80105f0:	4628      	mov	r0, r5
 80105f2:	47b8      	blx	r7
 80105f4:	3001      	adds	r0, #1
 80105f6:	d10c      	bne.n	8010612 <_printf_float+0x3f2>
 80105f8:	e65e      	b.n	80102b8 <_printf_float+0x98>
 80105fa:	2301      	movs	r3, #1
 80105fc:	465a      	mov	r2, fp
 80105fe:	4631      	mov	r1, r6
 8010600:	4628      	mov	r0, r5
 8010602:	47b8      	blx	r7
 8010604:	3001      	adds	r0, #1
 8010606:	f43f ae57 	beq.w	80102b8 <_printf_float+0x98>
 801060a:	f108 0801 	add.w	r8, r8, #1
 801060e:	45c8      	cmp	r8, r9
 8010610:	dbf3      	blt.n	80105fa <_printf_float+0x3da>
 8010612:	4653      	mov	r3, sl
 8010614:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010618:	e6dc      	b.n	80103d4 <_printf_float+0x1b4>
 801061a:	f04f 0800 	mov.w	r8, #0
 801061e:	f104 0b1a 	add.w	fp, r4, #26
 8010622:	e7f4      	b.n	801060e <_printf_float+0x3ee>
 8010624:	2301      	movs	r3, #1
 8010626:	4642      	mov	r2, r8
 8010628:	e7e1      	b.n	80105ee <_printf_float+0x3ce>
 801062a:	2301      	movs	r3, #1
 801062c:	464a      	mov	r2, r9
 801062e:	4631      	mov	r1, r6
 8010630:	4628      	mov	r0, r5
 8010632:	47b8      	blx	r7
 8010634:	3001      	adds	r0, #1
 8010636:	f43f ae3f 	beq.w	80102b8 <_printf_float+0x98>
 801063a:	f108 0801 	add.w	r8, r8, #1
 801063e:	68e3      	ldr	r3, [r4, #12]
 8010640:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010642:	1a5b      	subs	r3, r3, r1
 8010644:	4543      	cmp	r3, r8
 8010646:	dcf0      	bgt.n	801062a <_printf_float+0x40a>
 8010648:	e6f8      	b.n	801043c <_printf_float+0x21c>
 801064a:	f04f 0800 	mov.w	r8, #0
 801064e:	f104 0919 	add.w	r9, r4, #25
 8010652:	e7f4      	b.n	801063e <_printf_float+0x41e>

08010654 <_printf_common>:
 8010654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010658:	4616      	mov	r6, r2
 801065a:	4698      	mov	r8, r3
 801065c:	688a      	ldr	r2, [r1, #8]
 801065e:	690b      	ldr	r3, [r1, #16]
 8010660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010664:	4293      	cmp	r3, r2
 8010666:	bfb8      	it	lt
 8010668:	4613      	movlt	r3, r2
 801066a:	6033      	str	r3, [r6, #0]
 801066c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010670:	4607      	mov	r7, r0
 8010672:	460c      	mov	r4, r1
 8010674:	b10a      	cbz	r2, 801067a <_printf_common+0x26>
 8010676:	3301      	adds	r3, #1
 8010678:	6033      	str	r3, [r6, #0]
 801067a:	6823      	ldr	r3, [r4, #0]
 801067c:	0699      	lsls	r1, r3, #26
 801067e:	bf42      	ittt	mi
 8010680:	6833      	ldrmi	r3, [r6, #0]
 8010682:	3302      	addmi	r3, #2
 8010684:	6033      	strmi	r3, [r6, #0]
 8010686:	6825      	ldr	r5, [r4, #0]
 8010688:	f015 0506 	ands.w	r5, r5, #6
 801068c:	d106      	bne.n	801069c <_printf_common+0x48>
 801068e:	f104 0a19 	add.w	sl, r4, #25
 8010692:	68e3      	ldr	r3, [r4, #12]
 8010694:	6832      	ldr	r2, [r6, #0]
 8010696:	1a9b      	subs	r3, r3, r2
 8010698:	42ab      	cmp	r3, r5
 801069a:	dc26      	bgt.n	80106ea <_printf_common+0x96>
 801069c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80106a0:	6822      	ldr	r2, [r4, #0]
 80106a2:	3b00      	subs	r3, #0
 80106a4:	bf18      	it	ne
 80106a6:	2301      	movne	r3, #1
 80106a8:	0692      	lsls	r2, r2, #26
 80106aa:	d42b      	bmi.n	8010704 <_printf_common+0xb0>
 80106ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80106b0:	4641      	mov	r1, r8
 80106b2:	4638      	mov	r0, r7
 80106b4:	47c8      	blx	r9
 80106b6:	3001      	adds	r0, #1
 80106b8:	d01e      	beq.n	80106f8 <_printf_common+0xa4>
 80106ba:	6823      	ldr	r3, [r4, #0]
 80106bc:	6922      	ldr	r2, [r4, #16]
 80106be:	f003 0306 	and.w	r3, r3, #6
 80106c2:	2b04      	cmp	r3, #4
 80106c4:	bf02      	ittt	eq
 80106c6:	68e5      	ldreq	r5, [r4, #12]
 80106c8:	6833      	ldreq	r3, [r6, #0]
 80106ca:	1aed      	subeq	r5, r5, r3
 80106cc:	68a3      	ldr	r3, [r4, #8]
 80106ce:	bf0c      	ite	eq
 80106d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106d4:	2500      	movne	r5, #0
 80106d6:	4293      	cmp	r3, r2
 80106d8:	bfc4      	itt	gt
 80106da:	1a9b      	subgt	r3, r3, r2
 80106dc:	18ed      	addgt	r5, r5, r3
 80106de:	2600      	movs	r6, #0
 80106e0:	341a      	adds	r4, #26
 80106e2:	42b5      	cmp	r5, r6
 80106e4:	d11a      	bne.n	801071c <_printf_common+0xc8>
 80106e6:	2000      	movs	r0, #0
 80106e8:	e008      	b.n	80106fc <_printf_common+0xa8>
 80106ea:	2301      	movs	r3, #1
 80106ec:	4652      	mov	r2, sl
 80106ee:	4641      	mov	r1, r8
 80106f0:	4638      	mov	r0, r7
 80106f2:	47c8      	blx	r9
 80106f4:	3001      	adds	r0, #1
 80106f6:	d103      	bne.n	8010700 <_printf_common+0xac>
 80106f8:	f04f 30ff 	mov.w	r0, #4294967295
 80106fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010700:	3501      	adds	r5, #1
 8010702:	e7c6      	b.n	8010692 <_printf_common+0x3e>
 8010704:	18e1      	adds	r1, r4, r3
 8010706:	1c5a      	adds	r2, r3, #1
 8010708:	2030      	movs	r0, #48	@ 0x30
 801070a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801070e:	4422      	add	r2, r4
 8010710:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010714:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010718:	3302      	adds	r3, #2
 801071a:	e7c7      	b.n	80106ac <_printf_common+0x58>
 801071c:	2301      	movs	r3, #1
 801071e:	4622      	mov	r2, r4
 8010720:	4641      	mov	r1, r8
 8010722:	4638      	mov	r0, r7
 8010724:	47c8      	blx	r9
 8010726:	3001      	adds	r0, #1
 8010728:	d0e6      	beq.n	80106f8 <_printf_common+0xa4>
 801072a:	3601      	adds	r6, #1
 801072c:	e7d9      	b.n	80106e2 <_printf_common+0x8e>
	...

08010730 <_printf_i>:
 8010730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010734:	7e0f      	ldrb	r7, [r1, #24]
 8010736:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010738:	2f78      	cmp	r7, #120	@ 0x78
 801073a:	4691      	mov	r9, r2
 801073c:	4680      	mov	r8, r0
 801073e:	460c      	mov	r4, r1
 8010740:	469a      	mov	sl, r3
 8010742:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010746:	d807      	bhi.n	8010758 <_printf_i+0x28>
 8010748:	2f62      	cmp	r7, #98	@ 0x62
 801074a:	d80a      	bhi.n	8010762 <_printf_i+0x32>
 801074c:	2f00      	cmp	r7, #0
 801074e:	f000 80d1 	beq.w	80108f4 <_printf_i+0x1c4>
 8010752:	2f58      	cmp	r7, #88	@ 0x58
 8010754:	f000 80b8 	beq.w	80108c8 <_printf_i+0x198>
 8010758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801075c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010760:	e03a      	b.n	80107d8 <_printf_i+0xa8>
 8010762:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010766:	2b15      	cmp	r3, #21
 8010768:	d8f6      	bhi.n	8010758 <_printf_i+0x28>
 801076a:	a101      	add	r1, pc, #4	@ (adr r1, 8010770 <_printf_i+0x40>)
 801076c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010770:	080107c9 	.word	0x080107c9
 8010774:	080107dd 	.word	0x080107dd
 8010778:	08010759 	.word	0x08010759
 801077c:	08010759 	.word	0x08010759
 8010780:	08010759 	.word	0x08010759
 8010784:	08010759 	.word	0x08010759
 8010788:	080107dd 	.word	0x080107dd
 801078c:	08010759 	.word	0x08010759
 8010790:	08010759 	.word	0x08010759
 8010794:	08010759 	.word	0x08010759
 8010798:	08010759 	.word	0x08010759
 801079c:	080108db 	.word	0x080108db
 80107a0:	08010807 	.word	0x08010807
 80107a4:	08010895 	.word	0x08010895
 80107a8:	08010759 	.word	0x08010759
 80107ac:	08010759 	.word	0x08010759
 80107b0:	080108fd 	.word	0x080108fd
 80107b4:	08010759 	.word	0x08010759
 80107b8:	08010807 	.word	0x08010807
 80107bc:	08010759 	.word	0x08010759
 80107c0:	08010759 	.word	0x08010759
 80107c4:	0801089d 	.word	0x0801089d
 80107c8:	6833      	ldr	r3, [r6, #0]
 80107ca:	1d1a      	adds	r2, r3, #4
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	6032      	str	r2, [r6, #0]
 80107d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80107d8:	2301      	movs	r3, #1
 80107da:	e09c      	b.n	8010916 <_printf_i+0x1e6>
 80107dc:	6833      	ldr	r3, [r6, #0]
 80107de:	6820      	ldr	r0, [r4, #0]
 80107e0:	1d19      	adds	r1, r3, #4
 80107e2:	6031      	str	r1, [r6, #0]
 80107e4:	0606      	lsls	r6, r0, #24
 80107e6:	d501      	bpl.n	80107ec <_printf_i+0xbc>
 80107e8:	681d      	ldr	r5, [r3, #0]
 80107ea:	e003      	b.n	80107f4 <_printf_i+0xc4>
 80107ec:	0645      	lsls	r5, r0, #25
 80107ee:	d5fb      	bpl.n	80107e8 <_printf_i+0xb8>
 80107f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80107f4:	2d00      	cmp	r5, #0
 80107f6:	da03      	bge.n	8010800 <_printf_i+0xd0>
 80107f8:	232d      	movs	r3, #45	@ 0x2d
 80107fa:	426d      	negs	r5, r5
 80107fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010800:	4858      	ldr	r0, [pc, #352]	@ (8010964 <_printf_i+0x234>)
 8010802:	230a      	movs	r3, #10
 8010804:	e011      	b.n	801082a <_printf_i+0xfa>
 8010806:	6821      	ldr	r1, [r4, #0]
 8010808:	6833      	ldr	r3, [r6, #0]
 801080a:	0608      	lsls	r0, r1, #24
 801080c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010810:	d402      	bmi.n	8010818 <_printf_i+0xe8>
 8010812:	0649      	lsls	r1, r1, #25
 8010814:	bf48      	it	mi
 8010816:	b2ad      	uxthmi	r5, r5
 8010818:	2f6f      	cmp	r7, #111	@ 0x6f
 801081a:	4852      	ldr	r0, [pc, #328]	@ (8010964 <_printf_i+0x234>)
 801081c:	6033      	str	r3, [r6, #0]
 801081e:	bf14      	ite	ne
 8010820:	230a      	movne	r3, #10
 8010822:	2308      	moveq	r3, #8
 8010824:	2100      	movs	r1, #0
 8010826:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801082a:	6866      	ldr	r6, [r4, #4]
 801082c:	60a6      	str	r6, [r4, #8]
 801082e:	2e00      	cmp	r6, #0
 8010830:	db05      	blt.n	801083e <_printf_i+0x10e>
 8010832:	6821      	ldr	r1, [r4, #0]
 8010834:	432e      	orrs	r6, r5
 8010836:	f021 0104 	bic.w	r1, r1, #4
 801083a:	6021      	str	r1, [r4, #0]
 801083c:	d04b      	beq.n	80108d6 <_printf_i+0x1a6>
 801083e:	4616      	mov	r6, r2
 8010840:	fbb5 f1f3 	udiv	r1, r5, r3
 8010844:	fb03 5711 	mls	r7, r3, r1, r5
 8010848:	5dc7      	ldrb	r7, [r0, r7]
 801084a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801084e:	462f      	mov	r7, r5
 8010850:	42bb      	cmp	r3, r7
 8010852:	460d      	mov	r5, r1
 8010854:	d9f4      	bls.n	8010840 <_printf_i+0x110>
 8010856:	2b08      	cmp	r3, #8
 8010858:	d10b      	bne.n	8010872 <_printf_i+0x142>
 801085a:	6823      	ldr	r3, [r4, #0]
 801085c:	07df      	lsls	r7, r3, #31
 801085e:	d508      	bpl.n	8010872 <_printf_i+0x142>
 8010860:	6923      	ldr	r3, [r4, #16]
 8010862:	6861      	ldr	r1, [r4, #4]
 8010864:	4299      	cmp	r1, r3
 8010866:	bfde      	ittt	le
 8010868:	2330      	movle	r3, #48	@ 0x30
 801086a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801086e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010872:	1b92      	subs	r2, r2, r6
 8010874:	6122      	str	r2, [r4, #16]
 8010876:	f8cd a000 	str.w	sl, [sp]
 801087a:	464b      	mov	r3, r9
 801087c:	aa03      	add	r2, sp, #12
 801087e:	4621      	mov	r1, r4
 8010880:	4640      	mov	r0, r8
 8010882:	f7ff fee7 	bl	8010654 <_printf_common>
 8010886:	3001      	adds	r0, #1
 8010888:	d14a      	bne.n	8010920 <_printf_i+0x1f0>
 801088a:	f04f 30ff 	mov.w	r0, #4294967295
 801088e:	b004      	add	sp, #16
 8010890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010894:	6823      	ldr	r3, [r4, #0]
 8010896:	f043 0320 	orr.w	r3, r3, #32
 801089a:	6023      	str	r3, [r4, #0]
 801089c:	4832      	ldr	r0, [pc, #200]	@ (8010968 <_printf_i+0x238>)
 801089e:	2778      	movs	r7, #120	@ 0x78
 80108a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80108a4:	6823      	ldr	r3, [r4, #0]
 80108a6:	6831      	ldr	r1, [r6, #0]
 80108a8:	061f      	lsls	r7, r3, #24
 80108aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80108ae:	d402      	bmi.n	80108b6 <_printf_i+0x186>
 80108b0:	065f      	lsls	r7, r3, #25
 80108b2:	bf48      	it	mi
 80108b4:	b2ad      	uxthmi	r5, r5
 80108b6:	6031      	str	r1, [r6, #0]
 80108b8:	07d9      	lsls	r1, r3, #31
 80108ba:	bf44      	itt	mi
 80108bc:	f043 0320 	orrmi.w	r3, r3, #32
 80108c0:	6023      	strmi	r3, [r4, #0]
 80108c2:	b11d      	cbz	r5, 80108cc <_printf_i+0x19c>
 80108c4:	2310      	movs	r3, #16
 80108c6:	e7ad      	b.n	8010824 <_printf_i+0xf4>
 80108c8:	4826      	ldr	r0, [pc, #152]	@ (8010964 <_printf_i+0x234>)
 80108ca:	e7e9      	b.n	80108a0 <_printf_i+0x170>
 80108cc:	6823      	ldr	r3, [r4, #0]
 80108ce:	f023 0320 	bic.w	r3, r3, #32
 80108d2:	6023      	str	r3, [r4, #0]
 80108d4:	e7f6      	b.n	80108c4 <_printf_i+0x194>
 80108d6:	4616      	mov	r6, r2
 80108d8:	e7bd      	b.n	8010856 <_printf_i+0x126>
 80108da:	6833      	ldr	r3, [r6, #0]
 80108dc:	6825      	ldr	r5, [r4, #0]
 80108de:	6961      	ldr	r1, [r4, #20]
 80108e0:	1d18      	adds	r0, r3, #4
 80108e2:	6030      	str	r0, [r6, #0]
 80108e4:	062e      	lsls	r6, r5, #24
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	d501      	bpl.n	80108ee <_printf_i+0x1be>
 80108ea:	6019      	str	r1, [r3, #0]
 80108ec:	e002      	b.n	80108f4 <_printf_i+0x1c4>
 80108ee:	0668      	lsls	r0, r5, #25
 80108f0:	d5fb      	bpl.n	80108ea <_printf_i+0x1ba>
 80108f2:	8019      	strh	r1, [r3, #0]
 80108f4:	2300      	movs	r3, #0
 80108f6:	6123      	str	r3, [r4, #16]
 80108f8:	4616      	mov	r6, r2
 80108fa:	e7bc      	b.n	8010876 <_printf_i+0x146>
 80108fc:	6833      	ldr	r3, [r6, #0]
 80108fe:	1d1a      	adds	r2, r3, #4
 8010900:	6032      	str	r2, [r6, #0]
 8010902:	681e      	ldr	r6, [r3, #0]
 8010904:	6862      	ldr	r2, [r4, #4]
 8010906:	2100      	movs	r1, #0
 8010908:	4630      	mov	r0, r6
 801090a:	f7ef fcf9 	bl	8000300 <memchr>
 801090e:	b108      	cbz	r0, 8010914 <_printf_i+0x1e4>
 8010910:	1b80      	subs	r0, r0, r6
 8010912:	6060      	str	r0, [r4, #4]
 8010914:	6863      	ldr	r3, [r4, #4]
 8010916:	6123      	str	r3, [r4, #16]
 8010918:	2300      	movs	r3, #0
 801091a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801091e:	e7aa      	b.n	8010876 <_printf_i+0x146>
 8010920:	6923      	ldr	r3, [r4, #16]
 8010922:	4632      	mov	r2, r6
 8010924:	4649      	mov	r1, r9
 8010926:	4640      	mov	r0, r8
 8010928:	47d0      	blx	sl
 801092a:	3001      	adds	r0, #1
 801092c:	d0ad      	beq.n	801088a <_printf_i+0x15a>
 801092e:	6823      	ldr	r3, [r4, #0]
 8010930:	079b      	lsls	r3, r3, #30
 8010932:	d413      	bmi.n	801095c <_printf_i+0x22c>
 8010934:	68e0      	ldr	r0, [r4, #12]
 8010936:	9b03      	ldr	r3, [sp, #12]
 8010938:	4298      	cmp	r0, r3
 801093a:	bfb8      	it	lt
 801093c:	4618      	movlt	r0, r3
 801093e:	e7a6      	b.n	801088e <_printf_i+0x15e>
 8010940:	2301      	movs	r3, #1
 8010942:	4632      	mov	r2, r6
 8010944:	4649      	mov	r1, r9
 8010946:	4640      	mov	r0, r8
 8010948:	47d0      	blx	sl
 801094a:	3001      	adds	r0, #1
 801094c:	d09d      	beq.n	801088a <_printf_i+0x15a>
 801094e:	3501      	adds	r5, #1
 8010950:	68e3      	ldr	r3, [r4, #12]
 8010952:	9903      	ldr	r1, [sp, #12]
 8010954:	1a5b      	subs	r3, r3, r1
 8010956:	42ab      	cmp	r3, r5
 8010958:	dcf2      	bgt.n	8010940 <_printf_i+0x210>
 801095a:	e7eb      	b.n	8010934 <_printf_i+0x204>
 801095c:	2500      	movs	r5, #0
 801095e:	f104 0619 	add.w	r6, r4, #25
 8010962:	e7f5      	b.n	8010950 <_printf_i+0x220>
 8010964:	080268ee 	.word	0x080268ee
 8010968:	080268ff 	.word	0x080268ff

0801096c <std>:
 801096c:	2300      	movs	r3, #0
 801096e:	b510      	push	{r4, lr}
 8010970:	4604      	mov	r4, r0
 8010972:	e9c0 3300 	strd	r3, r3, [r0]
 8010976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801097a:	6083      	str	r3, [r0, #8]
 801097c:	8181      	strh	r1, [r0, #12]
 801097e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010980:	81c2      	strh	r2, [r0, #14]
 8010982:	6183      	str	r3, [r0, #24]
 8010984:	4619      	mov	r1, r3
 8010986:	2208      	movs	r2, #8
 8010988:	305c      	adds	r0, #92	@ 0x5c
 801098a:	f000 f9f9 	bl	8010d80 <memset>
 801098e:	4b0d      	ldr	r3, [pc, #52]	@ (80109c4 <std+0x58>)
 8010990:	6263      	str	r3, [r4, #36]	@ 0x24
 8010992:	4b0d      	ldr	r3, [pc, #52]	@ (80109c8 <std+0x5c>)
 8010994:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010996:	4b0d      	ldr	r3, [pc, #52]	@ (80109cc <std+0x60>)
 8010998:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801099a:	4b0d      	ldr	r3, [pc, #52]	@ (80109d0 <std+0x64>)
 801099c:	6323      	str	r3, [r4, #48]	@ 0x30
 801099e:	4b0d      	ldr	r3, [pc, #52]	@ (80109d4 <std+0x68>)
 80109a0:	6224      	str	r4, [r4, #32]
 80109a2:	429c      	cmp	r4, r3
 80109a4:	d006      	beq.n	80109b4 <std+0x48>
 80109a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80109aa:	4294      	cmp	r4, r2
 80109ac:	d002      	beq.n	80109b4 <std+0x48>
 80109ae:	33d0      	adds	r3, #208	@ 0xd0
 80109b0:	429c      	cmp	r4, r3
 80109b2:	d105      	bne.n	80109c0 <std+0x54>
 80109b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80109b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109bc:	f000 ba6c 	b.w	8010e98 <__retarget_lock_init_recursive>
 80109c0:	bd10      	pop	{r4, pc}
 80109c2:	bf00      	nop
 80109c4:	08010bd1 	.word	0x08010bd1
 80109c8:	08010bf3 	.word	0x08010bf3
 80109cc:	08010c2b 	.word	0x08010c2b
 80109d0:	08010c4f 	.word	0x08010c4f
 80109d4:	200095f4 	.word	0x200095f4

080109d8 <stdio_exit_handler>:
 80109d8:	4a02      	ldr	r2, [pc, #8]	@ (80109e4 <stdio_exit_handler+0xc>)
 80109da:	4903      	ldr	r1, [pc, #12]	@ (80109e8 <stdio_exit_handler+0x10>)
 80109dc:	4803      	ldr	r0, [pc, #12]	@ (80109ec <stdio_exit_handler+0x14>)
 80109de:	f000 b869 	b.w	8010ab4 <_fwalk_sglue>
 80109e2:	bf00      	nop
 80109e4:	20000010 	.word	0x20000010
 80109e8:	080125a1 	.word	0x080125a1
 80109ec:	20000020 	.word	0x20000020

080109f0 <cleanup_stdio>:
 80109f0:	6841      	ldr	r1, [r0, #4]
 80109f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010a24 <cleanup_stdio+0x34>)
 80109f4:	4299      	cmp	r1, r3
 80109f6:	b510      	push	{r4, lr}
 80109f8:	4604      	mov	r4, r0
 80109fa:	d001      	beq.n	8010a00 <cleanup_stdio+0x10>
 80109fc:	f001 fdd0 	bl	80125a0 <_fflush_r>
 8010a00:	68a1      	ldr	r1, [r4, #8]
 8010a02:	4b09      	ldr	r3, [pc, #36]	@ (8010a28 <cleanup_stdio+0x38>)
 8010a04:	4299      	cmp	r1, r3
 8010a06:	d002      	beq.n	8010a0e <cleanup_stdio+0x1e>
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f001 fdc9 	bl	80125a0 <_fflush_r>
 8010a0e:	68e1      	ldr	r1, [r4, #12]
 8010a10:	4b06      	ldr	r3, [pc, #24]	@ (8010a2c <cleanup_stdio+0x3c>)
 8010a12:	4299      	cmp	r1, r3
 8010a14:	d004      	beq.n	8010a20 <cleanup_stdio+0x30>
 8010a16:	4620      	mov	r0, r4
 8010a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a1c:	f001 bdc0 	b.w	80125a0 <_fflush_r>
 8010a20:	bd10      	pop	{r4, pc}
 8010a22:	bf00      	nop
 8010a24:	200095f4 	.word	0x200095f4
 8010a28:	2000965c 	.word	0x2000965c
 8010a2c:	200096c4 	.word	0x200096c4

08010a30 <global_stdio_init.part.0>:
 8010a30:	b510      	push	{r4, lr}
 8010a32:	4b0b      	ldr	r3, [pc, #44]	@ (8010a60 <global_stdio_init.part.0+0x30>)
 8010a34:	4c0b      	ldr	r4, [pc, #44]	@ (8010a64 <global_stdio_init.part.0+0x34>)
 8010a36:	4a0c      	ldr	r2, [pc, #48]	@ (8010a68 <global_stdio_init.part.0+0x38>)
 8010a38:	601a      	str	r2, [r3, #0]
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	2104      	movs	r1, #4
 8010a40:	f7ff ff94 	bl	801096c <std>
 8010a44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010a48:	2201      	movs	r2, #1
 8010a4a:	2109      	movs	r1, #9
 8010a4c:	f7ff ff8e 	bl	801096c <std>
 8010a50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010a54:	2202      	movs	r2, #2
 8010a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a5a:	2112      	movs	r1, #18
 8010a5c:	f7ff bf86 	b.w	801096c <std>
 8010a60:	2000972c 	.word	0x2000972c
 8010a64:	200095f4 	.word	0x200095f4
 8010a68:	080109d9 	.word	0x080109d9

08010a6c <__sfp_lock_acquire>:
 8010a6c:	4801      	ldr	r0, [pc, #4]	@ (8010a74 <__sfp_lock_acquire+0x8>)
 8010a6e:	f000 ba14 	b.w	8010e9a <__retarget_lock_acquire_recursive>
 8010a72:	bf00      	nop
 8010a74:	20009735 	.word	0x20009735

08010a78 <__sfp_lock_release>:
 8010a78:	4801      	ldr	r0, [pc, #4]	@ (8010a80 <__sfp_lock_release+0x8>)
 8010a7a:	f000 ba0f 	b.w	8010e9c <__retarget_lock_release_recursive>
 8010a7e:	bf00      	nop
 8010a80:	20009735 	.word	0x20009735

08010a84 <__sinit>:
 8010a84:	b510      	push	{r4, lr}
 8010a86:	4604      	mov	r4, r0
 8010a88:	f7ff fff0 	bl	8010a6c <__sfp_lock_acquire>
 8010a8c:	6a23      	ldr	r3, [r4, #32]
 8010a8e:	b11b      	cbz	r3, 8010a98 <__sinit+0x14>
 8010a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a94:	f7ff bff0 	b.w	8010a78 <__sfp_lock_release>
 8010a98:	4b04      	ldr	r3, [pc, #16]	@ (8010aac <__sinit+0x28>)
 8010a9a:	6223      	str	r3, [r4, #32]
 8010a9c:	4b04      	ldr	r3, [pc, #16]	@ (8010ab0 <__sinit+0x2c>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d1f5      	bne.n	8010a90 <__sinit+0xc>
 8010aa4:	f7ff ffc4 	bl	8010a30 <global_stdio_init.part.0>
 8010aa8:	e7f2      	b.n	8010a90 <__sinit+0xc>
 8010aaa:	bf00      	nop
 8010aac:	080109f1 	.word	0x080109f1
 8010ab0:	2000972c 	.word	0x2000972c

08010ab4 <_fwalk_sglue>:
 8010ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ab8:	4607      	mov	r7, r0
 8010aba:	4688      	mov	r8, r1
 8010abc:	4614      	mov	r4, r2
 8010abe:	2600      	movs	r6, #0
 8010ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8010ac8:	d505      	bpl.n	8010ad6 <_fwalk_sglue+0x22>
 8010aca:	6824      	ldr	r4, [r4, #0]
 8010acc:	2c00      	cmp	r4, #0
 8010ace:	d1f7      	bne.n	8010ac0 <_fwalk_sglue+0xc>
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ad6:	89ab      	ldrh	r3, [r5, #12]
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d907      	bls.n	8010aec <_fwalk_sglue+0x38>
 8010adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	d003      	beq.n	8010aec <_fwalk_sglue+0x38>
 8010ae4:	4629      	mov	r1, r5
 8010ae6:	4638      	mov	r0, r7
 8010ae8:	47c0      	blx	r8
 8010aea:	4306      	orrs	r6, r0
 8010aec:	3568      	adds	r5, #104	@ 0x68
 8010aee:	e7e9      	b.n	8010ac4 <_fwalk_sglue+0x10>

08010af0 <iprintf>:
 8010af0:	b40f      	push	{r0, r1, r2, r3}
 8010af2:	b507      	push	{r0, r1, r2, lr}
 8010af4:	4906      	ldr	r1, [pc, #24]	@ (8010b10 <iprintf+0x20>)
 8010af6:	ab04      	add	r3, sp, #16
 8010af8:	6808      	ldr	r0, [r1, #0]
 8010afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010afe:	6881      	ldr	r1, [r0, #8]
 8010b00:	9301      	str	r3, [sp, #4]
 8010b02:	f001 fbb1 	bl	8012268 <_vfiprintf_r>
 8010b06:	b003      	add	sp, #12
 8010b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b0c:	b004      	add	sp, #16
 8010b0e:	4770      	bx	lr
 8010b10:	2000001c 	.word	0x2000001c

08010b14 <_puts_r>:
 8010b14:	6a03      	ldr	r3, [r0, #32]
 8010b16:	b570      	push	{r4, r5, r6, lr}
 8010b18:	6884      	ldr	r4, [r0, #8]
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	460e      	mov	r6, r1
 8010b1e:	b90b      	cbnz	r3, 8010b24 <_puts_r+0x10>
 8010b20:	f7ff ffb0 	bl	8010a84 <__sinit>
 8010b24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b26:	07db      	lsls	r3, r3, #31
 8010b28:	d405      	bmi.n	8010b36 <_puts_r+0x22>
 8010b2a:	89a3      	ldrh	r3, [r4, #12]
 8010b2c:	0598      	lsls	r0, r3, #22
 8010b2e:	d402      	bmi.n	8010b36 <_puts_r+0x22>
 8010b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b32:	f000 f9b2 	bl	8010e9a <__retarget_lock_acquire_recursive>
 8010b36:	89a3      	ldrh	r3, [r4, #12]
 8010b38:	0719      	lsls	r1, r3, #28
 8010b3a:	d502      	bpl.n	8010b42 <_puts_r+0x2e>
 8010b3c:	6923      	ldr	r3, [r4, #16]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d135      	bne.n	8010bae <_puts_r+0x9a>
 8010b42:	4621      	mov	r1, r4
 8010b44:	4628      	mov	r0, r5
 8010b46:	f000 f8c5 	bl	8010cd4 <__swsetup_r>
 8010b4a:	b380      	cbz	r0, 8010bae <_puts_r+0x9a>
 8010b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8010b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b52:	07da      	lsls	r2, r3, #31
 8010b54:	d405      	bmi.n	8010b62 <_puts_r+0x4e>
 8010b56:	89a3      	ldrh	r3, [r4, #12]
 8010b58:	059b      	lsls	r3, r3, #22
 8010b5a:	d402      	bmi.n	8010b62 <_puts_r+0x4e>
 8010b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b5e:	f000 f99d 	bl	8010e9c <__retarget_lock_release_recursive>
 8010b62:	4628      	mov	r0, r5
 8010b64:	bd70      	pop	{r4, r5, r6, pc}
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	da04      	bge.n	8010b74 <_puts_r+0x60>
 8010b6a:	69a2      	ldr	r2, [r4, #24]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	dc17      	bgt.n	8010ba0 <_puts_r+0x8c>
 8010b70:	290a      	cmp	r1, #10
 8010b72:	d015      	beq.n	8010ba0 <_puts_r+0x8c>
 8010b74:	6823      	ldr	r3, [r4, #0]
 8010b76:	1c5a      	adds	r2, r3, #1
 8010b78:	6022      	str	r2, [r4, #0]
 8010b7a:	7019      	strb	r1, [r3, #0]
 8010b7c:	68a3      	ldr	r3, [r4, #8]
 8010b7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010b82:	3b01      	subs	r3, #1
 8010b84:	60a3      	str	r3, [r4, #8]
 8010b86:	2900      	cmp	r1, #0
 8010b88:	d1ed      	bne.n	8010b66 <_puts_r+0x52>
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	da11      	bge.n	8010bb2 <_puts_r+0x9e>
 8010b8e:	4622      	mov	r2, r4
 8010b90:	210a      	movs	r1, #10
 8010b92:	4628      	mov	r0, r5
 8010b94:	f000 f85f 	bl	8010c56 <__swbuf_r>
 8010b98:	3001      	adds	r0, #1
 8010b9a:	d0d7      	beq.n	8010b4c <_puts_r+0x38>
 8010b9c:	250a      	movs	r5, #10
 8010b9e:	e7d7      	b.n	8010b50 <_puts_r+0x3c>
 8010ba0:	4622      	mov	r2, r4
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	f000 f857 	bl	8010c56 <__swbuf_r>
 8010ba8:	3001      	adds	r0, #1
 8010baa:	d1e7      	bne.n	8010b7c <_puts_r+0x68>
 8010bac:	e7ce      	b.n	8010b4c <_puts_r+0x38>
 8010bae:	3e01      	subs	r6, #1
 8010bb0:	e7e4      	b.n	8010b7c <_puts_r+0x68>
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	1c5a      	adds	r2, r3, #1
 8010bb6:	6022      	str	r2, [r4, #0]
 8010bb8:	220a      	movs	r2, #10
 8010bba:	701a      	strb	r2, [r3, #0]
 8010bbc:	e7ee      	b.n	8010b9c <_puts_r+0x88>
	...

08010bc0 <puts>:
 8010bc0:	4b02      	ldr	r3, [pc, #8]	@ (8010bcc <puts+0xc>)
 8010bc2:	4601      	mov	r1, r0
 8010bc4:	6818      	ldr	r0, [r3, #0]
 8010bc6:	f7ff bfa5 	b.w	8010b14 <_puts_r>
 8010bca:	bf00      	nop
 8010bcc:	2000001c 	.word	0x2000001c

08010bd0 <__sread>:
 8010bd0:	b510      	push	{r4, lr}
 8010bd2:	460c      	mov	r4, r1
 8010bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bd8:	f000 f900 	bl	8010ddc <_read_r>
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	bfab      	itete	ge
 8010be0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010be2:	89a3      	ldrhlt	r3, [r4, #12]
 8010be4:	181b      	addge	r3, r3, r0
 8010be6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010bea:	bfac      	ite	ge
 8010bec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010bee:	81a3      	strhlt	r3, [r4, #12]
 8010bf0:	bd10      	pop	{r4, pc}

08010bf2 <__swrite>:
 8010bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf6:	461f      	mov	r7, r3
 8010bf8:	898b      	ldrh	r3, [r1, #12]
 8010bfa:	05db      	lsls	r3, r3, #23
 8010bfc:	4605      	mov	r5, r0
 8010bfe:	460c      	mov	r4, r1
 8010c00:	4616      	mov	r6, r2
 8010c02:	d505      	bpl.n	8010c10 <__swrite+0x1e>
 8010c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c08:	2302      	movs	r3, #2
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f000 f8d4 	bl	8010db8 <_lseek_r>
 8010c10:	89a3      	ldrh	r3, [r4, #12]
 8010c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010c1a:	81a3      	strh	r3, [r4, #12]
 8010c1c:	4632      	mov	r2, r6
 8010c1e:	463b      	mov	r3, r7
 8010c20:	4628      	mov	r0, r5
 8010c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c26:	f000 b8fb 	b.w	8010e20 <_write_r>

08010c2a <__sseek>:
 8010c2a:	b510      	push	{r4, lr}
 8010c2c:	460c      	mov	r4, r1
 8010c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c32:	f000 f8c1 	bl	8010db8 <_lseek_r>
 8010c36:	1c43      	adds	r3, r0, #1
 8010c38:	89a3      	ldrh	r3, [r4, #12]
 8010c3a:	bf15      	itete	ne
 8010c3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010c3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010c42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010c46:	81a3      	strheq	r3, [r4, #12]
 8010c48:	bf18      	it	ne
 8010c4a:	81a3      	strhne	r3, [r4, #12]
 8010c4c:	bd10      	pop	{r4, pc}

08010c4e <__sclose>:
 8010c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c52:	f000 b8a1 	b.w	8010d98 <_close_r>

08010c56 <__swbuf_r>:
 8010c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c58:	460e      	mov	r6, r1
 8010c5a:	4614      	mov	r4, r2
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	b118      	cbz	r0, 8010c68 <__swbuf_r+0x12>
 8010c60:	6a03      	ldr	r3, [r0, #32]
 8010c62:	b90b      	cbnz	r3, 8010c68 <__swbuf_r+0x12>
 8010c64:	f7ff ff0e 	bl	8010a84 <__sinit>
 8010c68:	69a3      	ldr	r3, [r4, #24]
 8010c6a:	60a3      	str	r3, [r4, #8]
 8010c6c:	89a3      	ldrh	r3, [r4, #12]
 8010c6e:	071a      	lsls	r2, r3, #28
 8010c70:	d501      	bpl.n	8010c76 <__swbuf_r+0x20>
 8010c72:	6923      	ldr	r3, [r4, #16]
 8010c74:	b943      	cbnz	r3, 8010c88 <__swbuf_r+0x32>
 8010c76:	4621      	mov	r1, r4
 8010c78:	4628      	mov	r0, r5
 8010c7a:	f000 f82b 	bl	8010cd4 <__swsetup_r>
 8010c7e:	b118      	cbz	r0, 8010c88 <__swbuf_r+0x32>
 8010c80:	f04f 37ff 	mov.w	r7, #4294967295
 8010c84:	4638      	mov	r0, r7
 8010c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c88:	6823      	ldr	r3, [r4, #0]
 8010c8a:	6922      	ldr	r2, [r4, #16]
 8010c8c:	1a98      	subs	r0, r3, r2
 8010c8e:	6963      	ldr	r3, [r4, #20]
 8010c90:	b2f6      	uxtb	r6, r6
 8010c92:	4283      	cmp	r3, r0
 8010c94:	4637      	mov	r7, r6
 8010c96:	dc05      	bgt.n	8010ca4 <__swbuf_r+0x4e>
 8010c98:	4621      	mov	r1, r4
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f001 fc80 	bl	80125a0 <_fflush_r>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	d1ed      	bne.n	8010c80 <__swbuf_r+0x2a>
 8010ca4:	68a3      	ldr	r3, [r4, #8]
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	60a3      	str	r3, [r4, #8]
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	1c5a      	adds	r2, r3, #1
 8010cae:	6022      	str	r2, [r4, #0]
 8010cb0:	701e      	strb	r6, [r3, #0]
 8010cb2:	6962      	ldr	r2, [r4, #20]
 8010cb4:	1c43      	adds	r3, r0, #1
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d004      	beq.n	8010cc4 <__swbuf_r+0x6e>
 8010cba:	89a3      	ldrh	r3, [r4, #12]
 8010cbc:	07db      	lsls	r3, r3, #31
 8010cbe:	d5e1      	bpl.n	8010c84 <__swbuf_r+0x2e>
 8010cc0:	2e0a      	cmp	r6, #10
 8010cc2:	d1df      	bne.n	8010c84 <__swbuf_r+0x2e>
 8010cc4:	4621      	mov	r1, r4
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	f001 fc6a 	bl	80125a0 <_fflush_r>
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	d0d9      	beq.n	8010c84 <__swbuf_r+0x2e>
 8010cd0:	e7d6      	b.n	8010c80 <__swbuf_r+0x2a>
	...

08010cd4 <__swsetup_r>:
 8010cd4:	b538      	push	{r3, r4, r5, lr}
 8010cd6:	4b29      	ldr	r3, [pc, #164]	@ (8010d7c <__swsetup_r+0xa8>)
 8010cd8:	4605      	mov	r5, r0
 8010cda:	6818      	ldr	r0, [r3, #0]
 8010cdc:	460c      	mov	r4, r1
 8010cde:	b118      	cbz	r0, 8010ce8 <__swsetup_r+0x14>
 8010ce0:	6a03      	ldr	r3, [r0, #32]
 8010ce2:	b90b      	cbnz	r3, 8010ce8 <__swsetup_r+0x14>
 8010ce4:	f7ff fece 	bl	8010a84 <__sinit>
 8010ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cec:	0719      	lsls	r1, r3, #28
 8010cee:	d422      	bmi.n	8010d36 <__swsetup_r+0x62>
 8010cf0:	06da      	lsls	r2, r3, #27
 8010cf2:	d407      	bmi.n	8010d04 <__swsetup_r+0x30>
 8010cf4:	2209      	movs	r2, #9
 8010cf6:	602a      	str	r2, [r5, #0]
 8010cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cfc:	81a3      	strh	r3, [r4, #12]
 8010cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8010d02:	e033      	b.n	8010d6c <__swsetup_r+0x98>
 8010d04:	0758      	lsls	r0, r3, #29
 8010d06:	d512      	bpl.n	8010d2e <__swsetup_r+0x5a>
 8010d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d0a:	b141      	cbz	r1, 8010d1e <__swsetup_r+0x4a>
 8010d0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d10:	4299      	cmp	r1, r3
 8010d12:	d002      	beq.n	8010d1a <__swsetup_r+0x46>
 8010d14:	4628      	mov	r0, r5
 8010d16:	f000 feb9 	bl	8011a8c <_free_r>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d1e:	89a3      	ldrh	r3, [r4, #12]
 8010d20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010d24:	81a3      	strh	r3, [r4, #12]
 8010d26:	2300      	movs	r3, #0
 8010d28:	6063      	str	r3, [r4, #4]
 8010d2a:	6923      	ldr	r3, [r4, #16]
 8010d2c:	6023      	str	r3, [r4, #0]
 8010d2e:	89a3      	ldrh	r3, [r4, #12]
 8010d30:	f043 0308 	orr.w	r3, r3, #8
 8010d34:	81a3      	strh	r3, [r4, #12]
 8010d36:	6923      	ldr	r3, [r4, #16]
 8010d38:	b94b      	cbnz	r3, 8010d4e <__swsetup_r+0x7a>
 8010d3a:	89a3      	ldrh	r3, [r4, #12]
 8010d3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d44:	d003      	beq.n	8010d4e <__swsetup_r+0x7a>
 8010d46:	4621      	mov	r1, r4
 8010d48:	4628      	mov	r0, r5
 8010d4a:	f001 fc77 	bl	801263c <__smakebuf_r>
 8010d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d52:	f013 0201 	ands.w	r2, r3, #1
 8010d56:	d00a      	beq.n	8010d6e <__swsetup_r+0x9a>
 8010d58:	2200      	movs	r2, #0
 8010d5a:	60a2      	str	r2, [r4, #8]
 8010d5c:	6962      	ldr	r2, [r4, #20]
 8010d5e:	4252      	negs	r2, r2
 8010d60:	61a2      	str	r2, [r4, #24]
 8010d62:	6922      	ldr	r2, [r4, #16]
 8010d64:	b942      	cbnz	r2, 8010d78 <__swsetup_r+0xa4>
 8010d66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010d6a:	d1c5      	bne.n	8010cf8 <__swsetup_r+0x24>
 8010d6c:	bd38      	pop	{r3, r4, r5, pc}
 8010d6e:	0799      	lsls	r1, r3, #30
 8010d70:	bf58      	it	pl
 8010d72:	6962      	ldrpl	r2, [r4, #20]
 8010d74:	60a2      	str	r2, [r4, #8]
 8010d76:	e7f4      	b.n	8010d62 <__swsetup_r+0x8e>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	e7f7      	b.n	8010d6c <__swsetup_r+0x98>
 8010d7c:	2000001c 	.word	0x2000001c

08010d80 <memset>:
 8010d80:	4402      	add	r2, r0
 8010d82:	4603      	mov	r3, r0
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d100      	bne.n	8010d8a <memset+0xa>
 8010d88:	4770      	bx	lr
 8010d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8010d8e:	e7f9      	b.n	8010d84 <memset+0x4>

08010d90 <_localeconv_r>:
 8010d90:	4800      	ldr	r0, [pc, #0]	@ (8010d94 <_localeconv_r+0x4>)
 8010d92:	4770      	bx	lr
 8010d94:	2000015c 	.word	0x2000015c

08010d98 <_close_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4d06      	ldr	r5, [pc, #24]	@ (8010db4 <_close_r+0x1c>)
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	4604      	mov	r4, r0
 8010da0:	4608      	mov	r0, r1
 8010da2:	602b      	str	r3, [r5, #0]
 8010da4:	f7f2 fb4c 	bl	8003440 <_close>
 8010da8:	1c43      	adds	r3, r0, #1
 8010daa:	d102      	bne.n	8010db2 <_close_r+0x1a>
 8010dac:	682b      	ldr	r3, [r5, #0]
 8010dae:	b103      	cbz	r3, 8010db2 <_close_r+0x1a>
 8010db0:	6023      	str	r3, [r4, #0]
 8010db2:	bd38      	pop	{r3, r4, r5, pc}
 8010db4:	20009730 	.word	0x20009730

08010db8 <_lseek_r>:
 8010db8:	b538      	push	{r3, r4, r5, lr}
 8010dba:	4d07      	ldr	r5, [pc, #28]	@ (8010dd8 <_lseek_r+0x20>)
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	4608      	mov	r0, r1
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	602a      	str	r2, [r5, #0]
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	f7f2 fb61 	bl	800348e <_lseek>
 8010dcc:	1c43      	adds	r3, r0, #1
 8010dce:	d102      	bne.n	8010dd6 <_lseek_r+0x1e>
 8010dd0:	682b      	ldr	r3, [r5, #0]
 8010dd2:	b103      	cbz	r3, 8010dd6 <_lseek_r+0x1e>
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	bd38      	pop	{r3, r4, r5, pc}
 8010dd8:	20009730 	.word	0x20009730

08010ddc <_read_r>:
 8010ddc:	b538      	push	{r3, r4, r5, lr}
 8010dde:	4d07      	ldr	r5, [pc, #28]	@ (8010dfc <_read_r+0x20>)
 8010de0:	4604      	mov	r4, r0
 8010de2:	4608      	mov	r0, r1
 8010de4:	4611      	mov	r1, r2
 8010de6:	2200      	movs	r2, #0
 8010de8:	602a      	str	r2, [r5, #0]
 8010dea:	461a      	mov	r2, r3
 8010dec:	f7f2 faef 	bl	80033ce <_read>
 8010df0:	1c43      	adds	r3, r0, #1
 8010df2:	d102      	bne.n	8010dfa <_read_r+0x1e>
 8010df4:	682b      	ldr	r3, [r5, #0]
 8010df6:	b103      	cbz	r3, 8010dfa <_read_r+0x1e>
 8010df8:	6023      	str	r3, [r4, #0]
 8010dfa:	bd38      	pop	{r3, r4, r5, pc}
 8010dfc:	20009730 	.word	0x20009730

08010e00 <_sbrk_r>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	4d06      	ldr	r5, [pc, #24]	@ (8010e1c <_sbrk_r+0x1c>)
 8010e04:	2300      	movs	r3, #0
 8010e06:	4604      	mov	r4, r0
 8010e08:	4608      	mov	r0, r1
 8010e0a:	602b      	str	r3, [r5, #0]
 8010e0c:	f7f2 fb4c 	bl	80034a8 <_sbrk>
 8010e10:	1c43      	adds	r3, r0, #1
 8010e12:	d102      	bne.n	8010e1a <_sbrk_r+0x1a>
 8010e14:	682b      	ldr	r3, [r5, #0]
 8010e16:	b103      	cbz	r3, 8010e1a <_sbrk_r+0x1a>
 8010e18:	6023      	str	r3, [r4, #0]
 8010e1a:	bd38      	pop	{r3, r4, r5, pc}
 8010e1c:	20009730 	.word	0x20009730

08010e20 <_write_r>:
 8010e20:	b538      	push	{r3, r4, r5, lr}
 8010e22:	4d07      	ldr	r5, [pc, #28]	@ (8010e40 <_write_r+0x20>)
 8010e24:	4604      	mov	r4, r0
 8010e26:	4608      	mov	r0, r1
 8010e28:	4611      	mov	r1, r2
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	602a      	str	r2, [r5, #0]
 8010e2e:	461a      	mov	r2, r3
 8010e30:	f7f2 faea 	bl	8003408 <_write>
 8010e34:	1c43      	adds	r3, r0, #1
 8010e36:	d102      	bne.n	8010e3e <_write_r+0x1e>
 8010e38:	682b      	ldr	r3, [r5, #0]
 8010e3a:	b103      	cbz	r3, 8010e3e <_write_r+0x1e>
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	bd38      	pop	{r3, r4, r5, pc}
 8010e40:	20009730 	.word	0x20009730

08010e44 <__errno>:
 8010e44:	4b01      	ldr	r3, [pc, #4]	@ (8010e4c <__errno+0x8>)
 8010e46:	6818      	ldr	r0, [r3, #0]
 8010e48:	4770      	bx	lr
 8010e4a:	bf00      	nop
 8010e4c:	2000001c 	.word	0x2000001c

08010e50 <__libc_init_array>:
 8010e50:	b570      	push	{r4, r5, r6, lr}
 8010e52:	4d0d      	ldr	r5, [pc, #52]	@ (8010e88 <__libc_init_array+0x38>)
 8010e54:	4c0d      	ldr	r4, [pc, #52]	@ (8010e8c <__libc_init_array+0x3c>)
 8010e56:	1b64      	subs	r4, r4, r5
 8010e58:	10a4      	asrs	r4, r4, #2
 8010e5a:	2600      	movs	r6, #0
 8010e5c:	42a6      	cmp	r6, r4
 8010e5e:	d109      	bne.n	8010e74 <__libc_init_array+0x24>
 8010e60:	4d0b      	ldr	r5, [pc, #44]	@ (8010e90 <__libc_init_array+0x40>)
 8010e62:	4c0c      	ldr	r4, [pc, #48]	@ (8010e94 <__libc_init_array+0x44>)
 8010e64:	f002 fab8 	bl	80133d8 <_init>
 8010e68:	1b64      	subs	r4, r4, r5
 8010e6a:	10a4      	asrs	r4, r4, #2
 8010e6c:	2600      	movs	r6, #0
 8010e6e:	42a6      	cmp	r6, r4
 8010e70:	d105      	bne.n	8010e7e <__libc_init_array+0x2e>
 8010e72:	bd70      	pop	{r4, r5, r6, pc}
 8010e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e78:	4798      	blx	r3
 8010e7a:	3601      	adds	r6, #1
 8010e7c:	e7ee      	b.n	8010e5c <__libc_init_array+0xc>
 8010e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e82:	4798      	blx	r3
 8010e84:	3601      	adds	r6, #1
 8010e86:	e7f2      	b.n	8010e6e <__libc_init_array+0x1e>
 8010e88:	08026e38 	.word	0x08026e38
 8010e8c:	08026e38 	.word	0x08026e38
 8010e90:	08026e38 	.word	0x08026e38
 8010e94:	08026e3c 	.word	0x08026e3c

08010e98 <__retarget_lock_init_recursive>:
 8010e98:	4770      	bx	lr

08010e9a <__retarget_lock_acquire_recursive>:
 8010e9a:	4770      	bx	lr

08010e9c <__retarget_lock_release_recursive>:
 8010e9c:	4770      	bx	lr

08010e9e <memcpy>:
 8010e9e:	440a      	add	r2, r1
 8010ea0:	4291      	cmp	r1, r2
 8010ea2:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ea6:	d100      	bne.n	8010eaa <memcpy+0xc>
 8010ea8:	4770      	bx	lr
 8010eaa:	b510      	push	{r4, lr}
 8010eac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010eb4:	4291      	cmp	r1, r2
 8010eb6:	d1f9      	bne.n	8010eac <memcpy+0xe>
 8010eb8:	bd10      	pop	{r4, pc}

08010eba <quorem>:
 8010eba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ebe:	6903      	ldr	r3, [r0, #16]
 8010ec0:	690c      	ldr	r4, [r1, #16]
 8010ec2:	42a3      	cmp	r3, r4
 8010ec4:	4607      	mov	r7, r0
 8010ec6:	db7e      	blt.n	8010fc6 <quorem+0x10c>
 8010ec8:	3c01      	subs	r4, #1
 8010eca:	f101 0814 	add.w	r8, r1, #20
 8010ece:	00a3      	lsls	r3, r4, #2
 8010ed0:	f100 0514 	add.w	r5, r0, #20
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010eda:	9301      	str	r3, [sp, #4]
 8010edc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010eec:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ef0:	d32e      	bcc.n	8010f50 <quorem+0x96>
 8010ef2:	f04f 0a00 	mov.w	sl, #0
 8010ef6:	46c4      	mov	ip, r8
 8010ef8:	46ae      	mov	lr, r5
 8010efa:	46d3      	mov	fp, sl
 8010efc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010f00:	b298      	uxth	r0, r3
 8010f02:	fb06 a000 	mla	r0, r6, r0, sl
 8010f06:	0c02      	lsrs	r2, r0, #16
 8010f08:	0c1b      	lsrs	r3, r3, #16
 8010f0a:	fb06 2303 	mla	r3, r6, r3, r2
 8010f0e:	f8de 2000 	ldr.w	r2, [lr]
 8010f12:	b280      	uxth	r0, r0
 8010f14:	b292      	uxth	r2, r2
 8010f16:	1a12      	subs	r2, r2, r0
 8010f18:	445a      	add	r2, fp
 8010f1a:	f8de 0000 	ldr.w	r0, [lr]
 8010f1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010f28:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010f2c:	b292      	uxth	r2, r2
 8010f2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010f32:	45e1      	cmp	r9, ip
 8010f34:	f84e 2b04 	str.w	r2, [lr], #4
 8010f38:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010f3c:	d2de      	bcs.n	8010efc <quorem+0x42>
 8010f3e:	9b00      	ldr	r3, [sp, #0]
 8010f40:	58eb      	ldr	r3, [r5, r3]
 8010f42:	b92b      	cbnz	r3, 8010f50 <quorem+0x96>
 8010f44:	9b01      	ldr	r3, [sp, #4]
 8010f46:	3b04      	subs	r3, #4
 8010f48:	429d      	cmp	r5, r3
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	d32f      	bcc.n	8010fae <quorem+0xf4>
 8010f4e:	613c      	str	r4, [r7, #16]
 8010f50:	4638      	mov	r0, r7
 8010f52:	f001 f857 	bl	8012004 <__mcmp>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	db25      	blt.n	8010fa6 <quorem+0xec>
 8010f5a:	4629      	mov	r1, r5
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f62:	f8d1 c000 	ldr.w	ip, [r1]
 8010f66:	fa1f fe82 	uxth.w	lr, r2
 8010f6a:	fa1f f38c 	uxth.w	r3, ip
 8010f6e:	eba3 030e 	sub.w	r3, r3, lr
 8010f72:	4403      	add	r3, r0
 8010f74:	0c12      	lsrs	r2, r2, #16
 8010f76:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010f7a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f84:	45c1      	cmp	r9, r8
 8010f86:	f841 3b04 	str.w	r3, [r1], #4
 8010f8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010f8e:	d2e6      	bcs.n	8010f5e <quorem+0xa4>
 8010f90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f98:	b922      	cbnz	r2, 8010fa4 <quorem+0xea>
 8010f9a:	3b04      	subs	r3, #4
 8010f9c:	429d      	cmp	r5, r3
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	d30b      	bcc.n	8010fba <quorem+0x100>
 8010fa2:	613c      	str	r4, [r7, #16]
 8010fa4:	3601      	adds	r6, #1
 8010fa6:	4630      	mov	r0, r6
 8010fa8:	b003      	add	sp, #12
 8010faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fae:	6812      	ldr	r2, [r2, #0]
 8010fb0:	3b04      	subs	r3, #4
 8010fb2:	2a00      	cmp	r2, #0
 8010fb4:	d1cb      	bne.n	8010f4e <quorem+0x94>
 8010fb6:	3c01      	subs	r4, #1
 8010fb8:	e7c6      	b.n	8010f48 <quorem+0x8e>
 8010fba:	6812      	ldr	r2, [r2, #0]
 8010fbc:	3b04      	subs	r3, #4
 8010fbe:	2a00      	cmp	r2, #0
 8010fc0:	d1ef      	bne.n	8010fa2 <quorem+0xe8>
 8010fc2:	3c01      	subs	r4, #1
 8010fc4:	e7ea      	b.n	8010f9c <quorem+0xe2>
 8010fc6:	2000      	movs	r0, #0
 8010fc8:	e7ee      	b.n	8010fa8 <quorem+0xee>
 8010fca:	0000      	movs	r0, r0
 8010fcc:	0000      	movs	r0, r0
	...

08010fd0 <_dtoa_r>:
 8010fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd4:	ed2d 8b02 	vpush	{d8}
 8010fd8:	69c7      	ldr	r7, [r0, #28]
 8010fda:	b091      	sub	sp, #68	@ 0x44
 8010fdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010fe0:	ec55 4b10 	vmov	r4, r5, d0
 8010fe4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010fe6:	9107      	str	r1, [sp, #28]
 8010fe8:	4681      	mov	r9, r0
 8010fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8010fec:	930d      	str	r3, [sp, #52]	@ 0x34
 8010fee:	b97f      	cbnz	r7, 8011010 <_dtoa_r+0x40>
 8010ff0:	2010      	movs	r0, #16
 8010ff2:	f7fe ffd1 	bl	800ff98 <malloc>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	f8c9 001c 	str.w	r0, [r9, #28]
 8010ffc:	b920      	cbnz	r0, 8011008 <_dtoa_r+0x38>
 8010ffe:	4ba0      	ldr	r3, [pc, #640]	@ (8011280 <_dtoa_r+0x2b0>)
 8011000:	21ef      	movs	r1, #239	@ 0xef
 8011002:	48a0      	ldr	r0, [pc, #640]	@ (8011284 <_dtoa_r+0x2b4>)
 8011004:	f001 fb78 	bl	80126f8 <__assert_func>
 8011008:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801100c:	6007      	str	r7, [r0, #0]
 801100e:	60c7      	str	r7, [r0, #12]
 8011010:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011014:	6819      	ldr	r1, [r3, #0]
 8011016:	b159      	cbz	r1, 8011030 <_dtoa_r+0x60>
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	604a      	str	r2, [r1, #4]
 801101c:	2301      	movs	r3, #1
 801101e:	4093      	lsls	r3, r2
 8011020:	608b      	str	r3, [r1, #8]
 8011022:	4648      	mov	r0, r9
 8011024:	f000 fdbc 	bl	8011ba0 <_Bfree>
 8011028:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801102c:	2200      	movs	r2, #0
 801102e:	601a      	str	r2, [r3, #0]
 8011030:	1e2b      	subs	r3, r5, #0
 8011032:	bfbb      	ittet	lt
 8011034:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011038:	9303      	strlt	r3, [sp, #12]
 801103a:	2300      	movge	r3, #0
 801103c:	2201      	movlt	r2, #1
 801103e:	bfac      	ite	ge
 8011040:	6033      	strge	r3, [r6, #0]
 8011042:	6032      	strlt	r2, [r6, #0]
 8011044:	4b90      	ldr	r3, [pc, #576]	@ (8011288 <_dtoa_r+0x2b8>)
 8011046:	9e03      	ldr	r6, [sp, #12]
 8011048:	43b3      	bics	r3, r6
 801104a:	d110      	bne.n	801106e <_dtoa_r+0x9e>
 801104c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801104e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011052:	6013      	str	r3, [r2, #0]
 8011054:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011058:	4323      	orrs	r3, r4
 801105a:	f000 84e6 	beq.w	8011a2a <_dtoa_r+0xa5a>
 801105e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011060:	4f8a      	ldr	r7, [pc, #552]	@ (801128c <_dtoa_r+0x2bc>)
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 84e8 	beq.w	8011a38 <_dtoa_r+0xa68>
 8011068:	1cfb      	adds	r3, r7, #3
 801106a:	f000 bce3 	b.w	8011a34 <_dtoa_r+0xa64>
 801106e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011072:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801107a:	d10a      	bne.n	8011092 <_dtoa_r+0xc2>
 801107c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801107e:	2301      	movs	r3, #1
 8011080:	6013      	str	r3, [r2, #0]
 8011082:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011084:	b113      	cbz	r3, 801108c <_dtoa_r+0xbc>
 8011086:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011088:	4b81      	ldr	r3, [pc, #516]	@ (8011290 <_dtoa_r+0x2c0>)
 801108a:	6013      	str	r3, [r2, #0]
 801108c:	4f81      	ldr	r7, [pc, #516]	@ (8011294 <_dtoa_r+0x2c4>)
 801108e:	f000 bcd3 	b.w	8011a38 <_dtoa_r+0xa68>
 8011092:	aa0e      	add	r2, sp, #56	@ 0x38
 8011094:	a90f      	add	r1, sp, #60	@ 0x3c
 8011096:	4648      	mov	r0, r9
 8011098:	eeb0 0b48 	vmov.f64	d0, d8
 801109c:	f001 f862 	bl	8012164 <__d2b>
 80110a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80110a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110a6:	9001      	str	r0, [sp, #4]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d045      	beq.n	8011138 <_dtoa_r+0x168>
 80110ac:	eeb0 7b48 	vmov.f64	d7, d8
 80110b0:	ee18 1a90 	vmov	r1, s17
 80110b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80110b8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80110bc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80110c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80110c4:	2500      	movs	r5, #0
 80110c6:	ee07 1a90 	vmov	s15, r1
 80110ca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80110ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011268 <_dtoa_r+0x298>
 80110d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011270 <_dtoa_r+0x2a0>
 80110da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80110de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011278 <_dtoa_r+0x2a8>
 80110e2:	ee07 3a90 	vmov	s15, r3
 80110e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80110ea:	eeb0 7b46 	vmov.f64	d7, d6
 80110ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 80110f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80110f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80110fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110fe:	ee16 8a90 	vmov	r8, s13
 8011102:	d508      	bpl.n	8011116 <_dtoa_r+0x146>
 8011104:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011108:	eeb4 6b47 	vcmp.f64	d6, d7
 801110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011110:	bf18      	it	ne
 8011112:	f108 38ff 	addne.w	r8, r8, #4294967295
 8011116:	f1b8 0f16 	cmp.w	r8, #22
 801111a:	d82b      	bhi.n	8011174 <_dtoa_r+0x1a4>
 801111c:	495e      	ldr	r1, [pc, #376]	@ (8011298 <_dtoa_r+0x2c8>)
 801111e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8011122:	ed91 7b00 	vldr	d7, [r1]
 8011126:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801112e:	d501      	bpl.n	8011134 <_dtoa_r+0x164>
 8011130:	f108 38ff 	add.w	r8, r8, #4294967295
 8011134:	2100      	movs	r1, #0
 8011136:	e01e      	b.n	8011176 <_dtoa_r+0x1a6>
 8011138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801113a:	4413      	add	r3, r2
 801113c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011140:	2920      	cmp	r1, #32
 8011142:	bfc1      	itttt	gt
 8011144:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011148:	408e      	lslgt	r6, r1
 801114a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801114e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011152:	bfd6      	itet	le
 8011154:	f1c1 0120 	rsble	r1, r1, #32
 8011158:	4331      	orrgt	r1, r6
 801115a:	fa04 f101 	lslle.w	r1, r4, r1
 801115e:	ee07 1a90 	vmov	s15, r1
 8011162:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011166:	3b01      	subs	r3, #1
 8011168:	ee17 1a90 	vmov	r1, s15
 801116c:	2501      	movs	r5, #1
 801116e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8011172:	e7a8      	b.n	80110c6 <_dtoa_r+0xf6>
 8011174:	2101      	movs	r1, #1
 8011176:	1ad2      	subs	r2, r2, r3
 8011178:	1e53      	subs	r3, r2, #1
 801117a:	9306      	str	r3, [sp, #24]
 801117c:	bf45      	ittet	mi
 801117e:	f1c2 0301 	rsbmi	r3, r2, #1
 8011182:	9304      	strmi	r3, [sp, #16]
 8011184:	2300      	movpl	r3, #0
 8011186:	2300      	movmi	r3, #0
 8011188:	bf4c      	ite	mi
 801118a:	9306      	strmi	r3, [sp, #24]
 801118c:	9304      	strpl	r3, [sp, #16]
 801118e:	f1b8 0f00 	cmp.w	r8, #0
 8011192:	910c      	str	r1, [sp, #48]	@ 0x30
 8011194:	db18      	blt.n	80111c8 <_dtoa_r+0x1f8>
 8011196:	9b06      	ldr	r3, [sp, #24]
 8011198:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801119c:	4443      	add	r3, r8
 801119e:	9306      	str	r3, [sp, #24]
 80111a0:	2300      	movs	r3, #0
 80111a2:	9a07      	ldr	r2, [sp, #28]
 80111a4:	2a09      	cmp	r2, #9
 80111a6:	d845      	bhi.n	8011234 <_dtoa_r+0x264>
 80111a8:	2a05      	cmp	r2, #5
 80111aa:	bfc4      	itt	gt
 80111ac:	3a04      	subgt	r2, #4
 80111ae:	9207      	strgt	r2, [sp, #28]
 80111b0:	9a07      	ldr	r2, [sp, #28]
 80111b2:	f1a2 0202 	sub.w	r2, r2, #2
 80111b6:	bfcc      	ite	gt
 80111b8:	2400      	movgt	r4, #0
 80111ba:	2401      	movle	r4, #1
 80111bc:	2a03      	cmp	r2, #3
 80111be:	d844      	bhi.n	801124a <_dtoa_r+0x27a>
 80111c0:	e8df f002 	tbb	[pc, r2]
 80111c4:	0b173634 	.word	0x0b173634
 80111c8:	9b04      	ldr	r3, [sp, #16]
 80111ca:	2200      	movs	r2, #0
 80111cc:	eba3 0308 	sub.w	r3, r3, r8
 80111d0:	9304      	str	r3, [sp, #16]
 80111d2:	920a      	str	r2, [sp, #40]	@ 0x28
 80111d4:	f1c8 0300 	rsb	r3, r8, #0
 80111d8:	e7e3      	b.n	80111a2 <_dtoa_r+0x1d2>
 80111da:	2201      	movs	r2, #1
 80111dc:	9208      	str	r2, [sp, #32]
 80111de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111e0:	eb08 0b02 	add.w	fp, r8, r2
 80111e4:	f10b 0a01 	add.w	sl, fp, #1
 80111e8:	4652      	mov	r2, sl
 80111ea:	2a01      	cmp	r2, #1
 80111ec:	bfb8      	it	lt
 80111ee:	2201      	movlt	r2, #1
 80111f0:	e006      	b.n	8011200 <_dtoa_r+0x230>
 80111f2:	2201      	movs	r2, #1
 80111f4:	9208      	str	r2, [sp, #32]
 80111f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111f8:	2a00      	cmp	r2, #0
 80111fa:	dd29      	ble.n	8011250 <_dtoa_r+0x280>
 80111fc:	4693      	mov	fp, r2
 80111fe:	4692      	mov	sl, r2
 8011200:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8011204:	2100      	movs	r1, #0
 8011206:	2004      	movs	r0, #4
 8011208:	f100 0614 	add.w	r6, r0, #20
 801120c:	4296      	cmp	r6, r2
 801120e:	d926      	bls.n	801125e <_dtoa_r+0x28e>
 8011210:	6079      	str	r1, [r7, #4]
 8011212:	4648      	mov	r0, r9
 8011214:	9305      	str	r3, [sp, #20]
 8011216:	f000 fc83 	bl	8011b20 <_Balloc>
 801121a:	9b05      	ldr	r3, [sp, #20]
 801121c:	4607      	mov	r7, r0
 801121e:	2800      	cmp	r0, #0
 8011220:	d13e      	bne.n	80112a0 <_dtoa_r+0x2d0>
 8011222:	4b1e      	ldr	r3, [pc, #120]	@ (801129c <_dtoa_r+0x2cc>)
 8011224:	4602      	mov	r2, r0
 8011226:	f240 11af 	movw	r1, #431	@ 0x1af
 801122a:	e6ea      	b.n	8011002 <_dtoa_r+0x32>
 801122c:	2200      	movs	r2, #0
 801122e:	e7e1      	b.n	80111f4 <_dtoa_r+0x224>
 8011230:	2200      	movs	r2, #0
 8011232:	e7d3      	b.n	80111dc <_dtoa_r+0x20c>
 8011234:	2401      	movs	r4, #1
 8011236:	2200      	movs	r2, #0
 8011238:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801123c:	f04f 3bff 	mov.w	fp, #4294967295
 8011240:	2100      	movs	r1, #0
 8011242:	46da      	mov	sl, fp
 8011244:	2212      	movs	r2, #18
 8011246:	9109      	str	r1, [sp, #36]	@ 0x24
 8011248:	e7da      	b.n	8011200 <_dtoa_r+0x230>
 801124a:	2201      	movs	r2, #1
 801124c:	9208      	str	r2, [sp, #32]
 801124e:	e7f5      	b.n	801123c <_dtoa_r+0x26c>
 8011250:	f04f 0b01 	mov.w	fp, #1
 8011254:	46da      	mov	sl, fp
 8011256:	465a      	mov	r2, fp
 8011258:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801125c:	e7d0      	b.n	8011200 <_dtoa_r+0x230>
 801125e:	3101      	adds	r1, #1
 8011260:	0040      	lsls	r0, r0, #1
 8011262:	e7d1      	b.n	8011208 <_dtoa_r+0x238>
 8011264:	f3af 8000 	nop.w
 8011268:	636f4361 	.word	0x636f4361
 801126c:	3fd287a7 	.word	0x3fd287a7
 8011270:	8b60c8b3 	.word	0x8b60c8b3
 8011274:	3fc68a28 	.word	0x3fc68a28
 8011278:	509f79fb 	.word	0x509f79fb
 801127c:	3fd34413 	.word	0x3fd34413
 8011280:	0802691d 	.word	0x0802691d
 8011284:	08026934 	.word	0x08026934
 8011288:	7ff00000 	.word	0x7ff00000
 801128c:	08026919 	.word	0x08026919
 8011290:	080268ed 	.word	0x080268ed
 8011294:	080268ec 	.word	0x080268ec
 8011298:	08026a88 	.word	0x08026a88
 801129c:	0802698c 	.word	0x0802698c
 80112a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80112a4:	f1ba 0f0e 	cmp.w	sl, #14
 80112a8:	6010      	str	r0, [r2, #0]
 80112aa:	d86e      	bhi.n	801138a <_dtoa_r+0x3ba>
 80112ac:	2c00      	cmp	r4, #0
 80112ae:	d06c      	beq.n	801138a <_dtoa_r+0x3ba>
 80112b0:	f1b8 0f00 	cmp.w	r8, #0
 80112b4:	f340 80b4 	ble.w	8011420 <_dtoa_r+0x450>
 80112b8:	4ac8      	ldr	r2, [pc, #800]	@ (80115dc <_dtoa_r+0x60c>)
 80112ba:	f008 010f 	and.w	r1, r8, #15
 80112be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80112c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80112c6:	ed92 7b00 	vldr	d7, [r2]
 80112ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 80112ce:	f000 809b 	beq.w	8011408 <_dtoa_r+0x438>
 80112d2:	4ac3      	ldr	r2, [pc, #780]	@ (80115e0 <_dtoa_r+0x610>)
 80112d4:	ed92 6b08 	vldr	d6, [r2, #32]
 80112d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80112dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80112e0:	f001 010f 	and.w	r1, r1, #15
 80112e4:	2203      	movs	r2, #3
 80112e6:	48be      	ldr	r0, [pc, #760]	@ (80115e0 <_dtoa_r+0x610>)
 80112e8:	2900      	cmp	r1, #0
 80112ea:	f040 808f 	bne.w	801140c <_dtoa_r+0x43c>
 80112ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80112f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80112f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80112fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80112fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011300:	2900      	cmp	r1, #0
 8011302:	f000 80b3 	beq.w	801146c <_dtoa_r+0x49c>
 8011306:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801130a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011312:	f140 80ab 	bpl.w	801146c <_dtoa_r+0x49c>
 8011316:	f1ba 0f00 	cmp.w	sl, #0
 801131a:	f000 80a7 	beq.w	801146c <_dtoa_r+0x49c>
 801131e:	f1bb 0f00 	cmp.w	fp, #0
 8011322:	dd30      	ble.n	8011386 <_dtoa_r+0x3b6>
 8011324:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8011328:	ee27 7b06 	vmul.f64	d7, d7, d6
 801132c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011330:	f108 31ff 	add.w	r1, r8, #4294967295
 8011334:	9105      	str	r1, [sp, #20]
 8011336:	3201      	adds	r2, #1
 8011338:	465c      	mov	r4, fp
 801133a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801133e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8011342:	ee07 2a90 	vmov	s15, r2
 8011346:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801134a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801134e:	ee15 2a90 	vmov	r2, s11
 8011352:	ec51 0b15 	vmov	r0, r1, d5
 8011356:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801135a:	2c00      	cmp	r4, #0
 801135c:	f040 808a 	bne.w	8011474 <_dtoa_r+0x4a4>
 8011360:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011364:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011368:	ec41 0b17 	vmov	d7, r0, r1
 801136c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011374:	f300 826a 	bgt.w	801184c <_dtoa_r+0x87c>
 8011378:	eeb1 7b47 	vneg.f64	d7, d7
 801137c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011384:	d423      	bmi.n	80113ce <_dtoa_r+0x3fe>
 8011386:	ed8d 8b02 	vstr	d8, [sp, #8]
 801138a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801138c:	2a00      	cmp	r2, #0
 801138e:	f2c0 8129 	blt.w	80115e4 <_dtoa_r+0x614>
 8011392:	f1b8 0f0e 	cmp.w	r8, #14
 8011396:	f300 8125 	bgt.w	80115e4 <_dtoa_r+0x614>
 801139a:	4b90      	ldr	r3, [pc, #576]	@ (80115dc <_dtoa_r+0x60c>)
 801139c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80113a0:	ed93 6b00 	vldr	d6, [r3]
 80113a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	f280 80c8 	bge.w	801153c <_dtoa_r+0x56c>
 80113ac:	f1ba 0f00 	cmp.w	sl, #0
 80113b0:	f300 80c4 	bgt.w	801153c <_dtoa_r+0x56c>
 80113b4:	d10b      	bne.n	80113ce <_dtoa_r+0x3fe>
 80113b6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80113ba:	ee26 6b07 	vmul.f64	d6, d6, d7
 80113be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80113c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ca:	f2c0 823c 	blt.w	8011846 <_dtoa_r+0x876>
 80113ce:	2400      	movs	r4, #0
 80113d0:	4625      	mov	r5, r4
 80113d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113d4:	43db      	mvns	r3, r3
 80113d6:	9305      	str	r3, [sp, #20]
 80113d8:	463e      	mov	r6, r7
 80113da:	f04f 0800 	mov.w	r8, #0
 80113de:	4621      	mov	r1, r4
 80113e0:	4648      	mov	r0, r9
 80113e2:	f000 fbdd 	bl	8011ba0 <_Bfree>
 80113e6:	2d00      	cmp	r5, #0
 80113e8:	f000 80a2 	beq.w	8011530 <_dtoa_r+0x560>
 80113ec:	f1b8 0f00 	cmp.w	r8, #0
 80113f0:	d005      	beq.n	80113fe <_dtoa_r+0x42e>
 80113f2:	45a8      	cmp	r8, r5
 80113f4:	d003      	beq.n	80113fe <_dtoa_r+0x42e>
 80113f6:	4641      	mov	r1, r8
 80113f8:	4648      	mov	r0, r9
 80113fa:	f000 fbd1 	bl	8011ba0 <_Bfree>
 80113fe:	4629      	mov	r1, r5
 8011400:	4648      	mov	r0, r9
 8011402:	f000 fbcd 	bl	8011ba0 <_Bfree>
 8011406:	e093      	b.n	8011530 <_dtoa_r+0x560>
 8011408:	2202      	movs	r2, #2
 801140a:	e76c      	b.n	80112e6 <_dtoa_r+0x316>
 801140c:	07cc      	lsls	r4, r1, #31
 801140e:	d504      	bpl.n	801141a <_dtoa_r+0x44a>
 8011410:	ed90 6b00 	vldr	d6, [r0]
 8011414:	3201      	adds	r2, #1
 8011416:	ee27 7b06 	vmul.f64	d7, d7, d6
 801141a:	1049      	asrs	r1, r1, #1
 801141c:	3008      	adds	r0, #8
 801141e:	e763      	b.n	80112e8 <_dtoa_r+0x318>
 8011420:	d022      	beq.n	8011468 <_dtoa_r+0x498>
 8011422:	f1c8 0100 	rsb	r1, r8, #0
 8011426:	4a6d      	ldr	r2, [pc, #436]	@ (80115dc <_dtoa_r+0x60c>)
 8011428:	f001 000f 	and.w	r0, r1, #15
 801142c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011430:	ed92 7b00 	vldr	d7, [r2]
 8011434:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011438:	ed8d 7b02 	vstr	d7, [sp, #8]
 801143c:	4868      	ldr	r0, [pc, #416]	@ (80115e0 <_dtoa_r+0x610>)
 801143e:	1109      	asrs	r1, r1, #4
 8011440:	2400      	movs	r4, #0
 8011442:	2202      	movs	r2, #2
 8011444:	b929      	cbnz	r1, 8011452 <_dtoa_r+0x482>
 8011446:	2c00      	cmp	r4, #0
 8011448:	f43f af57 	beq.w	80112fa <_dtoa_r+0x32a>
 801144c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011450:	e753      	b.n	80112fa <_dtoa_r+0x32a>
 8011452:	07ce      	lsls	r6, r1, #31
 8011454:	d505      	bpl.n	8011462 <_dtoa_r+0x492>
 8011456:	ed90 6b00 	vldr	d6, [r0]
 801145a:	3201      	adds	r2, #1
 801145c:	2401      	movs	r4, #1
 801145e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011462:	1049      	asrs	r1, r1, #1
 8011464:	3008      	adds	r0, #8
 8011466:	e7ed      	b.n	8011444 <_dtoa_r+0x474>
 8011468:	2202      	movs	r2, #2
 801146a:	e746      	b.n	80112fa <_dtoa_r+0x32a>
 801146c:	f8cd 8014 	str.w	r8, [sp, #20]
 8011470:	4654      	mov	r4, sl
 8011472:	e762      	b.n	801133a <_dtoa_r+0x36a>
 8011474:	4a59      	ldr	r2, [pc, #356]	@ (80115dc <_dtoa_r+0x60c>)
 8011476:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801147a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801147e:	9a08      	ldr	r2, [sp, #32]
 8011480:	ec41 0b17 	vmov	d7, r0, r1
 8011484:	443c      	add	r4, r7
 8011486:	b34a      	cbz	r2, 80114dc <_dtoa_r+0x50c>
 8011488:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801148c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8011490:	463e      	mov	r6, r7
 8011492:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011496:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801149a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801149e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80114a2:	ee14 2a90 	vmov	r2, s9
 80114a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80114aa:	3230      	adds	r2, #48	@ 0x30
 80114ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 80114b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80114b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b8:	f806 2b01 	strb.w	r2, [r6], #1
 80114bc:	d438      	bmi.n	8011530 <_dtoa_r+0x560>
 80114be:	ee32 5b46 	vsub.f64	d5, d2, d6
 80114c2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80114c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ca:	d46e      	bmi.n	80115aa <_dtoa_r+0x5da>
 80114cc:	42a6      	cmp	r6, r4
 80114ce:	f43f af5a 	beq.w	8011386 <_dtoa_r+0x3b6>
 80114d2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80114d6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80114da:	e7e0      	b.n	801149e <_dtoa_r+0x4ce>
 80114dc:	4621      	mov	r1, r4
 80114de:	463e      	mov	r6, r7
 80114e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80114e4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80114e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80114ec:	ee14 2a90 	vmov	r2, s9
 80114f0:	3230      	adds	r2, #48	@ 0x30
 80114f2:	f806 2b01 	strb.w	r2, [r6], #1
 80114f6:	42a6      	cmp	r6, r4
 80114f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80114fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011500:	d119      	bne.n	8011536 <_dtoa_r+0x566>
 8011502:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8011506:	ee37 4b05 	vadd.f64	d4, d7, d5
 801150a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011512:	dc4a      	bgt.n	80115aa <_dtoa_r+0x5da>
 8011514:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011518:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011520:	f57f af31 	bpl.w	8011386 <_dtoa_r+0x3b6>
 8011524:	460e      	mov	r6, r1
 8011526:	3901      	subs	r1, #1
 8011528:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801152c:	2b30      	cmp	r3, #48	@ 0x30
 801152e:	d0f9      	beq.n	8011524 <_dtoa_r+0x554>
 8011530:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011534:	e027      	b.n	8011586 <_dtoa_r+0x5b6>
 8011536:	ee26 6b03 	vmul.f64	d6, d6, d3
 801153a:	e7d5      	b.n	80114e8 <_dtoa_r+0x518>
 801153c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011540:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011544:	463e      	mov	r6, r7
 8011546:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801154a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801154e:	ee15 3a10 	vmov	r3, s10
 8011552:	3330      	adds	r3, #48	@ 0x30
 8011554:	f806 3b01 	strb.w	r3, [r6], #1
 8011558:	1bf3      	subs	r3, r6, r7
 801155a:	459a      	cmp	sl, r3
 801155c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011560:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011564:	d132      	bne.n	80115cc <_dtoa_r+0x5fc>
 8011566:	ee37 7b07 	vadd.f64	d7, d7, d7
 801156a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011572:	dc18      	bgt.n	80115a6 <_dtoa_r+0x5d6>
 8011574:	eeb4 7b46 	vcmp.f64	d7, d6
 8011578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801157c:	d103      	bne.n	8011586 <_dtoa_r+0x5b6>
 801157e:	ee15 3a10 	vmov	r3, s10
 8011582:	07db      	lsls	r3, r3, #31
 8011584:	d40f      	bmi.n	80115a6 <_dtoa_r+0x5d6>
 8011586:	9901      	ldr	r1, [sp, #4]
 8011588:	4648      	mov	r0, r9
 801158a:	f000 fb09 	bl	8011ba0 <_Bfree>
 801158e:	2300      	movs	r3, #0
 8011590:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011592:	7033      	strb	r3, [r6, #0]
 8011594:	f108 0301 	add.w	r3, r8, #1
 8011598:	6013      	str	r3, [r2, #0]
 801159a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801159c:	2b00      	cmp	r3, #0
 801159e:	f000 824b 	beq.w	8011a38 <_dtoa_r+0xa68>
 80115a2:	601e      	str	r6, [r3, #0]
 80115a4:	e248      	b.n	8011a38 <_dtoa_r+0xa68>
 80115a6:	f8cd 8014 	str.w	r8, [sp, #20]
 80115aa:	4633      	mov	r3, r6
 80115ac:	461e      	mov	r6, r3
 80115ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80115b2:	2a39      	cmp	r2, #57	@ 0x39
 80115b4:	d106      	bne.n	80115c4 <_dtoa_r+0x5f4>
 80115b6:	429f      	cmp	r7, r3
 80115b8:	d1f8      	bne.n	80115ac <_dtoa_r+0x5dc>
 80115ba:	9a05      	ldr	r2, [sp, #20]
 80115bc:	3201      	adds	r2, #1
 80115be:	9205      	str	r2, [sp, #20]
 80115c0:	2230      	movs	r2, #48	@ 0x30
 80115c2:	703a      	strb	r2, [r7, #0]
 80115c4:	781a      	ldrb	r2, [r3, #0]
 80115c6:	3201      	adds	r2, #1
 80115c8:	701a      	strb	r2, [r3, #0]
 80115ca:	e7b1      	b.n	8011530 <_dtoa_r+0x560>
 80115cc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80115d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d8:	d1b5      	bne.n	8011546 <_dtoa_r+0x576>
 80115da:	e7d4      	b.n	8011586 <_dtoa_r+0x5b6>
 80115dc:	08026a88 	.word	0x08026a88
 80115e0:	08026a60 	.word	0x08026a60
 80115e4:	9908      	ldr	r1, [sp, #32]
 80115e6:	2900      	cmp	r1, #0
 80115e8:	f000 80e9 	beq.w	80117be <_dtoa_r+0x7ee>
 80115ec:	9907      	ldr	r1, [sp, #28]
 80115ee:	2901      	cmp	r1, #1
 80115f0:	f300 80cb 	bgt.w	801178a <_dtoa_r+0x7ba>
 80115f4:	2d00      	cmp	r5, #0
 80115f6:	f000 80c4 	beq.w	8011782 <_dtoa_r+0x7b2>
 80115fa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80115fe:	9e04      	ldr	r6, [sp, #16]
 8011600:	461c      	mov	r4, r3
 8011602:	9305      	str	r3, [sp, #20]
 8011604:	9b04      	ldr	r3, [sp, #16]
 8011606:	4413      	add	r3, r2
 8011608:	9304      	str	r3, [sp, #16]
 801160a:	9b06      	ldr	r3, [sp, #24]
 801160c:	2101      	movs	r1, #1
 801160e:	4413      	add	r3, r2
 8011610:	4648      	mov	r0, r9
 8011612:	9306      	str	r3, [sp, #24]
 8011614:	f000 fb78 	bl	8011d08 <__i2b>
 8011618:	9b05      	ldr	r3, [sp, #20]
 801161a:	4605      	mov	r5, r0
 801161c:	b166      	cbz	r6, 8011638 <_dtoa_r+0x668>
 801161e:	9a06      	ldr	r2, [sp, #24]
 8011620:	2a00      	cmp	r2, #0
 8011622:	dd09      	ble.n	8011638 <_dtoa_r+0x668>
 8011624:	42b2      	cmp	r2, r6
 8011626:	9904      	ldr	r1, [sp, #16]
 8011628:	bfa8      	it	ge
 801162a:	4632      	movge	r2, r6
 801162c:	1a89      	subs	r1, r1, r2
 801162e:	9104      	str	r1, [sp, #16]
 8011630:	9906      	ldr	r1, [sp, #24]
 8011632:	1ab6      	subs	r6, r6, r2
 8011634:	1a8a      	subs	r2, r1, r2
 8011636:	9206      	str	r2, [sp, #24]
 8011638:	b30b      	cbz	r3, 801167e <_dtoa_r+0x6ae>
 801163a:	9a08      	ldr	r2, [sp, #32]
 801163c:	2a00      	cmp	r2, #0
 801163e:	f000 80c5 	beq.w	80117cc <_dtoa_r+0x7fc>
 8011642:	2c00      	cmp	r4, #0
 8011644:	f000 80bf 	beq.w	80117c6 <_dtoa_r+0x7f6>
 8011648:	4629      	mov	r1, r5
 801164a:	4622      	mov	r2, r4
 801164c:	4648      	mov	r0, r9
 801164e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011650:	f000 fc12 	bl	8011e78 <__pow5mult>
 8011654:	9a01      	ldr	r2, [sp, #4]
 8011656:	4601      	mov	r1, r0
 8011658:	4605      	mov	r5, r0
 801165a:	4648      	mov	r0, r9
 801165c:	f000 fb6a 	bl	8011d34 <__multiply>
 8011660:	9901      	ldr	r1, [sp, #4]
 8011662:	9005      	str	r0, [sp, #20]
 8011664:	4648      	mov	r0, r9
 8011666:	f000 fa9b 	bl	8011ba0 <_Bfree>
 801166a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801166c:	1b1b      	subs	r3, r3, r4
 801166e:	f000 80b0 	beq.w	80117d2 <_dtoa_r+0x802>
 8011672:	9905      	ldr	r1, [sp, #20]
 8011674:	461a      	mov	r2, r3
 8011676:	4648      	mov	r0, r9
 8011678:	f000 fbfe 	bl	8011e78 <__pow5mult>
 801167c:	9001      	str	r0, [sp, #4]
 801167e:	2101      	movs	r1, #1
 8011680:	4648      	mov	r0, r9
 8011682:	f000 fb41 	bl	8011d08 <__i2b>
 8011686:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011688:	4604      	mov	r4, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	f000 81da 	beq.w	8011a44 <_dtoa_r+0xa74>
 8011690:	461a      	mov	r2, r3
 8011692:	4601      	mov	r1, r0
 8011694:	4648      	mov	r0, r9
 8011696:	f000 fbef 	bl	8011e78 <__pow5mult>
 801169a:	9b07      	ldr	r3, [sp, #28]
 801169c:	2b01      	cmp	r3, #1
 801169e:	4604      	mov	r4, r0
 80116a0:	f300 80a0 	bgt.w	80117e4 <_dtoa_r+0x814>
 80116a4:	9b02      	ldr	r3, [sp, #8]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	f040 8096 	bne.w	80117d8 <_dtoa_r+0x808>
 80116ac:	9b03      	ldr	r3, [sp, #12]
 80116ae:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80116b2:	2a00      	cmp	r2, #0
 80116b4:	f040 8092 	bne.w	80117dc <_dtoa_r+0x80c>
 80116b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80116bc:	0d12      	lsrs	r2, r2, #20
 80116be:	0512      	lsls	r2, r2, #20
 80116c0:	2a00      	cmp	r2, #0
 80116c2:	f000 808d 	beq.w	80117e0 <_dtoa_r+0x810>
 80116c6:	9b04      	ldr	r3, [sp, #16]
 80116c8:	3301      	adds	r3, #1
 80116ca:	9304      	str	r3, [sp, #16]
 80116cc:	9b06      	ldr	r3, [sp, #24]
 80116ce:	3301      	adds	r3, #1
 80116d0:	9306      	str	r3, [sp, #24]
 80116d2:	2301      	movs	r3, #1
 80116d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80116d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116d8:	2b00      	cmp	r3, #0
 80116da:	f000 81b9 	beq.w	8011a50 <_dtoa_r+0xa80>
 80116de:	6922      	ldr	r2, [r4, #16]
 80116e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80116e4:	6910      	ldr	r0, [r2, #16]
 80116e6:	f000 fac3 	bl	8011c70 <__hi0bits>
 80116ea:	f1c0 0020 	rsb	r0, r0, #32
 80116ee:	9b06      	ldr	r3, [sp, #24]
 80116f0:	4418      	add	r0, r3
 80116f2:	f010 001f 	ands.w	r0, r0, #31
 80116f6:	f000 8081 	beq.w	80117fc <_dtoa_r+0x82c>
 80116fa:	f1c0 0220 	rsb	r2, r0, #32
 80116fe:	2a04      	cmp	r2, #4
 8011700:	dd73      	ble.n	80117ea <_dtoa_r+0x81a>
 8011702:	9b04      	ldr	r3, [sp, #16]
 8011704:	f1c0 001c 	rsb	r0, r0, #28
 8011708:	4403      	add	r3, r0
 801170a:	9304      	str	r3, [sp, #16]
 801170c:	9b06      	ldr	r3, [sp, #24]
 801170e:	4406      	add	r6, r0
 8011710:	4403      	add	r3, r0
 8011712:	9306      	str	r3, [sp, #24]
 8011714:	9b04      	ldr	r3, [sp, #16]
 8011716:	2b00      	cmp	r3, #0
 8011718:	dd05      	ble.n	8011726 <_dtoa_r+0x756>
 801171a:	9901      	ldr	r1, [sp, #4]
 801171c:	461a      	mov	r2, r3
 801171e:	4648      	mov	r0, r9
 8011720:	f000 fc04 	bl	8011f2c <__lshift>
 8011724:	9001      	str	r0, [sp, #4]
 8011726:	9b06      	ldr	r3, [sp, #24]
 8011728:	2b00      	cmp	r3, #0
 801172a:	dd05      	ble.n	8011738 <_dtoa_r+0x768>
 801172c:	4621      	mov	r1, r4
 801172e:	461a      	mov	r2, r3
 8011730:	4648      	mov	r0, r9
 8011732:	f000 fbfb 	bl	8011f2c <__lshift>
 8011736:	4604      	mov	r4, r0
 8011738:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801173a:	2b00      	cmp	r3, #0
 801173c:	d060      	beq.n	8011800 <_dtoa_r+0x830>
 801173e:	9801      	ldr	r0, [sp, #4]
 8011740:	4621      	mov	r1, r4
 8011742:	f000 fc5f 	bl	8012004 <__mcmp>
 8011746:	2800      	cmp	r0, #0
 8011748:	da5a      	bge.n	8011800 <_dtoa_r+0x830>
 801174a:	f108 33ff 	add.w	r3, r8, #4294967295
 801174e:	9305      	str	r3, [sp, #20]
 8011750:	9901      	ldr	r1, [sp, #4]
 8011752:	2300      	movs	r3, #0
 8011754:	220a      	movs	r2, #10
 8011756:	4648      	mov	r0, r9
 8011758:	f000 fa44 	bl	8011be4 <__multadd>
 801175c:	9b08      	ldr	r3, [sp, #32]
 801175e:	9001      	str	r0, [sp, #4]
 8011760:	2b00      	cmp	r3, #0
 8011762:	f000 8177 	beq.w	8011a54 <_dtoa_r+0xa84>
 8011766:	4629      	mov	r1, r5
 8011768:	2300      	movs	r3, #0
 801176a:	220a      	movs	r2, #10
 801176c:	4648      	mov	r0, r9
 801176e:	f000 fa39 	bl	8011be4 <__multadd>
 8011772:	f1bb 0f00 	cmp.w	fp, #0
 8011776:	4605      	mov	r5, r0
 8011778:	dc6e      	bgt.n	8011858 <_dtoa_r+0x888>
 801177a:	9b07      	ldr	r3, [sp, #28]
 801177c:	2b02      	cmp	r3, #2
 801177e:	dc48      	bgt.n	8011812 <_dtoa_r+0x842>
 8011780:	e06a      	b.n	8011858 <_dtoa_r+0x888>
 8011782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011784:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011788:	e739      	b.n	80115fe <_dtoa_r+0x62e>
 801178a:	f10a 34ff 	add.w	r4, sl, #4294967295
 801178e:	42a3      	cmp	r3, r4
 8011790:	db07      	blt.n	80117a2 <_dtoa_r+0x7d2>
 8011792:	f1ba 0f00 	cmp.w	sl, #0
 8011796:	eba3 0404 	sub.w	r4, r3, r4
 801179a:	db0b      	blt.n	80117b4 <_dtoa_r+0x7e4>
 801179c:	9e04      	ldr	r6, [sp, #16]
 801179e:	4652      	mov	r2, sl
 80117a0:	e72f      	b.n	8011602 <_dtoa_r+0x632>
 80117a2:	1ae2      	subs	r2, r4, r3
 80117a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117a6:	9e04      	ldr	r6, [sp, #16]
 80117a8:	4413      	add	r3, r2
 80117aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80117ac:	4652      	mov	r2, sl
 80117ae:	4623      	mov	r3, r4
 80117b0:	2400      	movs	r4, #0
 80117b2:	e726      	b.n	8011602 <_dtoa_r+0x632>
 80117b4:	9a04      	ldr	r2, [sp, #16]
 80117b6:	eba2 060a 	sub.w	r6, r2, sl
 80117ba:	2200      	movs	r2, #0
 80117bc:	e721      	b.n	8011602 <_dtoa_r+0x632>
 80117be:	9e04      	ldr	r6, [sp, #16]
 80117c0:	9d08      	ldr	r5, [sp, #32]
 80117c2:	461c      	mov	r4, r3
 80117c4:	e72a      	b.n	801161c <_dtoa_r+0x64c>
 80117c6:	9a01      	ldr	r2, [sp, #4]
 80117c8:	9205      	str	r2, [sp, #20]
 80117ca:	e752      	b.n	8011672 <_dtoa_r+0x6a2>
 80117cc:	9901      	ldr	r1, [sp, #4]
 80117ce:	461a      	mov	r2, r3
 80117d0:	e751      	b.n	8011676 <_dtoa_r+0x6a6>
 80117d2:	9b05      	ldr	r3, [sp, #20]
 80117d4:	9301      	str	r3, [sp, #4]
 80117d6:	e752      	b.n	801167e <_dtoa_r+0x6ae>
 80117d8:	2300      	movs	r3, #0
 80117da:	e77b      	b.n	80116d4 <_dtoa_r+0x704>
 80117dc:	9b02      	ldr	r3, [sp, #8]
 80117de:	e779      	b.n	80116d4 <_dtoa_r+0x704>
 80117e0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80117e2:	e778      	b.n	80116d6 <_dtoa_r+0x706>
 80117e4:	2300      	movs	r3, #0
 80117e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117e8:	e779      	b.n	80116de <_dtoa_r+0x70e>
 80117ea:	d093      	beq.n	8011714 <_dtoa_r+0x744>
 80117ec:	9b04      	ldr	r3, [sp, #16]
 80117ee:	321c      	adds	r2, #28
 80117f0:	4413      	add	r3, r2
 80117f2:	9304      	str	r3, [sp, #16]
 80117f4:	9b06      	ldr	r3, [sp, #24]
 80117f6:	4416      	add	r6, r2
 80117f8:	4413      	add	r3, r2
 80117fa:	e78a      	b.n	8011712 <_dtoa_r+0x742>
 80117fc:	4602      	mov	r2, r0
 80117fe:	e7f5      	b.n	80117ec <_dtoa_r+0x81c>
 8011800:	f1ba 0f00 	cmp.w	sl, #0
 8011804:	f8cd 8014 	str.w	r8, [sp, #20]
 8011808:	46d3      	mov	fp, sl
 801180a:	dc21      	bgt.n	8011850 <_dtoa_r+0x880>
 801180c:	9b07      	ldr	r3, [sp, #28]
 801180e:	2b02      	cmp	r3, #2
 8011810:	dd1e      	ble.n	8011850 <_dtoa_r+0x880>
 8011812:	f1bb 0f00 	cmp.w	fp, #0
 8011816:	f47f addc 	bne.w	80113d2 <_dtoa_r+0x402>
 801181a:	4621      	mov	r1, r4
 801181c:	465b      	mov	r3, fp
 801181e:	2205      	movs	r2, #5
 8011820:	4648      	mov	r0, r9
 8011822:	f000 f9df 	bl	8011be4 <__multadd>
 8011826:	4601      	mov	r1, r0
 8011828:	4604      	mov	r4, r0
 801182a:	9801      	ldr	r0, [sp, #4]
 801182c:	f000 fbea 	bl	8012004 <__mcmp>
 8011830:	2800      	cmp	r0, #0
 8011832:	f77f adce 	ble.w	80113d2 <_dtoa_r+0x402>
 8011836:	463e      	mov	r6, r7
 8011838:	2331      	movs	r3, #49	@ 0x31
 801183a:	f806 3b01 	strb.w	r3, [r6], #1
 801183e:	9b05      	ldr	r3, [sp, #20]
 8011840:	3301      	adds	r3, #1
 8011842:	9305      	str	r3, [sp, #20]
 8011844:	e5c9      	b.n	80113da <_dtoa_r+0x40a>
 8011846:	f8cd 8014 	str.w	r8, [sp, #20]
 801184a:	4654      	mov	r4, sl
 801184c:	4625      	mov	r5, r4
 801184e:	e7f2      	b.n	8011836 <_dtoa_r+0x866>
 8011850:	9b08      	ldr	r3, [sp, #32]
 8011852:	2b00      	cmp	r3, #0
 8011854:	f000 8102 	beq.w	8011a5c <_dtoa_r+0xa8c>
 8011858:	2e00      	cmp	r6, #0
 801185a:	dd05      	ble.n	8011868 <_dtoa_r+0x898>
 801185c:	4629      	mov	r1, r5
 801185e:	4632      	mov	r2, r6
 8011860:	4648      	mov	r0, r9
 8011862:	f000 fb63 	bl	8011f2c <__lshift>
 8011866:	4605      	mov	r5, r0
 8011868:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801186a:	2b00      	cmp	r3, #0
 801186c:	d058      	beq.n	8011920 <_dtoa_r+0x950>
 801186e:	6869      	ldr	r1, [r5, #4]
 8011870:	4648      	mov	r0, r9
 8011872:	f000 f955 	bl	8011b20 <_Balloc>
 8011876:	4606      	mov	r6, r0
 8011878:	b928      	cbnz	r0, 8011886 <_dtoa_r+0x8b6>
 801187a:	4b82      	ldr	r3, [pc, #520]	@ (8011a84 <_dtoa_r+0xab4>)
 801187c:	4602      	mov	r2, r0
 801187e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011882:	f7ff bbbe 	b.w	8011002 <_dtoa_r+0x32>
 8011886:	692a      	ldr	r2, [r5, #16]
 8011888:	3202      	adds	r2, #2
 801188a:	0092      	lsls	r2, r2, #2
 801188c:	f105 010c 	add.w	r1, r5, #12
 8011890:	300c      	adds	r0, #12
 8011892:	f7ff fb04 	bl	8010e9e <memcpy>
 8011896:	2201      	movs	r2, #1
 8011898:	4631      	mov	r1, r6
 801189a:	4648      	mov	r0, r9
 801189c:	f000 fb46 	bl	8011f2c <__lshift>
 80118a0:	1c7b      	adds	r3, r7, #1
 80118a2:	9304      	str	r3, [sp, #16]
 80118a4:	eb07 030b 	add.w	r3, r7, fp
 80118a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80118aa:	9b02      	ldr	r3, [sp, #8]
 80118ac:	f003 0301 	and.w	r3, r3, #1
 80118b0:	46a8      	mov	r8, r5
 80118b2:	9308      	str	r3, [sp, #32]
 80118b4:	4605      	mov	r5, r0
 80118b6:	9b04      	ldr	r3, [sp, #16]
 80118b8:	9801      	ldr	r0, [sp, #4]
 80118ba:	4621      	mov	r1, r4
 80118bc:	f103 3bff 	add.w	fp, r3, #4294967295
 80118c0:	f7ff fafb 	bl	8010eba <quorem>
 80118c4:	4641      	mov	r1, r8
 80118c6:	9002      	str	r0, [sp, #8]
 80118c8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80118cc:	9801      	ldr	r0, [sp, #4]
 80118ce:	f000 fb99 	bl	8012004 <__mcmp>
 80118d2:	462a      	mov	r2, r5
 80118d4:	9006      	str	r0, [sp, #24]
 80118d6:	4621      	mov	r1, r4
 80118d8:	4648      	mov	r0, r9
 80118da:	f000 fbaf 	bl	801203c <__mdiff>
 80118de:	68c2      	ldr	r2, [r0, #12]
 80118e0:	4606      	mov	r6, r0
 80118e2:	b9fa      	cbnz	r2, 8011924 <_dtoa_r+0x954>
 80118e4:	4601      	mov	r1, r0
 80118e6:	9801      	ldr	r0, [sp, #4]
 80118e8:	f000 fb8c 	bl	8012004 <__mcmp>
 80118ec:	4602      	mov	r2, r0
 80118ee:	4631      	mov	r1, r6
 80118f0:	4648      	mov	r0, r9
 80118f2:	920a      	str	r2, [sp, #40]	@ 0x28
 80118f4:	f000 f954 	bl	8011ba0 <_Bfree>
 80118f8:	9b07      	ldr	r3, [sp, #28]
 80118fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118fc:	9e04      	ldr	r6, [sp, #16]
 80118fe:	ea42 0103 	orr.w	r1, r2, r3
 8011902:	9b08      	ldr	r3, [sp, #32]
 8011904:	4319      	orrs	r1, r3
 8011906:	d10f      	bne.n	8011928 <_dtoa_r+0x958>
 8011908:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801190c:	d028      	beq.n	8011960 <_dtoa_r+0x990>
 801190e:	9b06      	ldr	r3, [sp, #24]
 8011910:	2b00      	cmp	r3, #0
 8011912:	dd02      	ble.n	801191a <_dtoa_r+0x94a>
 8011914:	9b02      	ldr	r3, [sp, #8]
 8011916:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801191a:	f88b a000 	strb.w	sl, [fp]
 801191e:	e55e      	b.n	80113de <_dtoa_r+0x40e>
 8011920:	4628      	mov	r0, r5
 8011922:	e7bd      	b.n	80118a0 <_dtoa_r+0x8d0>
 8011924:	2201      	movs	r2, #1
 8011926:	e7e2      	b.n	80118ee <_dtoa_r+0x91e>
 8011928:	9b06      	ldr	r3, [sp, #24]
 801192a:	2b00      	cmp	r3, #0
 801192c:	db04      	blt.n	8011938 <_dtoa_r+0x968>
 801192e:	9907      	ldr	r1, [sp, #28]
 8011930:	430b      	orrs	r3, r1
 8011932:	9908      	ldr	r1, [sp, #32]
 8011934:	430b      	orrs	r3, r1
 8011936:	d120      	bne.n	801197a <_dtoa_r+0x9aa>
 8011938:	2a00      	cmp	r2, #0
 801193a:	ddee      	ble.n	801191a <_dtoa_r+0x94a>
 801193c:	9901      	ldr	r1, [sp, #4]
 801193e:	2201      	movs	r2, #1
 8011940:	4648      	mov	r0, r9
 8011942:	f000 faf3 	bl	8011f2c <__lshift>
 8011946:	4621      	mov	r1, r4
 8011948:	9001      	str	r0, [sp, #4]
 801194a:	f000 fb5b 	bl	8012004 <__mcmp>
 801194e:	2800      	cmp	r0, #0
 8011950:	dc03      	bgt.n	801195a <_dtoa_r+0x98a>
 8011952:	d1e2      	bne.n	801191a <_dtoa_r+0x94a>
 8011954:	f01a 0f01 	tst.w	sl, #1
 8011958:	d0df      	beq.n	801191a <_dtoa_r+0x94a>
 801195a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801195e:	d1d9      	bne.n	8011914 <_dtoa_r+0x944>
 8011960:	2339      	movs	r3, #57	@ 0x39
 8011962:	f88b 3000 	strb.w	r3, [fp]
 8011966:	4633      	mov	r3, r6
 8011968:	461e      	mov	r6, r3
 801196a:	3b01      	subs	r3, #1
 801196c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011970:	2a39      	cmp	r2, #57	@ 0x39
 8011972:	d052      	beq.n	8011a1a <_dtoa_r+0xa4a>
 8011974:	3201      	adds	r2, #1
 8011976:	701a      	strb	r2, [r3, #0]
 8011978:	e531      	b.n	80113de <_dtoa_r+0x40e>
 801197a:	2a00      	cmp	r2, #0
 801197c:	dd07      	ble.n	801198e <_dtoa_r+0x9be>
 801197e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011982:	d0ed      	beq.n	8011960 <_dtoa_r+0x990>
 8011984:	f10a 0301 	add.w	r3, sl, #1
 8011988:	f88b 3000 	strb.w	r3, [fp]
 801198c:	e527      	b.n	80113de <_dtoa_r+0x40e>
 801198e:	9b04      	ldr	r3, [sp, #16]
 8011990:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011992:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011996:	4293      	cmp	r3, r2
 8011998:	d029      	beq.n	80119ee <_dtoa_r+0xa1e>
 801199a:	9901      	ldr	r1, [sp, #4]
 801199c:	2300      	movs	r3, #0
 801199e:	220a      	movs	r2, #10
 80119a0:	4648      	mov	r0, r9
 80119a2:	f000 f91f 	bl	8011be4 <__multadd>
 80119a6:	45a8      	cmp	r8, r5
 80119a8:	9001      	str	r0, [sp, #4]
 80119aa:	f04f 0300 	mov.w	r3, #0
 80119ae:	f04f 020a 	mov.w	r2, #10
 80119b2:	4641      	mov	r1, r8
 80119b4:	4648      	mov	r0, r9
 80119b6:	d107      	bne.n	80119c8 <_dtoa_r+0x9f8>
 80119b8:	f000 f914 	bl	8011be4 <__multadd>
 80119bc:	4680      	mov	r8, r0
 80119be:	4605      	mov	r5, r0
 80119c0:	9b04      	ldr	r3, [sp, #16]
 80119c2:	3301      	adds	r3, #1
 80119c4:	9304      	str	r3, [sp, #16]
 80119c6:	e776      	b.n	80118b6 <_dtoa_r+0x8e6>
 80119c8:	f000 f90c 	bl	8011be4 <__multadd>
 80119cc:	4629      	mov	r1, r5
 80119ce:	4680      	mov	r8, r0
 80119d0:	2300      	movs	r3, #0
 80119d2:	220a      	movs	r2, #10
 80119d4:	4648      	mov	r0, r9
 80119d6:	f000 f905 	bl	8011be4 <__multadd>
 80119da:	4605      	mov	r5, r0
 80119dc:	e7f0      	b.n	80119c0 <_dtoa_r+0x9f0>
 80119de:	f1bb 0f00 	cmp.w	fp, #0
 80119e2:	bfcc      	ite	gt
 80119e4:	465e      	movgt	r6, fp
 80119e6:	2601      	movle	r6, #1
 80119e8:	443e      	add	r6, r7
 80119ea:	f04f 0800 	mov.w	r8, #0
 80119ee:	9901      	ldr	r1, [sp, #4]
 80119f0:	2201      	movs	r2, #1
 80119f2:	4648      	mov	r0, r9
 80119f4:	f000 fa9a 	bl	8011f2c <__lshift>
 80119f8:	4621      	mov	r1, r4
 80119fa:	9001      	str	r0, [sp, #4]
 80119fc:	f000 fb02 	bl	8012004 <__mcmp>
 8011a00:	2800      	cmp	r0, #0
 8011a02:	dcb0      	bgt.n	8011966 <_dtoa_r+0x996>
 8011a04:	d102      	bne.n	8011a0c <_dtoa_r+0xa3c>
 8011a06:	f01a 0f01 	tst.w	sl, #1
 8011a0a:	d1ac      	bne.n	8011966 <_dtoa_r+0x996>
 8011a0c:	4633      	mov	r3, r6
 8011a0e:	461e      	mov	r6, r3
 8011a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a14:	2a30      	cmp	r2, #48	@ 0x30
 8011a16:	d0fa      	beq.n	8011a0e <_dtoa_r+0xa3e>
 8011a18:	e4e1      	b.n	80113de <_dtoa_r+0x40e>
 8011a1a:	429f      	cmp	r7, r3
 8011a1c:	d1a4      	bne.n	8011968 <_dtoa_r+0x998>
 8011a1e:	9b05      	ldr	r3, [sp, #20]
 8011a20:	3301      	adds	r3, #1
 8011a22:	9305      	str	r3, [sp, #20]
 8011a24:	2331      	movs	r3, #49	@ 0x31
 8011a26:	703b      	strb	r3, [r7, #0]
 8011a28:	e4d9      	b.n	80113de <_dtoa_r+0x40e>
 8011a2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011a2c:	4f16      	ldr	r7, [pc, #88]	@ (8011a88 <_dtoa_r+0xab8>)
 8011a2e:	b11b      	cbz	r3, 8011a38 <_dtoa_r+0xa68>
 8011a30:	f107 0308 	add.w	r3, r7, #8
 8011a34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011a36:	6013      	str	r3, [r2, #0]
 8011a38:	4638      	mov	r0, r7
 8011a3a:	b011      	add	sp, #68	@ 0x44
 8011a3c:	ecbd 8b02 	vpop	{d8}
 8011a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a44:	9b07      	ldr	r3, [sp, #28]
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	f77f ae2c 	ble.w	80116a4 <_dtoa_r+0x6d4>
 8011a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a50:	2001      	movs	r0, #1
 8011a52:	e64c      	b.n	80116ee <_dtoa_r+0x71e>
 8011a54:	f1bb 0f00 	cmp.w	fp, #0
 8011a58:	f77f aed8 	ble.w	801180c <_dtoa_r+0x83c>
 8011a5c:	463e      	mov	r6, r7
 8011a5e:	9801      	ldr	r0, [sp, #4]
 8011a60:	4621      	mov	r1, r4
 8011a62:	f7ff fa2a 	bl	8010eba <quorem>
 8011a66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011a6a:	f806 ab01 	strb.w	sl, [r6], #1
 8011a6e:	1bf2      	subs	r2, r6, r7
 8011a70:	4593      	cmp	fp, r2
 8011a72:	ddb4      	ble.n	80119de <_dtoa_r+0xa0e>
 8011a74:	9901      	ldr	r1, [sp, #4]
 8011a76:	2300      	movs	r3, #0
 8011a78:	220a      	movs	r2, #10
 8011a7a:	4648      	mov	r0, r9
 8011a7c:	f000 f8b2 	bl	8011be4 <__multadd>
 8011a80:	9001      	str	r0, [sp, #4]
 8011a82:	e7ec      	b.n	8011a5e <_dtoa_r+0xa8e>
 8011a84:	0802698c 	.word	0x0802698c
 8011a88:	08026910 	.word	0x08026910

08011a8c <_free_r>:
 8011a8c:	b538      	push	{r3, r4, r5, lr}
 8011a8e:	4605      	mov	r5, r0
 8011a90:	2900      	cmp	r1, #0
 8011a92:	d041      	beq.n	8011b18 <_free_r+0x8c>
 8011a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a98:	1f0c      	subs	r4, r1, #4
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	bfb8      	it	lt
 8011a9e:	18e4      	addlt	r4, r4, r3
 8011aa0:	f7fe fb24 	bl	80100ec <__malloc_lock>
 8011aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8011b1c <_free_r+0x90>)
 8011aa6:	6813      	ldr	r3, [r2, #0]
 8011aa8:	b933      	cbnz	r3, 8011ab8 <_free_r+0x2c>
 8011aaa:	6063      	str	r3, [r4, #4]
 8011aac:	6014      	str	r4, [r2, #0]
 8011aae:	4628      	mov	r0, r5
 8011ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ab4:	f7fe bb20 	b.w	80100f8 <__malloc_unlock>
 8011ab8:	42a3      	cmp	r3, r4
 8011aba:	d908      	bls.n	8011ace <_free_r+0x42>
 8011abc:	6820      	ldr	r0, [r4, #0]
 8011abe:	1821      	adds	r1, r4, r0
 8011ac0:	428b      	cmp	r3, r1
 8011ac2:	bf01      	itttt	eq
 8011ac4:	6819      	ldreq	r1, [r3, #0]
 8011ac6:	685b      	ldreq	r3, [r3, #4]
 8011ac8:	1809      	addeq	r1, r1, r0
 8011aca:	6021      	streq	r1, [r4, #0]
 8011acc:	e7ed      	b.n	8011aaa <_free_r+0x1e>
 8011ace:	461a      	mov	r2, r3
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	b10b      	cbz	r3, 8011ad8 <_free_r+0x4c>
 8011ad4:	42a3      	cmp	r3, r4
 8011ad6:	d9fa      	bls.n	8011ace <_free_r+0x42>
 8011ad8:	6811      	ldr	r1, [r2, #0]
 8011ada:	1850      	adds	r0, r2, r1
 8011adc:	42a0      	cmp	r0, r4
 8011ade:	d10b      	bne.n	8011af8 <_free_r+0x6c>
 8011ae0:	6820      	ldr	r0, [r4, #0]
 8011ae2:	4401      	add	r1, r0
 8011ae4:	1850      	adds	r0, r2, r1
 8011ae6:	4283      	cmp	r3, r0
 8011ae8:	6011      	str	r1, [r2, #0]
 8011aea:	d1e0      	bne.n	8011aae <_free_r+0x22>
 8011aec:	6818      	ldr	r0, [r3, #0]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	6053      	str	r3, [r2, #4]
 8011af2:	4408      	add	r0, r1
 8011af4:	6010      	str	r0, [r2, #0]
 8011af6:	e7da      	b.n	8011aae <_free_r+0x22>
 8011af8:	d902      	bls.n	8011b00 <_free_r+0x74>
 8011afa:	230c      	movs	r3, #12
 8011afc:	602b      	str	r3, [r5, #0]
 8011afe:	e7d6      	b.n	8011aae <_free_r+0x22>
 8011b00:	6820      	ldr	r0, [r4, #0]
 8011b02:	1821      	adds	r1, r4, r0
 8011b04:	428b      	cmp	r3, r1
 8011b06:	bf04      	itt	eq
 8011b08:	6819      	ldreq	r1, [r3, #0]
 8011b0a:	685b      	ldreq	r3, [r3, #4]
 8011b0c:	6063      	str	r3, [r4, #4]
 8011b0e:	bf04      	itt	eq
 8011b10:	1809      	addeq	r1, r1, r0
 8011b12:	6021      	streq	r1, [r4, #0]
 8011b14:	6054      	str	r4, [r2, #4]
 8011b16:	e7ca      	b.n	8011aae <_free_r+0x22>
 8011b18:	bd38      	pop	{r3, r4, r5, pc}
 8011b1a:	bf00      	nop
 8011b1c:	200095f0 	.word	0x200095f0

08011b20 <_Balloc>:
 8011b20:	b570      	push	{r4, r5, r6, lr}
 8011b22:	69c6      	ldr	r6, [r0, #28]
 8011b24:	4604      	mov	r4, r0
 8011b26:	460d      	mov	r5, r1
 8011b28:	b976      	cbnz	r6, 8011b48 <_Balloc+0x28>
 8011b2a:	2010      	movs	r0, #16
 8011b2c:	f7fe fa34 	bl	800ff98 <malloc>
 8011b30:	4602      	mov	r2, r0
 8011b32:	61e0      	str	r0, [r4, #28]
 8011b34:	b920      	cbnz	r0, 8011b40 <_Balloc+0x20>
 8011b36:	4b18      	ldr	r3, [pc, #96]	@ (8011b98 <_Balloc+0x78>)
 8011b38:	4818      	ldr	r0, [pc, #96]	@ (8011b9c <_Balloc+0x7c>)
 8011b3a:	216b      	movs	r1, #107	@ 0x6b
 8011b3c:	f000 fddc 	bl	80126f8 <__assert_func>
 8011b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b44:	6006      	str	r6, [r0, #0]
 8011b46:	60c6      	str	r6, [r0, #12]
 8011b48:	69e6      	ldr	r6, [r4, #28]
 8011b4a:	68f3      	ldr	r3, [r6, #12]
 8011b4c:	b183      	cbz	r3, 8011b70 <_Balloc+0x50>
 8011b4e:	69e3      	ldr	r3, [r4, #28]
 8011b50:	68db      	ldr	r3, [r3, #12]
 8011b52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011b56:	b9b8      	cbnz	r0, 8011b88 <_Balloc+0x68>
 8011b58:	2101      	movs	r1, #1
 8011b5a:	fa01 f605 	lsl.w	r6, r1, r5
 8011b5e:	1d72      	adds	r2, r6, #5
 8011b60:	0092      	lsls	r2, r2, #2
 8011b62:	4620      	mov	r0, r4
 8011b64:	f000 fde6 	bl	8012734 <_calloc_r>
 8011b68:	b160      	cbz	r0, 8011b84 <_Balloc+0x64>
 8011b6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011b6e:	e00e      	b.n	8011b8e <_Balloc+0x6e>
 8011b70:	2221      	movs	r2, #33	@ 0x21
 8011b72:	2104      	movs	r1, #4
 8011b74:	4620      	mov	r0, r4
 8011b76:	f000 fddd 	bl	8012734 <_calloc_r>
 8011b7a:	69e3      	ldr	r3, [r4, #28]
 8011b7c:	60f0      	str	r0, [r6, #12]
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d1e4      	bne.n	8011b4e <_Balloc+0x2e>
 8011b84:	2000      	movs	r0, #0
 8011b86:	bd70      	pop	{r4, r5, r6, pc}
 8011b88:	6802      	ldr	r2, [r0, #0]
 8011b8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011b8e:	2300      	movs	r3, #0
 8011b90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011b94:	e7f7      	b.n	8011b86 <_Balloc+0x66>
 8011b96:	bf00      	nop
 8011b98:	0802691d 	.word	0x0802691d
 8011b9c:	0802699d 	.word	0x0802699d

08011ba0 <_Bfree>:
 8011ba0:	b570      	push	{r4, r5, r6, lr}
 8011ba2:	69c6      	ldr	r6, [r0, #28]
 8011ba4:	4605      	mov	r5, r0
 8011ba6:	460c      	mov	r4, r1
 8011ba8:	b976      	cbnz	r6, 8011bc8 <_Bfree+0x28>
 8011baa:	2010      	movs	r0, #16
 8011bac:	f7fe f9f4 	bl	800ff98 <malloc>
 8011bb0:	4602      	mov	r2, r0
 8011bb2:	61e8      	str	r0, [r5, #28]
 8011bb4:	b920      	cbnz	r0, 8011bc0 <_Bfree+0x20>
 8011bb6:	4b09      	ldr	r3, [pc, #36]	@ (8011bdc <_Bfree+0x3c>)
 8011bb8:	4809      	ldr	r0, [pc, #36]	@ (8011be0 <_Bfree+0x40>)
 8011bba:	218f      	movs	r1, #143	@ 0x8f
 8011bbc:	f000 fd9c 	bl	80126f8 <__assert_func>
 8011bc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011bc4:	6006      	str	r6, [r0, #0]
 8011bc6:	60c6      	str	r6, [r0, #12]
 8011bc8:	b13c      	cbz	r4, 8011bda <_Bfree+0x3a>
 8011bca:	69eb      	ldr	r3, [r5, #28]
 8011bcc:	6862      	ldr	r2, [r4, #4]
 8011bce:	68db      	ldr	r3, [r3, #12]
 8011bd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011bd4:	6021      	str	r1, [r4, #0]
 8011bd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011bda:	bd70      	pop	{r4, r5, r6, pc}
 8011bdc:	0802691d 	.word	0x0802691d
 8011be0:	0802699d 	.word	0x0802699d

08011be4 <__multadd>:
 8011be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be8:	690d      	ldr	r5, [r1, #16]
 8011bea:	4607      	mov	r7, r0
 8011bec:	460c      	mov	r4, r1
 8011bee:	461e      	mov	r6, r3
 8011bf0:	f101 0c14 	add.w	ip, r1, #20
 8011bf4:	2000      	movs	r0, #0
 8011bf6:	f8dc 3000 	ldr.w	r3, [ip]
 8011bfa:	b299      	uxth	r1, r3
 8011bfc:	fb02 6101 	mla	r1, r2, r1, r6
 8011c00:	0c1e      	lsrs	r6, r3, #16
 8011c02:	0c0b      	lsrs	r3, r1, #16
 8011c04:	fb02 3306 	mla	r3, r2, r6, r3
 8011c08:	b289      	uxth	r1, r1
 8011c0a:	3001      	adds	r0, #1
 8011c0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011c10:	4285      	cmp	r5, r0
 8011c12:	f84c 1b04 	str.w	r1, [ip], #4
 8011c16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011c1a:	dcec      	bgt.n	8011bf6 <__multadd+0x12>
 8011c1c:	b30e      	cbz	r6, 8011c62 <__multadd+0x7e>
 8011c1e:	68a3      	ldr	r3, [r4, #8]
 8011c20:	42ab      	cmp	r3, r5
 8011c22:	dc19      	bgt.n	8011c58 <__multadd+0x74>
 8011c24:	6861      	ldr	r1, [r4, #4]
 8011c26:	4638      	mov	r0, r7
 8011c28:	3101      	adds	r1, #1
 8011c2a:	f7ff ff79 	bl	8011b20 <_Balloc>
 8011c2e:	4680      	mov	r8, r0
 8011c30:	b928      	cbnz	r0, 8011c3e <__multadd+0x5a>
 8011c32:	4602      	mov	r2, r0
 8011c34:	4b0c      	ldr	r3, [pc, #48]	@ (8011c68 <__multadd+0x84>)
 8011c36:	480d      	ldr	r0, [pc, #52]	@ (8011c6c <__multadd+0x88>)
 8011c38:	21ba      	movs	r1, #186	@ 0xba
 8011c3a:	f000 fd5d 	bl	80126f8 <__assert_func>
 8011c3e:	6922      	ldr	r2, [r4, #16]
 8011c40:	3202      	adds	r2, #2
 8011c42:	f104 010c 	add.w	r1, r4, #12
 8011c46:	0092      	lsls	r2, r2, #2
 8011c48:	300c      	adds	r0, #12
 8011c4a:	f7ff f928 	bl	8010e9e <memcpy>
 8011c4e:	4621      	mov	r1, r4
 8011c50:	4638      	mov	r0, r7
 8011c52:	f7ff ffa5 	bl	8011ba0 <_Bfree>
 8011c56:	4644      	mov	r4, r8
 8011c58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011c5c:	3501      	adds	r5, #1
 8011c5e:	615e      	str	r6, [r3, #20]
 8011c60:	6125      	str	r5, [r4, #16]
 8011c62:	4620      	mov	r0, r4
 8011c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c68:	0802698c 	.word	0x0802698c
 8011c6c:	0802699d 	.word	0x0802699d

08011c70 <__hi0bits>:
 8011c70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011c74:	4603      	mov	r3, r0
 8011c76:	bf36      	itet	cc
 8011c78:	0403      	lslcc	r3, r0, #16
 8011c7a:	2000      	movcs	r0, #0
 8011c7c:	2010      	movcc	r0, #16
 8011c7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011c82:	bf3c      	itt	cc
 8011c84:	021b      	lslcc	r3, r3, #8
 8011c86:	3008      	addcc	r0, #8
 8011c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011c8c:	bf3c      	itt	cc
 8011c8e:	011b      	lslcc	r3, r3, #4
 8011c90:	3004      	addcc	r0, #4
 8011c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011c96:	bf3c      	itt	cc
 8011c98:	009b      	lslcc	r3, r3, #2
 8011c9a:	3002      	addcc	r0, #2
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	db05      	blt.n	8011cac <__hi0bits+0x3c>
 8011ca0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011ca4:	f100 0001 	add.w	r0, r0, #1
 8011ca8:	bf08      	it	eq
 8011caa:	2020      	moveq	r0, #32
 8011cac:	4770      	bx	lr

08011cae <__lo0bits>:
 8011cae:	6803      	ldr	r3, [r0, #0]
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	f013 0007 	ands.w	r0, r3, #7
 8011cb6:	d00b      	beq.n	8011cd0 <__lo0bits+0x22>
 8011cb8:	07d9      	lsls	r1, r3, #31
 8011cba:	d421      	bmi.n	8011d00 <__lo0bits+0x52>
 8011cbc:	0798      	lsls	r0, r3, #30
 8011cbe:	bf49      	itett	mi
 8011cc0:	085b      	lsrmi	r3, r3, #1
 8011cc2:	089b      	lsrpl	r3, r3, #2
 8011cc4:	2001      	movmi	r0, #1
 8011cc6:	6013      	strmi	r3, [r2, #0]
 8011cc8:	bf5c      	itt	pl
 8011cca:	6013      	strpl	r3, [r2, #0]
 8011ccc:	2002      	movpl	r0, #2
 8011cce:	4770      	bx	lr
 8011cd0:	b299      	uxth	r1, r3
 8011cd2:	b909      	cbnz	r1, 8011cd8 <__lo0bits+0x2a>
 8011cd4:	0c1b      	lsrs	r3, r3, #16
 8011cd6:	2010      	movs	r0, #16
 8011cd8:	b2d9      	uxtb	r1, r3
 8011cda:	b909      	cbnz	r1, 8011ce0 <__lo0bits+0x32>
 8011cdc:	3008      	adds	r0, #8
 8011cde:	0a1b      	lsrs	r3, r3, #8
 8011ce0:	0719      	lsls	r1, r3, #28
 8011ce2:	bf04      	itt	eq
 8011ce4:	091b      	lsreq	r3, r3, #4
 8011ce6:	3004      	addeq	r0, #4
 8011ce8:	0799      	lsls	r1, r3, #30
 8011cea:	bf04      	itt	eq
 8011cec:	089b      	lsreq	r3, r3, #2
 8011cee:	3002      	addeq	r0, #2
 8011cf0:	07d9      	lsls	r1, r3, #31
 8011cf2:	d403      	bmi.n	8011cfc <__lo0bits+0x4e>
 8011cf4:	085b      	lsrs	r3, r3, #1
 8011cf6:	f100 0001 	add.w	r0, r0, #1
 8011cfa:	d003      	beq.n	8011d04 <__lo0bits+0x56>
 8011cfc:	6013      	str	r3, [r2, #0]
 8011cfe:	4770      	bx	lr
 8011d00:	2000      	movs	r0, #0
 8011d02:	4770      	bx	lr
 8011d04:	2020      	movs	r0, #32
 8011d06:	4770      	bx	lr

08011d08 <__i2b>:
 8011d08:	b510      	push	{r4, lr}
 8011d0a:	460c      	mov	r4, r1
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	f7ff ff07 	bl	8011b20 <_Balloc>
 8011d12:	4602      	mov	r2, r0
 8011d14:	b928      	cbnz	r0, 8011d22 <__i2b+0x1a>
 8011d16:	4b05      	ldr	r3, [pc, #20]	@ (8011d2c <__i2b+0x24>)
 8011d18:	4805      	ldr	r0, [pc, #20]	@ (8011d30 <__i2b+0x28>)
 8011d1a:	f240 1145 	movw	r1, #325	@ 0x145
 8011d1e:	f000 fceb 	bl	80126f8 <__assert_func>
 8011d22:	2301      	movs	r3, #1
 8011d24:	6144      	str	r4, [r0, #20]
 8011d26:	6103      	str	r3, [r0, #16]
 8011d28:	bd10      	pop	{r4, pc}
 8011d2a:	bf00      	nop
 8011d2c:	0802698c 	.word	0x0802698c
 8011d30:	0802699d 	.word	0x0802699d

08011d34 <__multiply>:
 8011d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d38:	4617      	mov	r7, r2
 8011d3a:	690a      	ldr	r2, [r1, #16]
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	bfa8      	it	ge
 8011d42:	463b      	movge	r3, r7
 8011d44:	4689      	mov	r9, r1
 8011d46:	bfa4      	itt	ge
 8011d48:	460f      	movge	r7, r1
 8011d4a:	4699      	movge	r9, r3
 8011d4c:	693d      	ldr	r5, [r7, #16]
 8011d4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	6879      	ldr	r1, [r7, #4]
 8011d56:	eb05 060a 	add.w	r6, r5, sl
 8011d5a:	42b3      	cmp	r3, r6
 8011d5c:	b085      	sub	sp, #20
 8011d5e:	bfb8      	it	lt
 8011d60:	3101      	addlt	r1, #1
 8011d62:	f7ff fedd 	bl	8011b20 <_Balloc>
 8011d66:	b930      	cbnz	r0, 8011d76 <__multiply+0x42>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	4b41      	ldr	r3, [pc, #260]	@ (8011e70 <__multiply+0x13c>)
 8011d6c:	4841      	ldr	r0, [pc, #260]	@ (8011e74 <__multiply+0x140>)
 8011d6e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011d72:	f000 fcc1 	bl	80126f8 <__assert_func>
 8011d76:	f100 0414 	add.w	r4, r0, #20
 8011d7a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011d7e:	4623      	mov	r3, r4
 8011d80:	2200      	movs	r2, #0
 8011d82:	4573      	cmp	r3, lr
 8011d84:	d320      	bcc.n	8011dc8 <__multiply+0x94>
 8011d86:	f107 0814 	add.w	r8, r7, #20
 8011d8a:	f109 0114 	add.w	r1, r9, #20
 8011d8e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011d92:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011d96:	9302      	str	r3, [sp, #8]
 8011d98:	1beb      	subs	r3, r5, r7
 8011d9a:	3b15      	subs	r3, #21
 8011d9c:	f023 0303 	bic.w	r3, r3, #3
 8011da0:	3304      	adds	r3, #4
 8011da2:	3715      	adds	r7, #21
 8011da4:	42bd      	cmp	r5, r7
 8011da6:	bf38      	it	cc
 8011da8:	2304      	movcc	r3, #4
 8011daa:	9301      	str	r3, [sp, #4]
 8011dac:	9b02      	ldr	r3, [sp, #8]
 8011dae:	9103      	str	r1, [sp, #12]
 8011db0:	428b      	cmp	r3, r1
 8011db2:	d80c      	bhi.n	8011dce <__multiply+0x9a>
 8011db4:	2e00      	cmp	r6, #0
 8011db6:	dd03      	ble.n	8011dc0 <__multiply+0x8c>
 8011db8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d055      	beq.n	8011e6c <__multiply+0x138>
 8011dc0:	6106      	str	r6, [r0, #16]
 8011dc2:	b005      	add	sp, #20
 8011dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dc8:	f843 2b04 	str.w	r2, [r3], #4
 8011dcc:	e7d9      	b.n	8011d82 <__multiply+0x4e>
 8011dce:	f8b1 a000 	ldrh.w	sl, [r1]
 8011dd2:	f1ba 0f00 	cmp.w	sl, #0
 8011dd6:	d01f      	beq.n	8011e18 <__multiply+0xe4>
 8011dd8:	46c4      	mov	ip, r8
 8011dda:	46a1      	mov	r9, r4
 8011ddc:	2700      	movs	r7, #0
 8011dde:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011de2:	f8d9 3000 	ldr.w	r3, [r9]
 8011de6:	fa1f fb82 	uxth.w	fp, r2
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	fb0a 330b 	mla	r3, sl, fp, r3
 8011df0:	443b      	add	r3, r7
 8011df2:	f8d9 7000 	ldr.w	r7, [r9]
 8011df6:	0c12      	lsrs	r2, r2, #16
 8011df8:	0c3f      	lsrs	r7, r7, #16
 8011dfa:	fb0a 7202 	mla	r2, sl, r2, r7
 8011dfe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e08:	4565      	cmp	r5, ip
 8011e0a:	f849 3b04 	str.w	r3, [r9], #4
 8011e0e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011e12:	d8e4      	bhi.n	8011dde <__multiply+0xaa>
 8011e14:	9b01      	ldr	r3, [sp, #4]
 8011e16:	50e7      	str	r7, [r4, r3]
 8011e18:	9b03      	ldr	r3, [sp, #12]
 8011e1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011e1e:	3104      	adds	r1, #4
 8011e20:	f1b9 0f00 	cmp.w	r9, #0
 8011e24:	d020      	beq.n	8011e68 <__multiply+0x134>
 8011e26:	6823      	ldr	r3, [r4, #0]
 8011e28:	4647      	mov	r7, r8
 8011e2a:	46a4      	mov	ip, r4
 8011e2c:	f04f 0a00 	mov.w	sl, #0
 8011e30:	f8b7 b000 	ldrh.w	fp, [r7]
 8011e34:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011e38:	fb09 220b 	mla	r2, r9, fp, r2
 8011e3c:	4452      	add	r2, sl
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e44:	f84c 3b04 	str.w	r3, [ip], #4
 8011e48:	f857 3b04 	ldr.w	r3, [r7], #4
 8011e4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e50:	f8bc 3000 	ldrh.w	r3, [ip]
 8011e54:	fb09 330a 	mla	r3, r9, sl, r3
 8011e58:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011e5c:	42bd      	cmp	r5, r7
 8011e5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e62:	d8e5      	bhi.n	8011e30 <__multiply+0xfc>
 8011e64:	9a01      	ldr	r2, [sp, #4]
 8011e66:	50a3      	str	r3, [r4, r2]
 8011e68:	3404      	adds	r4, #4
 8011e6a:	e79f      	b.n	8011dac <__multiply+0x78>
 8011e6c:	3e01      	subs	r6, #1
 8011e6e:	e7a1      	b.n	8011db4 <__multiply+0x80>
 8011e70:	0802698c 	.word	0x0802698c
 8011e74:	0802699d 	.word	0x0802699d

08011e78 <__pow5mult>:
 8011e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e7c:	4615      	mov	r5, r2
 8011e7e:	f012 0203 	ands.w	r2, r2, #3
 8011e82:	4607      	mov	r7, r0
 8011e84:	460e      	mov	r6, r1
 8011e86:	d007      	beq.n	8011e98 <__pow5mult+0x20>
 8011e88:	4c25      	ldr	r4, [pc, #148]	@ (8011f20 <__pow5mult+0xa8>)
 8011e8a:	3a01      	subs	r2, #1
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011e92:	f7ff fea7 	bl	8011be4 <__multadd>
 8011e96:	4606      	mov	r6, r0
 8011e98:	10ad      	asrs	r5, r5, #2
 8011e9a:	d03d      	beq.n	8011f18 <__pow5mult+0xa0>
 8011e9c:	69fc      	ldr	r4, [r7, #28]
 8011e9e:	b97c      	cbnz	r4, 8011ec0 <__pow5mult+0x48>
 8011ea0:	2010      	movs	r0, #16
 8011ea2:	f7fe f879 	bl	800ff98 <malloc>
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	61f8      	str	r0, [r7, #28]
 8011eaa:	b928      	cbnz	r0, 8011eb8 <__pow5mult+0x40>
 8011eac:	4b1d      	ldr	r3, [pc, #116]	@ (8011f24 <__pow5mult+0xac>)
 8011eae:	481e      	ldr	r0, [pc, #120]	@ (8011f28 <__pow5mult+0xb0>)
 8011eb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011eb4:	f000 fc20 	bl	80126f8 <__assert_func>
 8011eb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ebc:	6004      	str	r4, [r0, #0]
 8011ebe:	60c4      	str	r4, [r0, #12]
 8011ec0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011ec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ec8:	b94c      	cbnz	r4, 8011ede <__pow5mult+0x66>
 8011eca:	f240 2171 	movw	r1, #625	@ 0x271
 8011ece:	4638      	mov	r0, r7
 8011ed0:	f7ff ff1a 	bl	8011d08 <__i2b>
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	f8c8 0008 	str.w	r0, [r8, #8]
 8011eda:	4604      	mov	r4, r0
 8011edc:	6003      	str	r3, [r0, #0]
 8011ede:	f04f 0900 	mov.w	r9, #0
 8011ee2:	07eb      	lsls	r3, r5, #31
 8011ee4:	d50a      	bpl.n	8011efc <__pow5mult+0x84>
 8011ee6:	4631      	mov	r1, r6
 8011ee8:	4622      	mov	r2, r4
 8011eea:	4638      	mov	r0, r7
 8011eec:	f7ff ff22 	bl	8011d34 <__multiply>
 8011ef0:	4631      	mov	r1, r6
 8011ef2:	4680      	mov	r8, r0
 8011ef4:	4638      	mov	r0, r7
 8011ef6:	f7ff fe53 	bl	8011ba0 <_Bfree>
 8011efa:	4646      	mov	r6, r8
 8011efc:	106d      	asrs	r5, r5, #1
 8011efe:	d00b      	beq.n	8011f18 <__pow5mult+0xa0>
 8011f00:	6820      	ldr	r0, [r4, #0]
 8011f02:	b938      	cbnz	r0, 8011f14 <__pow5mult+0x9c>
 8011f04:	4622      	mov	r2, r4
 8011f06:	4621      	mov	r1, r4
 8011f08:	4638      	mov	r0, r7
 8011f0a:	f7ff ff13 	bl	8011d34 <__multiply>
 8011f0e:	6020      	str	r0, [r4, #0]
 8011f10:	f8c0 9000 	str.w	r9, [r0]
 8011f14:	4604      	mov	r4, r0
 8011f16:	e7e4      	b.n	8011ee2 <__pow5mult+0x6a>
 8011f18:	4630      	mov	r0, r6
 8011f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f1e:	bf00      	nop
 8011f20:	08026a50 	.word	0x08026a50
 8011f24:	0802691d 	.word	0x0802691d
 8011f28:	0802699d 	.word	0x0802699d

08011f2c <__lshift>:
 8011f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f30:	460c      	mov	r4, r1
 8011f32:	6849      	ldr	r1, [r1, #4]
 8011f34:	6923      	ldr	r3, [r4, #16]
 8011f36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f3a:	68a3      	ldr	r3, [r4, #8]
 8011f3c:	4607      	mov	r7, r0
 8011f3e:	4691      	mov	r9, r2
 8011f40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011f44:	f108 0601 	add.w	r6, r8, #1
 8011f48:	42b3      	cmp	r3, r6
 8011f4a:	db0b      	blt.n	8011f64 <__lshift+0x38>
 8011f4c:	4638      	mov	r0, r7
 8011f4e:	f7ff fde7 	bl	8011b20 <_Balloc>
 8011f52:	4605      	mov	r5, r0
 8011f54:	b948      	cbnz	r0, 8011f6a <__lshift+0x3e>
 8011f56:	4602      	mov	r2, r0
 8011f58:	4b28      	ldr	r3, [pc, #160]	@ (8011ffc <__lshift+0xd0>)
 8011f5a:	4829      	ldr	r0, [pc, #164]	@ (8012000 <__lshift+0xd4>)
 8011f5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011f60:	f000 fbca 	bl	80126f8 <__assert_func>
 8011f64:	3101      	adds	r1, #1
 8011f66:	005b      	lsls	r3, r3, #1
 8011f68:	e7ee      	b.n	8011f48 <__lshift+0x1c>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	f100 0114 	add.w	r1, r0, #20
 8011f70:	f100 0210 	add.w	r2, r0, #16
 8011f74:	4618      	mov	r0, r3
 8011f76:	4553      	cmp	r3, sl
 8011f78:	db33      	blt.n	8011fe2 <__lshift+0xb6>
 8011f7a:	6920      	ldr	r0, [r4, #16]
 8011f7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011f80:	f104 0314 	add.w	r3, r4, #20
 8011f84:	f019 091f 	ands.w	r9, r9, #31
 8011f88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011f90:	d02b      	beq.n	8011fea <__lshift+0xbe>
 8011f92:	f1c9 0e20 	rsb	lr, r9, #32
 8011f96:	468a      	mov	sl, r1
 8011f98:	2200      	movs	r2, #0
 8011f9a:	6818      	ldr	r0, [r3, #0]
 8011f9c:	fa00 f009 	lsl.w	r0, r0, r9
 8011fa0:	4310      	orrs	r0, r2
 8011fa2:	f84a 0b04 	str.w	r0, [sl], #4
 8011fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011faa:	459c      	cmp	ip, r3
 8011fac:	fa22 f20e 	lsr.w	r2, r2, lr
 8011fb0:	d8f3      	bhi.n	8011f9a <__lshift+0x6e>
 8011fb2:	ebac 0304 	sub.w	r3, ip, r4
 8011fb6:	3b15      	subs	r3, #21
 8011fb8:	f023 0303 	bic.w	r3, r3, #3
 8011fbc:	3304      	adds	r3, #4
 8011fbe:	f104 0015 	add.w	r0, r4, #21
 8011fc2:	4560      	cmp	r0, ip
 8011fc4:	bf88      	it	hi
 8011fc6:	2304      	movhi	r3, #4
 8011fc8:	50ca      	str	r2, [r1, r3]
 8011fca:	b10a      	cbz	r2, 8011fd0 <__lshift+0xa4>
 8011fcc:	f108 0602 	add.w	r6, r8, #2
 8011fd0:	3e01      	subs	r6, #1
 8011fd2:	4638      	mov	r0, r7
 8011fd4:	612e      	str	r6, [r5, #16]
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	f7ff fde2 	bl	8011ba0 <_Bfree>
 8011fdc:	4628      	mov	r0, r5
 8011fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fe2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	e7c5      	b.n	8011f76 <__lshift+0x4a>
 8011fea:	3904      	subs	r1, #4
 8011fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ff0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011ff4:	459c      	cmp	ip, r3
 8011ff6:	d8f9      	bhi.n	8011fec <__lshift+0xc0>
 8011ff8:	e7ea      	b.n	8011fd0 <__lshift+0xa4>
 8011ffa:	bf00      	nop
 8011ffc:	0802698c 	.word	0x0802698c
 8012000:	0802699d 	.word	0x0802699d

08012004 <__mcmp>:
 8012004:	690a      	ldr	r2, [r1, #16]
 8012006:	4603      	mov	r3, r0
 8012008:	6900      	ldr	r0, [r0, #16]
 801200a:	1a80      	subs	r0, r0, r2
 801200c:	b530      	push	{r4, r5, lr}
 801200e:	d10e      	bne.n	801202e <__mcmp+0x2a>
 8012010:	3314      	adds	r3, #20
 8012012:	3114      	adds	r1, #20
 8012014:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012018:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801201c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012020:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012024:	4295      	cmp	r5, r2
 8012026:	d003      	beq.n	8012030 <__mcmp+0x2c>
 8012028:	d205      	bcs.n	8012036 <__mcmp+0x32>
 801202a:	f04f 30ff 	mov.w	r0, #4294967295
 801202e:	bd30      	pop	{r4, r5, pc}
 8012030:	42a3      	cmp	r3, r4
 8012032:	d3f3      	bcc.n	801201c <__mcmp+0x18>
 8012034:	e7fb      	b.n	801202e <__mcmp+0x2a>
 8012036:	2001      	movs	r0, #1
 8012038:	e7f9      	b.n	801202e <__mcmp+0x2a>
	...

0801203c <__mdiff>:
 801203c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012040:	4689      	mov	r9, r1
 8012042:	4606      	mov	r6, r0
 8012044:	4611      	mov	r1, r2
 8012046:	4648      	mov	r0, r9
 8012048:	4614      	mov	r4, r2
 801204a:	f7ff ffdb 	bl	8012004 <__mcmp>
 801204e:	1e05      	subs	r5, r0, #0
 8012050:	d112      	bne.n	8012078 <__mdiff+0x3c>
 8012052:	4629      	mov	r1, r5
 8012054:	4630      	mov	r0, r6
 8012056:	f7ff fd63 	bl	8011b20 <_Balloc>
 801205a:	4602      	mov	r2, r0
 801205c:	b928      	cbnz	r0, 801206a <__mdiff+0x2e>
 801205e:	4b3f      	ldr	r3, [pc, #252]	@ (801215c <__mdiff+0x120>)
 8012060:	f240 2137 	movw	r1, #567	@ 0x237
 8012064:	483e      	ldr	r0, [pc, #248]	@ (8012160 <__mdiff+0x124>)
 8012066:	f000 fb47 	bl	80126f8 <__assert_func>
 801206a:	2301      	movs	r3, #1
 801206c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012070:	4610      	mov	r0, r2
 8012072:	b003      	add	sp, #12
 8012074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012078:	bfbc      	itt	lt
 801207a:	464b      	movlt	r3, r9
 801207c:	46a1      	movlt	r9, r4
 801207e:	4630      	mov	r0, r6
 8012080:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012084:	bfba      	itte	lt
 8012086:	461c      	movlt	r4, r3
 8012088:	2501      	movlt	r5, #1
 801208a:	2500      	movge	r5, #0
 801208c:	f7ff fd48 	bl	8011b20 <_Balloc>
 8012090:	4602      	mov	r2, r0
 8012092:	b918      	cbnz	r0, 801209c <__mdiff+0x60>
 8012094:	4b31      	ldr	r3, [pc, #196]	@ (801215c <__mdiff+0x120>)
 8012096:	f240 2145 	movw	r1, #581	@ 0x245
 801209a:	e7e3      	b.n	8012064 <__mdiff+0x28>
 801209c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80120a0:	6926      	ldr	r6, [r4, #16]
 80120a2:	60c5      	str	r5, [r0, #12]
 80120a4:	f109 0310 	add.w	r3, r9, #16
 80120a8:	f109 0514 	add.w	r5, r9, #20
 80120ac:	f104 0e14 	add.w	lr, r4, #20
 80120b0:	f100 0b14 	add.w	fp, r0, #20
 80120b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80120b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80120bc:	9301      	str	r3, [sp, #4]
 80120be:	46d9      	mov	r9, fp
 80120c0:	f04f 0c00 	mov.w	ip, #0
 80120c4:	9b01      	ldr	r3, [sp, #4]
 80120c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80120ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80120ce:	9301      	str	r3, [sp, #4]
 80120d0:	fa1f f38a 	uxth.w	r3, sl
 80120d4:	4619      	mov	r1, r3
 80120d6:	b283      	uxth	r3, r0
 80120d8:	1acb      	subs	r3, r1, r3
 80120da:	0c00      	lsrs	r0, r0, #16
 80120dc:	4463      	add	r3, ip
 80120de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80120e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80120ec:	4576      	cmp	r6, lr
 80120ee:	f849 3b04 	str.w	r3, [r9], #4
 80120f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80120f6:	d8e5      	bhi.n	80120c4 <__mdiff+0x88>
 80120f8:	1b33      	subs	r3, r6, r4
 80120fa:	3b15      	subs	r3, #21
 80120fc:	f023 0303 	bic.w	r3, r3, #3
 8012100:	3415      	adds	r4, #21
 8012102:	3304      	adds	r3, #4
 8012104:	42a6      	cmp	r6, r4
 8012106:	bf38      	it	cc
 8012108:	2304      	movcc	r3, #4
 801210a:	441d      	add	r5, r3
 801210c:	445b      	add	r3, fp
 801210e:	461e      	mov	r6, r3
 8012110:	462c      	mov	r4, r5
 8012112:	4544      	cmp	r4, r8
 8012114:	d30e      	bcc.n	8012134 <__mdiff+0xf8>
 8012116:	f108 0103 	add.w	r1, r8, #3
 801211a:	1b49      	subs	r1, r1, r5
 801211c:	f021 0103 	bic.w	r1, r1, #3
 8012120:	3d03      	subs	r5, #3
 8012122:	45a8      	cmp	r8, r5
 8012124:	bf38      	it	cc
 8012126:	2100      	movcc	r1, #0
 8012128:	440b      	add	r3, r1
 801212a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801212e:	b191      	cbz	r1, 8012156 <__mdiff+0x11a>
 8012130:	6117      	str	r7, [r2, #16]
 8012132:	e79d      	b.n	8012070 <__mdiff+0x34>
 8012134:	f854 1b04 	ldr.w	r1, [r4], #4
 8012138:	46e6      	mov	lr, ip
 801213a:	0c08      	lsrs	r0, r1, #16
 801213c:	fa1c fc81 	uxtah	ip, ip, r1
 8012140:	4471      	add	r1, lr
 8012142:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012146:	b289      	uxth	r1, r1
 8012148:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801214c:	f846 1b04 	str.w	r1, [r6], #4
 8012150:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012154:	e7dd      	b.n	8012112 <__mdiff+0xd6>
 8012156:	3f01      	subs	r7, #1
 8012158:	e7e7      	b.n	801212a <__mdiff+0xee>
 801215a:	bf00      	nop
 801215c:	0802698c 	.word	0x0802698c
 8012160:	0802699d 	.word	0x0802699d

08012164 <__d2b>:
 8012164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012168:	460f      	mov	r7, r1
 801216a:	2101      	movs	r1, #1
 801216c:	ec59 8b10 	vmov	r8, r9, d0
 8012170:	4616      	mov	r6, r2
 8012172:	f7ff fcd5 	bl	8011b20 <_Balloc>
 8012176:	4604      	mov	r4, r0
 8012178:	b930      	cbnz	r0, 8012188 <__d2b+0x24>
 801217a:	4602      	mov	r2, r0
 801217c:	4b23      	ldr	r3, [pc, #140]	@ (801220c <__d2b+0xa8>)
 801217e:	4824      	ldr	r0, [pc, #144]	@ (8012210 <__d2b+0xac>)
 8012180:	f240 310f 	movw	r1, #783	@ 0x30f
 8012184:	f000 fab8 	bl	80126f8 <__assert_func>
 8012188:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801218c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012190:	b10d      	cbz	r5, 8012196 <__d2b+0x32>
 8012192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012196:	9301      	str	r3, [sp, #4]
 8012198:	f1b8 0300 	subs.w	r3, r8, #0
 801219c:	d023      	beq.n	80121e6 <__d2b+0x82>
 801219e:	4668      	mov	r0, sp
 80121a0:	9300      	str	r3, [sp, #0]
 80121a2:	f7ff fd84 	bl	8011cae <__lo0bits>
 80121a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80121aa:	b1d0      	cbz	r0, 80121e2 <__d2b+0x7e>
 80121ac:	f1c0 0320 	rsb	r3, r0, #32
 80121b0:	fa02 f303 	lsl.w	r3, r2, r3
 80121b4:	430b      	orrs	r3, r1
 80121b6:	40c2      	lsrs	r2, r0
 80121b8:	6163      	str	r3, [r4, #20]
 80121ba:	9201      	str	r2, [sp, #4]
 80121bc:	9b01      	ldr	r3, [sp, #4]
 80121be:	61a3      	str	r3, [r4, #24]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	bf0c      	ite	eq
 80121c4:	2201      	moveq	r2, #1
 80121c6:	2202      	movne	r2, #2
 80121c8:	6122      	str	r2, [r4, #16]
 80121ca:	b1a5      	cbz	r5, 80121f6 <__d2b+0x92>
 80121cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80121d0:	4405      	add	r5, r0
 80121d2:	603d      	str	r5, [r7, #0]
 80121d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80121d8:	6030      	str	r0, [r6, #0]
 80121da:	4620      	mov	r0, r4
 80121dc:	b003      	add	sp, #12
 80121de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121e2:	6161      	str	r1, [r4, #20]
 80121e4:	e7ea      	b.n	80121bc <__d2b+0x58>
 80121e6:	a801      	add	r0, sp, #4
 80121e8:	f7ff fd61 	bl	8011cae <__lo0bits>
 80121ec:	9b01      	ldr	r3, [sp, #4]
 80121ee:	6163      	str	r3, [r4, #20]
 80121f0:	3020      	adds	r0, #32
 80121f2:	2201      	movs	r2, #1
 80121f4:	e7e8      	b.n	80121c8 <__d2b+0x64>
 80121f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80121fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80121fe:	6038      	str	r0, [r7, #0]
 8012200:	6918      	ldr	r0, [r3, #16]
 8012202:	f7ff fd35 	bl	8011c70 <__hi0bits>
 8012206:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801220a:	e7e5      	b.n	80121d8 <__d2b+0x74>
 801220c:	0802698c 	.word	0x0802698c
 8012210:	0802699d 	.word	0x0802699d

08012214 <__sfputc_r>:
 8012214:	6893      	ldr	r3, [r2, #8]
 8012216:	3b01      	subs	r3, #1
 8012218:	2b00      	cmp	r3, #0
 801221a:	b410      	push	{r4}
 801221c:	6093      	str	r3, [r2, #8]
 801221e:	da08      	bge.n	8012232 <__sfputc_r+0x1e>
 8012220:	6994      	ldr	r4, [r2, #24]
 8012222:	42a3      	cmp	r3, r4
 8012224:	db01      	blt.n	801222a <__sfputc_r+0x16>
 8012226:	290a      	cmp	r1, #10
 8012228:	d103      	bne.n	8012232 <__sfputc_r+0x1e>
 801222a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801222e:	f7fe bd12 	b.w	8010c56 <__swbuf_r>
 8012232:	6813      	ldr	r3, [r2, #0]
 8012234:	1c58      	adds	r0, r3, #1
 8012236:	6010      	str	r0, [r2, #0]
 8012238:	7019      	strb	r1, [r3, #0]
 801223a:	4608      	mov	r0, r1
 801223c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012240:	4770      	bx	lr

08012242 <__sfputs_r>:
 8012242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012244:	4606      	mov	r6, r0
 8012246:	460f      	mov	r7, r1
 8012248:	4614      	mov	r4, r2
 801224a:	18d5      	adds	r5, r2, r3
 801224c:	42ac      	cmp	r4, r5
 801224e:	d101      	bne.n	8012254 <__sfputs_r+0x12>
 8012250:	2000      	movs	r0, #0
 8012252:	e007      	b.n	8012264 <__sfputs_r+0x22>
 8012254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012258:	463a      	mov	r2, r7
 801225a:	4630      	mov	r0, r6
 801225c:	f7ff ffda 	bl	8012214 <__sfputc_r>
 8012260:	1c43      	adds	r3, r0, #1
 8012262:	d1f3      	bne.n	801224c <__sfputs_r+0xa>
 8012264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012268 <_vfiprintf_r>:
 8012268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226c:	460d      	mov	r5, r1
 801226e:	b09d      	sub	sp, #116	@ 0x74
 8012270:	4614      	mov	r4, r2
 8012272:	4698      	mov	r8, r3
 8012274:	4606      	mov	r6, r0
 8012276:	b118      	cbz	r0, 8012280 <_vfiprintf_r+0x18>
 8012278:	6a03      	ldr	r3, [r0, #32]
 801227a:	b90b      	cbnz	r3, 8012280 <_vfiprintf_r+0x18>
 801227c:	f7fe fc02 	bl	8010a84 <__sinit>
 8012280:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012282:	07d9      	lsls	r1, r3, #31
 8012284:	d405      	bmi.n	8012292 <_vfiprintf_r+0x2a>
 8012286:	89ab      	ldrh	r3, [r5, #12]
 8012288:	059a      	lsls	r2, r3, #22
 801228a:	d402      	bmi.n	8012292 <_vfiprintf_r+0x2a>
 801228c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801228e:	f7fe fe04 	bl	8010e9a <__retarget_lock_acquire_recursive>
 8012292:	89ab      	ldrh	r3, [r5, #12]
 8012294:	071b      	lsls	r3, r3, #28
 8012296:	d501      	bpl.n	801229c <_vfiprintf_r+0x34>
 8012298:	692b      	ldr	r3, [r5, #16]
 801229a:	b99b      	cbnz	r3, 80122c4 <_vfiprintf_r+0x5c>
 801229c:	4629      	mov	r1, r5
 801229e:	4630      	mov	r0, r6
 80122a0:	f7fe fd18 	bl	8010cd4 <__swsetup_r>
 80122a4:	b170      	cbz	r0, 80122c4 <_vfiprintf_r+0x5c>
 80122a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80122a8:	07dc      	lsls	r4, r3, #31
 80122aa:	d504      	bpl.n	80122b6 <_vfiprintf_r+0x4e>
 80122ac:	f04f 30ff 	mov.w	r0, #4294967295
 80122b0:	b01d      	add	sp, #116	@ 0x74
 80122b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b6:	89ab      	ldrh	r3, [r5, #12]
 80122b8:	0598      	lsls	r0, r3, #22
 80122ba:	d4f7      	bmi.n	80122ac <_vfiprintf_r+0x44>
 80122bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80122be:	f7fe fded 	bl	8010e9c <__retarget_lock_release_recursive>
 80122c2:	e7f3      	b.n	80122ac <_vfiprintf_r+0x44>
 80122c4:	2300      	movs	r3, #0
 80122c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80122c8:	2320      	movs	r3, #32
 80122ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80122ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80122d2:	2330      	movs	r3, #48	@ 0x30
 80122d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012484 <_vfiprintf_r+0x21c>
 80122d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80122dc:	f04f 0901 	mov.w	r9, #1
 80122e0:	4623      	mov	r3, r4
 80122e2:	469a      	mov	sl, r3
 80122e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122e8:	b10a      	cbz	r2, 80122ee <_vfiprintf_r+0x86>
 80122ea:	2a25      	cmp	r2, #37	@ 0x25
 80122ec:	d1f9      	bne.n	80122e2 <_vfiprintf_r+0x7a>
 80122ee:	ebba 0b04 	subs.w	fp, sl, r4
 80122f2:	d00b      	beq.n	801230c <_vfiprintf_r+0xa4>
 80122f4:	465b      	mov	r3, fp
 80122f6:	4622      	mov	r2, r4
 80122f8:	4629      	mov	r1, r5
 80122fa:	4630      	mov	r0, r6
 80122fc:	f7ff ffa1 	bl	8012242 <__sfputs_r>
 8012300:	3001      	adds	r0, #1
 8012302:	f000 80a7 	beq.w	8012454 <_vfiprintf_r+0x1ec>
 8012306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012308:	445a      	add	r2, fp
 801230a:	9209      	str	r2, [sp, #36]	@ 0x24
 801230c:	f89a 3000 	ldrb.w	r3, [sl]
 8012310:	2b00      	cmp	r3, #0
 8012312:	f000 809f 	beq.w	8012454 <_vfiprintf_r+0x1ec>
 8012316:	2300      	movs	r3, #0
 8012318:	f04f 32ff 	mov.w	r2, #4294967295
 801231c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012320:	f10a 0a01 	add.w	sl, sl, #1
 8012324:	9304      	str	r3, [sp, #16]
 8012326:	9307      	str	r3, [sp, #28]
 8012328:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801232c:	931a      	str	r3, [sp, #104]	@ 0x68
 801232e:	4654      	mov	r4, sl
 8012330:	2205      	movs	r2, #5
 8012332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012336:	4853      	ldr	r0, [pc, #332]	@ (8012484 <_vfiprintf_r+0x21c>)
 8012338:	f7ed ffe2 	bl	8000300 <memchr>
 801233c:	9a04      	ldr	r2, [sp, #16]
 801233e:	b9d8      	cbnz	r0, 8012378 <_vfiprintf_r+0x110>
 8012340:	06d1      	lsls	r1, r2, #27
 8012342:	bf44      	itt	mi
 8012344:	2320      	movmi	r3, #32
 8012346:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801234a:	0713      	lsls	r3, r2, #28
 801234c:	bf44      	itt	mi
 801234e:	232b      	movmi	r3, #43	@ 0x2b
 8012350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012354:	f89a 3000 	ldrb.w	r3, [sl]
 8012358:	2b2a      	cmp	r3, #42	@ 0x2a
 801235a:	d015      	beq.n	8012388 <_vfiprintf_r+0x120>
 801235c:	9a07      	ldr	r2, [sp, #28]
 801235e:	4654      	mov	r4, sl
 8012360:	2000      	movs	r0, #0
 8012362:	f04f 0c0a 	mov.w	ip, #10
 8012366:	4621      	mov	r1, r4
 8012368:	f811 3b01 	ldrb.w	r3, [r1], #1
 801236c:	3b30      	subs	r3, #48	@ 0x30
 801236e:	2b09      	cmp	r3, #9
 8012370:	d94b      	bls.n	801240a <_vfiprintf_r+0x1a2>
 8012372:	b1b0      	cbz	r0, 80123a2 <_vfiprintf_r+0x13a>
 8012374:	9207      	str	r2, [sp, #28]
 8012376:	e014      	b.n	80123a2 <_vfiprintf_r+0x13a>
 8012378:	eba0 0308 	sub.w	r3, r0, r8
 801237c:	fa09 f303 	lsl.w	r3, r9, r3
 8012380:	4313      	orrs	r3, r2
 8012382:	9304      	str	r3, [sp, #16]
 8012384:	46a2      	mov	sl, r4
 8012386:	e7d2      	b.n	801232e <_vfiprintf_r+0xc6>
 8012388:	9b03      	ldr	r3, [sp, #12]
 801238a:	1d19      	adds	r1, r3, #4
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	9103      	str	r1, [sp, #12]
 8012390:	2b00      	cmp	r3, #0
 8012392:	bfbb      	ittet	lt
 8012394:	425b      	neglt	r3, r3
 8012396:	f042 0202 	orrlt.w	r2, r2, #2
 801239a:	9307      	strge	r3, [sp, #28]
 801239c:	9307      	strlt	r3, [sp, #28]
 801239e:	bfb8      	it	lt
 80123a0:	9204      	strlt	r2, [sp, #16]
 80123a2:	7823      	ldrb	r3, [r4, #0]
 80123a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80123a6:	d10a      	bne.n	80123be <_vfiprintf_r+0x156>
 80123a8:	7863      	ldrb	r3, [r4, #1]
 80123aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80123ac:	d132      	bne.n	8012414 <_vfiprintf_r+0x1ac>
 80123ae:	9b03      	ldr	r3, [sp, #12]
 80123b0:	1d1a      	adds	r2, r3, #4
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	9203      	str	r2, [sp, #12]
 80123b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80123ba:	3402      	adds	r4, #2
 80123bc:	9305      	str	r3, [sp, #20]
 80123be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012494 <_vfiprintf_r+0x22c>
 80123c2:	7821      	ldrb	r1, [r4, #0]
 80123c4:	2203      	movs	r2, #3
 80123c6:	4650      	mov	r0, sl
 80123c8:	f7ed ff9a 	bl	8000300 <memchr>
 80123cc:	b138      	cbz	r0, 80123de <_vfiprintf_r+0x176>
 80123ce:	9b04      	ldr	r3, [sp, #16]
 80123d0:	eba0 000a 	sub.w	r0, r0, sl
 80123d4:	2240      	movs	r2, #64	@ 0x40
 80123d6:	4082      	lsls	r2, r0
 80123d8:	4313      	orrs	r3, r2
 80123da:	3401      	adds	r4, #1
 80123dc:	9304      	str	r3, [sp, #16]
 80123de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123e2:	4829      	ldr	r0, [pc, #164]	@ (8012488 <_vfiprintf_r+0x220>)
 80123e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80123e8:	2206      	movs	r2, #6
 80123ea:	f7ed ff89 	bl	8000300 <memchr>
 80123ee:	2800      	cmp	r0, #0
 80123f0:	d03f      	beq.n	8012472 <_vfiprintf_r+0x20a>
 80123f2:	4b26      	ldr	r3, [pc, #152]	@ (801248c <_vfiprintf_r+0x224>)
 80123f4:	bb1b      	cbnz	r3, 801243e <_vfiprintf_r+0x1d6>
 80123f6:	9b03      	ldr	r3, [sp, #12]
 80123f8:	3307      	adds	r3, #7
 80123fa:	f023 0307 	bic.w	r3, r3, #7
 80123fe:	3308      	adds	r3, #8
 8012400:	9303      	str	r3, [sp, #12]
 8012402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012404:	443b      	add	r3, r7
 8012406:	9309      	str	r3, [sp, #36]	@ 0x24
 8012408:	e76a      	b.n	80122e0 <_vfiprintf_r+0x78>
 801240a:	fb0c 3202 	mla	r2, ip, r2, r3
 801240e:	460c      	mov	r4, r1
 8012410:	2001      	movs	r0, #1
 8012412:	e7a8      	b.n	8012366 <_vfiprintf_r+0xfe>
 8012414:	2300      	movs	r3, #0
 8012416:	3401      	adds	r4, #1
 8012418:	9305      	str	r3, [sp, #20]
 801241a:	4619      	mov	r1, r3
 801241c:	f04f 0c0a 	mov.w	ip, #10
 8012420:	4620      	mov	r0, r4
 8012422:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012426:	3a30      	subs	r2, #48	@ 0x30
 8012428:	2a09      	cmp	r2, #9
 801242a:	d903      	bls.n	8012434 <_vfiprintf_r+0x1cc>
 801242c:	2b00      	cmp	r3, #0
 801242e:	d0c6      	beq.n	80123be <_vfiprintf_r+0x156>
 8012430:	9105      	str	r1, [sp, #20]
 8012432:	e7c4      	b.n	80123be <_vfiprintf_r+0x156>
 8012434:	fb0c 2101 	mla	r1, ip, r1, r2
 8012438:	4604      	mov	r4, r0
 801243a:	2301      	movs	r3, #1
 801243c:	e7f0      	b.n	8012420 <_vfiprintf_r+0x1b8>
 801243e:	ab03      	add	r3, sp, #12
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	462a      	mov	r2, r5
 8012444:	4b12      	ldr	r3, [pc, #72]	@ (8012490 <_vfiprintf_r+0x228>)
 8012446:	a904      	add	r1, sp, #16
 8012448:	4630      	mov	r0, r6
 801244a:	f7fd fee9 	bl	8010220 <_printf_float>
 801244e:	4607      	mov	r7, r0
 8012450:	1c78      	adds	r0, r7, #1
 8012452:	d1d6      	bne.n	8012402 <_vfiprintf_r+0x19a>
 8012454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012456:	07d9      	lsls	r1, r3, #31
 8012458:	d405      	bmi.n	8012466 <_vfiprintf_r+0x1fe>
 801245a:	89ab      	ldrh	r3, [r5, #12]
 801245c:	059a      	lsls	r2, r3, #22
 801245e:	d402      	bmi.n	8012466 <_vfiprintf_r+0x1fe>
 8012460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012462:	f7fe fd1b 	bl	8010e9c <__retarget_lock_release_recursive>
 8012466:	89ab      	ldrh	r3, [r5, #12]
 8012468:	065b      	lsls	r3, r3, #25
 801246a:	f53f af1f 	bmi.w	80122ac <_vfiprintf_r+0x44>
 801246e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012470:	e71e      	b.n	80122b0 <_vfiprintf_r+0x48>
 8012472:	ab03      	add	r3, sp, #12
 8012474:	9300      	str	r3, [sp, #0]
 8012476:	462a      	mov	r2, r5
 8012478:	4b05      	ldr	r3, [pc, #20]	@ (8012490 <_vfiprintf_r+0x228>)
 801247a:	a904      	add	r1, sp, #16
 801247c:	4630      	mov	r0, r6
 801247e:	f7fe f957 	bl	8010730 <_printf_i>
 8012482:	e7e4      	b.n	801244e <_vfiprintf_r+0x1e6>
 8012484:	080269f6 	.word	0x080269f6
 8012488:	08026a00 	.word	0x08026a00
 801248c:	08010221 	.word	0x08010221
 8012490:	08012243 	.word	0x08012243
 8012494:	080269fc 	.word	0x080269fc

08012498 <__sflush_r>:
 8012498:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801249c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124a0:	0716      	lsls	r6, r2, #28
 80124a2:	4605      	mov	r5, r0
 80124a4:	460c      	mov	r4, r1
 80124a6:	d454      	bmi.n	8012552 <__sflush_r+0xba>
 80124a8:	684b      	ldr	r3, [r1, #4]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	dc02      	bgt.n	80124b4 <__sflush_r+0x1c>
 80124ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	dd48      	ble.n	8012546 <__sflush_r+0xae>
 80124b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80124b6:	2e00      	cmp	r6, #0
 80124b8:	d045      	beq.n	8012546 <__sflush_r+0xae>
 80124ba:	2300      	movs	r3, #0
 80124bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80124c0:	682f      	ldr	r7, [r5, #0]
 80124c2:	6a21      	ldr	r1, [r4, #32]
 80124c4:	602b      	str	r3, [r5, #0]
 80124c6:	d030      	beq.n	801252a <__sflush_r+0x92>
 80124c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80124ca:	89a3      	ldrh	r3, [r4, #12]
 80124cc:	0759      	lsls	r1, r3, #29
 80124ce:	d505      	bpl.n	80124dc <__sflush_r+0x44>
 80124d0:	6863      	ldr	r3, [r4, #4]
 80124d2:	1ad2      	subs	r2, r2, r3
 80124d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80124d6:	b10b      	cbz	r3, 80124dc <__sflush_r+0x44>
 80124d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80124da:	1ad2      	subs	r2, r2, r3
 80124dc:	2300      	movs	r3, #0
 80124de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80124e0:	6a21      	ldr	r1, [r4, #32]
 80124e2:	4628      	mov	r0, r5
 80124e4:	47b0      	blx	r6
 80124e6:	1c43      	adds	r3, r0, #1
 80124e8:	89a3      	ldrh	r3, [r4, #12]
 80124ea:	d106      	bne.n	80124fa <__sflush_r+0x62>
 80124ec:	6829      	ldr	r1, [r5, #0]
 80124ee:	291d      	cmp	r1, #29
 80124f0:	d82b      	bhi.n	801254a <__sflush_r+0xb2>
 80124f2:	4a2a      	ldr	r2, [pc, #168]	@ (801259c <__sflush_r+0x104>)
 80124f4:	40ca      	lsrs	r2, r1
 80124f6:	07d6      	lsls	r6, r2, #31
 80124f8:	d527      	bpl.n	801254a <__sflush_r+0xb2>
 80124fa:	2200      	movs	r2, #0
 80124fc:	6062      	str	r2, [r4, #4]
 80124fe:	04d9      	lsls	r1, r3, #19
 8012500:	6922      	ldr	r2, [r4, #16]
 8012502:	6022      	str	r2, [r4, #0]
 8012504:	d504      	bpl.n	8012510 <__sflush_r+0x78>
 8012506:	1c42      	adds	r2, r0, #1
 8012508:	d101      	bne.n	801250e <__sflush_r+0x76>
 801250a:	682b      	ldr	r3, [r5, #0]
 801250c:	b903      	cbnz	r3, 8012510 <__sflush_r+0x78>
 801250e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012512:	602f      	str	r7, [r5, #0]
 8012514:	b1b9      	cbz	r1, 8012546 <__sflush_r+0xae>
 8012516:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801251a:	4299      	cmp	r1, r3
 801251c:	d002      	beq.n	8012524 <__sflush_r+0x8c>
 801251e:	4628      	mov	r0, r5
 8012520:	f7ff fab4 	bl	8011a8c <_free_r>
 8012524:	2300      	movs	r3, #0
 8012526:	6363      	str	r3, [r4, #52]	@ 0x34
 8012528:	e00d      	b.n	8012546 <__sflush_r+0xae>
 801252a:	2301      	movs	r3, #1
 801252c:	4628      	mov	r0, r5
 801252e:	47b0      	blx	r6
 8012530:	4602      	mov	r2, r0
 8012532:	1c50      	adds	r0, r2, #1
 8012534:	d1c9      	bne.n	80124ca <__sflush_r+0x32>
 8012536:	682b      	ldr	r3, [r5, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d0c6      	beq.n	80124ca <__sflush_r+0x32>
 801253c:	2b1d      	cmp	r3, #29
 801253e:	d001      	beq.n	8012544 <__sflush_r+0xac>
 8012540:	2b16      	cmp	r3, #22
 8012542:	d11e      	bne.n	8012582 <__sflush_r+0xea>
 8012544:	602f      	str	r7, [r5, #0]
 8012546:	2000      	movs	r0, #0
 8012548:	e022      	b.n	8012590 <__sflush_r+0xf8>
 801254a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801254e:	b21b      	sxth	r3, r3
 8012550:	e01b      	b.n	801258a <__sflush_r+0xf2>
 8012552:	690f      	ldr	r7, [r1, #16]
 8012554:	2f00      	cmp	r7, #0
 8012556:	d0f6      	beq.n	8012546 <__sflush_r+0xae>
 8012558:	0793      	lsls	r3, r2, #30
 801255a:	680e      	ldr	r6, [r1, #0]
 801255c:	bf08      	it	eq
 801255e:	694b      	ldreq	r3, [r1, #20]
 8012560:	600f      	str	r7, [r1, #0]
 8012562:	bf18      	it	ne
 8012564:	2300      	movne	r3, #0
 8012566:	eba6 0807 	sub.w	r8, r6, r7
 801256a:	608b      	str	r3, [r1, #8]
 801256c:	f1b8 0f00 	cmp.w	r8, #0
 8012570:	dde9      	ble.n	8012546 <__sflush_r+0xae>
 8012572:	6a21      	ldr	r1, [r4, #32]
 8012574:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012576:	4643      	mov	r3, r8
 8012578:	463a      	mov	r2, r7
 801257a:	4628      	mov	r0, r5
 801257c:	47b0      	blx	r6
 801257e:	2800      	cmp	r0, #0
 8012580:	dc08      	bgt.n	8012594 <__sflush_r+0xfc>
 8012582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801258a:	81a3      	strh	r3, [r4, #12]
 801258c:	f04f 30ff 	mov.w	r0, #4294967295
 8012590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012594:	4407      	add	r7, r0
 8012596:	eba8 0800 	sub.w	r8, r8, r0
 801259a:	e7e7      	b.n	801256c <__sflush_r+0xd4>
 801259c:	20400001 	.word	0x20400001

080125a0 <_fflush_r>:
 80125a0:	b538      	push	{r3, r4, r5, lr}
 80125a2:	690b      	ldr	r3, [r1, #16]
 80125a4:	4605      	mov	r5, r0
 80125a6:	460c      	mov	r4, r1
 80125a8:	b913      	cbnz	r3, 80125b0 <_fflush_r+0x10>
 80125aa:	2500      	movs	r5, #0
 80125ac:	4628      	mov	r0, r5
 80125ae:	bd38      	pop	{r3, r4, r5, pc}
 80125b0:	b118      	cbz	r0, 80125ba <_fflush_r+0x1a>
 80125b2:	6a03      	ldr	r3, [r0, #32]
 80125b4:	b90b      	cbnz	r3, 80125ba <_fflush_r+0x1a>
 80125b6:	f7fe fa65 	bl	8010a84 <__sinit>
 80125ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d0f3      	beq.n	80125aa <_fflush_r+0xa>
 80125c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80125c4:	07d0      	lsls	r0, r2, #31
 80125c6:	d404      	bmi.n	80125d2 <_fflush_r+0x32>
 80125c8:	0599      	lsls	r1, r3, #22
 80125ca:	d402      	bmi.n	80125d2 <_fflush_r+0x32>
 80125cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125ce:	f7fe fc64 	bl	8010e9a <__retarget_lock_acquire_recursive>
 80125d2:	4628      	mov	r0, r5
 80125d4:	4621      	mov	r1, r4
 80125d6:	f7ff ff5f 	bl	8012498 <__sflush_r>
 80125da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80125dc:	07da      	lsls	r2, r3, #31
 80125de:	4605      	mov	r5, r0
 80125e0:	d4e4      	bmi.n	80125ac <_fflush_r+0xc>
 80125e2:	89a3      	ldrh	r3, [r4, #12]
 80125e4:	059b      	lsls	r3, r3, #22
 80125e6:	d4e1      	bmi.n	80125ac <_fflush_r+0xc>
 80125e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125ea:	f7fe fc57 	bl	8010e9c <__retarget_lock_release_recursive>
 80125ee:	e7dd      	b.n	80125ac <_fflush_r+0xc>

080125f0 <__swhatbuf_r>:
 80125f0:	b570      	push	{r4, r5, r6, lr}
 80125f2:	460c      	mov	r4, r1
 80125f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125f8:	2900      	cmp	r1, #0
 80125fa:	b096      	sub	sp, #88	@ 0x58
 80125fc:	4615      	mov	r5, r2
 80125fe:	461e      	mov	r6, r3
 8012600:	da0d      	bge.n	801261e <__swhatbuf_r+0x2e>
 8012602:	89a3      	ldrh	r3, [r4, #12]
 8012604:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012608:	f04f 0100 	mov.w	r1, #0
 801260c:	bf14      	ite	ne
 801260e:	2340      	movne	r3, #64	@ 0x40
 8012610:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012614:	2000      	movs	r0, #0
 8012616:	6031      	str	r1, [r6, #0]
 8012618:	602b      	str	r3, [r5, #0]
 801261a:	b016      	add	sp, #88	@ 0x58
 801261c:	bd70      	pop	{r4, r5, r6, pc}
 801261e:	466a      	mov	r2, sp
 8012620:	f000 f848 	bl	80126b4 <_fstat_r>
 8012624:	2800      	cmp	r0, #0
 8012626:	dbec      	blt.n	8012602 <__swhatbuf_r+0x12>
 8012628:	9901      	ldr	r1, [sp, #4]
 801262a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801262e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012632:	4259      	negs	r1, r3
 8012634:	4159      	adcs	r1, r3
 8012636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801263a:	e7eb      	b.n	8012614 <__swhatbuf_r+0x24>

0801263c <__smakebuf_r>:
 801263c:	898b      	ldrh	r3, [r1, #12]
 801263e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012640:	079d      	lsls	r5, r3, #30
 8012642:	4606      	mov	r6, r0
 8012644:	460c      	mov	r4, r1
 8012646:	d507      	bpl.n	8012658 <__smakebuf_r+0x1c>
 8012648:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801264c:	6023      	str	r3, [r4, #0]
 801264e:	6123      	str	r3, [r4, #16]
 8012650:	2301      	movs	r3, #1
 8012652:	6163      	str	r3, [r4, #20]
 8012654:	b003      	add	sp, #12
 8012656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012658:	ab01      	add	r3, sp, #4
 801265a:	466a      	mov	r2, sp
 801265c:	f7ff ffc8 	bl	80125f0 <__swhatbuf_r>
 8012660:	9f00      	ldr	r7, [sp, #0]
 8012662:	4605      	mov	r5, r0
 8012664:	4639      	mov	r1, r7
 8012666:	4630      	mov	r0, r6
 8012668:	f7fd fcc0 	bl	800ffec <_malloc_r>
 801266c:	b948      	cbnz	r0, 8012682 <__smakebuf_r+0x46>
 801266e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012672:	059a      	lsls	r2, r3, #22
 8012674:	d4ee      	bmi.n	8012654 <__smakebuf_r+0x18>
 8012676:	f023 0303 	bic.w	r3, r3, #3
 801267a:	f043 0302 	orr.w	r3, r3, #2
 801267e:	81a3      	strh	r3, [r4, #12]
 8012680:	e7e2      	b.n	8012648 <__smakebuf_r+0xc>
 8012682:	89a3      	ldrh	r3, [r4, #12]
 8012684:	6020      	str	r0, [r4, #0]
 8012686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801268a:	81a3      	strh	r3, [r4, #12]
 801268c:	9b01      	ldr	r3, [sp, #4]
 801268e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012692:	b15b      	cbz	r3, 80126ac <__smakebuf_r+0x70>
 8012694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012698:	4630      	mov	r0, r6
 801269a:	f000 f81d 	bl	80126d8 <_isatty_r>
 801269e:	b128      	cbz	r0, 80126ac <__smakebuf_r+0x70>
 80126a0:	89a3      	ldrh	r3, [r4, #12]
 80126a2:	f023 0303 	bic.w	r3, r3, #3
 80126a6:	f043 0301 	orr.w	r3, r3, #1
 80126aa:	81a3      	strh	r3, [r4, #12]
 80126ac:	89a3      	ldrh	r3, [r4, #12]
 80126ae:	431d      	orrs	r5, r3
 80126b0:	81a5      	strh	r5, [r4, #12]
 80126b2:	e7cf      	b.n	8012654 <__smakebuf_r+0x18>

080126b4 <_fstat_r>:
 80126b4:	b538      	push	{r3, r4, r5, lr}
 80126b6:	4d07      	ldr	r5, [pc, #28]	@ (80126d4 <_fstat_r+0x20>)
 80126b8:	2300      	movs	r3, #0
 80126ba:	4604      	mov	r4, r0
 80126bc:	4608      	mov	r0, r1
 80126be:	4611      	mov	r1, r2
 80126c0:	602b      	str	r3, [r5, #0]
 80126c2:	f7f0 fec9 	bl	8003458 <_fstat>
 80126c6:	1c43      	adds	r3, r0, #1
 80126c8:	d102      	bne.n	80126d0 <_fstat_r+0x1c>
 80126ca:	682b      	ldr	r3, [r5, #0]
 80126cc:	b103      	cbz	r3, 80126d0 <_fstat_r+0x1c>
 80126ce:	6023      	str	r3, [r4, #0]
 80126d0:	bd38      	pop	{r3, r4, r5, pc}
 80126d2:	bf00      	nop
 80126d4:	20009730 	.word	0x20009730

080126d8 <_isatty_r>:
 80126d8:	b538      	push	{r3, r4, r5, lr}
 80126da:	4d06      	ldr	r5, [pc, #24]	@ (80126f4 <_isatty_r+0x1c>)
 80126dc:	2300      	movs	r3, #0
 80126de:	4604      	mov	r4, r0
 80126e0:	4608      	mov	r0, r1
 80126e2:	602b      	str	r3, [r5, #0]
 80126e4:	f7f0 fec8 	bl	8003478 <_isatty>
 80126e8:	1c43      	adds	r3, r0, #1
 80126ea:	d102      	bne.n	80126f2 <_isatty_r+0x1a>
 80126ec:	682b      	ldr	r3, [r5, #0]
 80126ee:	b103      	cbz	r3, 80126f2 <_isatty_r+0x1a>
 80126f0:	6023      	str	r3, [r4, #0]
 80126f2:	bd38      	pop	{r3, r4, r5, pc}
 80126f4:	20009730 	.word	0x20009730

080126f8 <__assert_func>:
 80126f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80126fa:	4614      	mov	r4, r2
 80126fc:	461a      	mov	r2, r3
 80126fe:	4b09      	ldr	r3, [pc, #36]	@ (8012724 <__assert_func+0x2c>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	4605      	mov	r5, r0
 8012704:	68d8      	ldr	r0, [r3, #12]
 8012706:	b14c      	cbz	r4, 801271c <__assert_func+0x24>
 8012708:	4b07      	ldr	r3, [pc, #28]	@ (8012728 <__assert_func+0x30>)
 801270a:	9100      	str	r1, [sp, #0]
 801270c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012710:	4906      	ldr	r1, [pc, #24]	@ (801272c <__assert_func+0x34>)
 8012712:	462b      	mov	r3, r5
 8012714:	f000 f842 	bl	801279c <fiprintf>
 8012718:	f000 f852 	bl	80127c0 <abort>
 801271c:	4b04      	ldr	r3, [pc, #16]	@ (8012730 <__assert_func+0x38>)
 801271e:	461c      	mov	r4, r3
 8012720:	e7f3      	b.n	801270a <__assert_func+0x12>
 8012722:	bf00      	nop
 8012724:	2000001c 	.word	0x2000001c
 8012728:	08026a11 	.word	0x08026a11
 801272c:	08026a1e 	.word	0x08026a1e
 8012730:	08026a4c 	.word	0x08026a4c

08012734 <_calloc_r>:
 8012734:	b570      	push	{r4, r5, r6, lr}
 8012736:	fba1 5402 	umull	r5, r4, r1, r2
 801273a:	b934      	cbnz	r4, 801274a <_calloc_r+0x16>
 801273c:	4629      	mov	r1, r5
 801273e:	f7fd fc55 	bl	800ffec <_malloc_r>
 8012742:	4606      	mov	r6, r0
 8012744:	b928      	cbnz	r0, 8012752 <_calloc_r+0x1e>
 8012746:	4630      	mov	r0, r6
 8012748:	bd70      	pop	{r4, r5, r6, pc}
 801274a:	220c      	movs	r2, #12
 801274c:	6002      	str	r2, [r0, #0]
 801274e:	2600      	movs	r6, #0
 8012750:	e7f9      	b.n	8012746 <_calloc_r+0x12>
 8012752:	462a      	mov	r2, r5
 8012754:	4621      	mov	r1, r4
 8012756:	f7fe fb13 	bl	8010d80 <memset>
 801275a:	e7f4      	b.n	8012746 <_calloc_r+0x12>

0801275c <__ascii_mbtowc>:
 801275c:	b082      	sub	sp, #8
 801275e:	b901      	cbnz	r1, 8012762 <__ascii_mbtowc+0x6>
 8012760:	a901      	add	r1, sp, #4
 8012762:	b142      	cbz	r2, 8012776 <__ascii_mbtowc+0x1a>
 8012764:	b14b      	cbz	r3, 801277a <__ascii_mbtowc+0x1e>
 8012766:	7813      	ldrb	r3, [r2, #0]
 8012768:	600b      	str	r3, [r1, #0]
 801276a:	7812      	ldrb	r2, [r2, #0]
 801276c:	1e10      	subs	r0, r2, #0
 801276e:	bf18      	it	ne
 8012770:	2001      	movne	r0, #1
 8012772:	b002      	add	sp, #8
 8012774:	4770      	bx	lr
 8012776:	4610      	mov	r0, r2
 8012778:	e7fb      	b.n	8012772 <__ascii_mbtowc+0x16>
 801277a:	f06f 0001 	mvn.w	r0, #1
 801277e:	e7f8      	b.n	8012772 <__ascii_mbtowc+0x16>

08012780 <__ascii_wctomb>:
 8012780:	4603      	mov	r3, r0
 8012782:	4608      	mov	r0, r1
 8012784:	b141      	cbz	r1, 8012798 <__ascii_wctomb+0x18>
 8012786:	2aff      	cmp	r2, #255	@ 0xff
 8012788:	d904      	bls.n	8012794 <__ascii_wctomb+0x14>
 801278a:	228a      	movs	r2, #138	@ 0x8a
 801278c:	601a      	str	r2, [r3, #0]
 801278e:	f04f 30ff 	mov.w	r0, #4294967295
 8012792:	4770      	bx	lr
 8012794:	700a      	strb	r2, [r1, #0]
 8012796:	2001      	movs	r0, #1
 8012798:	4770      	bx	lr
	...

0801279c <fiprintf>:
 801279c:	b40e      	push	{r1, r2, r3}
 801279e:	b503      	push	{r0, r1, lr}
 80127a0:	4601      	mov	r1, r0
 80127a2:	ab03      	add	r3, sp, #12
 80127a4:	4805      	ldr	r0, [pc, #20]	@ (80127bc <fiprintf+0x20>)
 80127a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80127aa:	6800      	ldr	r0, [r0, #0]
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	f7ff fd5b 	bl	8012268 <_vfiprintf_r>
 80127b2:	b002      	add	sp, #8
 80127b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80127b8:	b003      	add	sp, #12
 80127ba:	4770      	bx	lr
 80127bc:	2000001c 	.word	0x2000001c

080127c0 <abort>:
 80127c0:	b508      	push	{r3, lr}
 80127c2:	2006      	movs	r0, #6
 80127c4:	f000 f82c 	bl	8012820 <raise>
 80127c8:	2001      	movs	r0, #1
 80127ca:	f7f0 fdf5 	bl	80033b8 <_exit>

080127ce <_raise_r>:
 80127ce:	291f      	cmp	r1, #31
 80127d0:	b538      	push	{r3, r4, r5, lr}
 80127d2:	4605      	mov	r5, r0
 80127d4:	460c      	mov	r4, r1
 80127d6:	d904      	bls.n	80127e2 <_raise_r+0x14>
 80127d8:	2316      	movs	r3, #22
 80127da:	6003      	str	r3, [r0, #0]
 80127dc:	f04f 30ff 	mov.w	r0, #4294967295
 80127e0:	bd38      	pop	{r3, r4, r5, pc}
 80127e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80127e4:	b112      	cbz	r2, 80127ec <_raise_r+0x1e>
 80127e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127ea:	b94b      	cbnz	r3, 8012800 <_raise_r+0x32>
 80127ec:	4628      	mov	r0, r5
 80127ee:	f000 f831 	bl	8012854 <_getpid_r>
 80127f2:	4622      	mov	r2, r4
 80127f4:	4601      	mov	r1, r0
 80127f6:	4628      	mov	r0, r5
 80127f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127fc:	f000 b818 	b.w	8012830 <_kill_r>
 8012800:	2b01      	cmp	r3, #1
 8012802:	d00a      	beq.n	801281a <_raise_r+0x4c>
 8012804:	1c59      	adds	r1, r3, #1
 8012806:	d103      	bne.n	8012810 <_raise_r+0x42>
 8012808:	2316      	movs	r3, #22
 801280a:	6003      	str	r3, [r0, #0]
 801280c:	2001      	movs	r0, #1
 801280e:	e7e7      	b.n	80127e0 <_raise_r+0x12>
 8012810:	2100      	movs	r1, #0
 8012812:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012816:	4620      	mov	r0, r4
 8012818:	4798      	blx	r3
 801281a:	2000      	movs	r0, #0
 801281c:	e7e0      	b.n	80127e0 <_raise_r+0x12>
	...

08012820 <raise>:
 8012820:	4b02      	ldr	r3, [pc, #8]	@ (801282c <raise+0xc>)
 8012822:	4601      	mov	r1, r0
 8012824:	6818      	ldr	r0, [r3, #0]
 8012826:	f7ff bfd2 	b.w	80127ce <_raise_r>
 801282a:	bf00      	nop
 801282c:	2000001c 	.word	0x2000001c

08012830 <_kill_r>:
 8012830:	b538      	push	{r3, r4, r5, lr}
 8012832:	4d07      	ldr	r5, [pc, #28]	@ (8012850 <_kill_r+0x20>)
 8012834:	2300      	movs	r3, #0
 8012836:	4604      	mov	r4, r0
 8012838:	4608      	mov	r0, r1
 801283a:	4611      	mov	r1, r2
 801283c:	602b      	str	r3, [r5, #0]
 801283e:	f7f0 fdab 	bl	8003398 <_kill>
 8012842:	1c43      	adds	r3, r0, #1
 8012844:	d102      	bne.n	801284c <_kill_r+0x1c>
 8012846:	682b      	ldr	r3, [r5, #0]
 8012848:	b103      	cbz	r3, 801284c <_kill_r+0x1c>
 801284a:	6023      	str	r3, [r4, #0]
 801284c:	bd38      	pop	{r3, r4, r5, pc}
 801284e:	bf00      	nop
 8012850:	20009730 	.word	0x20009730

08012854 <_getpid_r>:
 8012854:	f7f0 bd98 	b.w	8003388 <_getpid>

08012858 <sin>:
 8012858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801285a:	eeb0 7b40 	vmov.f64	d7, d0
 801285e:	ee17 3a90 	vmov	r3, s15
 8012862:	4a21      	ldr	r2, [pc, #132]	@ (80128e8 <sin+0x90>)
 8012864:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012868:	4293      	cmp	r3, r2
 801286a:	d807      	bhi.n	801287c <sin+0x24>
 801286c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80128e0 <sin+0x88>
 8012870:	2000      	movs	r0, #0
 8012872:	b005      	add	sp, #20
 8012874:	f85d eb04 	ldr.w	lr, [sp], #4
 8012878:	f000 b8a2 	b.w	80129c0 <__kernel_sin>
 801287c:	4a1b      	ldr	r2, [pc, #108]	@ (80128ec <sin+0x94>)
 801287e:	4293      	cmp	r3, r2
 8012880:	d904      	bls.n	801288c <sin+0x34>
 8012882:	ee30 0b40 	vsub.f64	d0, d0, d0
 8012886:	b005      	add	sp, #20
 8012888:	f85d fb04 	ldr.w	pc, [sp], #4
 801288c:	4668      	mov	r0, sp
 801288e:	f000 f8ef 	bl	8012a70 <__ieee754_rem_pio2>
 8012892:	f000 0003 	and.w	r0, r0, #3
 8012896:	2801      	cmp	r0, #1
 8012898:	d00a      	beq.n	80128b0 <sin+0x58>
 801289a:	2802      	cmp	r0, #2
 801289c:	d00f      	beq.n	80128be <sin+0x66>
 801289e:	b9c0      	cbnz	r0, 80128d2 <sin+0x7a>
 80128a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128a4:	ed9d 0b00 	vldr	d0, [sp]
 80128a8:	2001      	movs	r0, #1
 80128aa:	f000 f889 	bl	80129c0 <__kernel_sin>
 80128ae:	e7ea      	b.n	8012886 <sin+0x2e>
 80128b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128b4:	ed9d 0b00 	vldr	d0, [sp]
 80128b8:	f000 f81a 	bl	80128f0 <__kernel_cos>
 80128bc:	e7e3      	b.n	8012886 <sin+0x2e>
 80128be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128c2:	ed9d 0b00 	vldr	d0, [sp]
 80128c6:	2001      	movs	r0, #1
 80128c8:	f000 f87a 	bl	80129c0 <__kernel_sin>
 80128cc:	eeb1 0b40 	vneg.f64	d0, d0
 80128d0:	e7d9      	b.n	8012886 <sin+0x2e>
 80128d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128d6:	ed9d 0b00 	vldr	d0, [sp]
 80128da:	f000 f809 	bl	80128f0 <__kernel_cos>
 80128de:	e7f5      	b.n	80128cc <sin+0x74>
	...
 80128e8:	3fe921fb 	.word	0x3fe921fb
 80128ec:	7fefffff 	.word	0x7fefffff

080128f0 <__kernel_cos>:
 80128f0:	eeb0 5b40 	vmov.f64	d5, d0
 80128f4:	ee15 1a90 	vmov	r1, s11
 80128f8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80128fc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8012900:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8012904:	d204      	bcs.n	8012910 <__kernel_cos+0x20>
 8012906:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801290a:	ee17 3a90 	vmov	r3, s15
 801290e:	b343      	cbz	r3, 8012962 <__kernel_cos+0x72>
 8012910:	ee25 6b05 	vmul.f64	d6, d5, d5
 8012914:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8012918:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8012988 <__kernel_cos+0x98>
 801291c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012990 <__kernel_cos+0xa0>
 8012920:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012924:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8012998 <__kernel_cos+0xa8>
 8012928:	eea4 7b06 	vfma.f64	d7, d4, d6
 801292c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80129a0 <__kernel_cos+0xb0>
 8012930:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012934:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80129a8 <__kernel_cos+0xb8>
 8012938:	4b1f      	ldr	r3, [pc, #124]	@ (80129b8 <__kernel_cos+0xc8>)
 801293a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801293e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80129b0 <__kernel_cos+0xc0>
 8012942:	4299      	cmp	r1, r3
 8012944:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012948:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801294c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8012950:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012954:	eea6 1b04 	vfma.f64	d1, d6, d4
 8012958:	d804      	bhi.n	8012964 <__kernel_cos+0x74>
 801295a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801295e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012962:	4770      	bx	lr
 8012964:	4b15      	ldr	r3, [pc, #84]	@ (80129bc <__kernel_cos+0xcc>)
 8012966:	4299      	cmp	r1, r3
 8012968:	d809      	bhi.n	801297e <__kernel_cos+0x8e>
 801296a:	2200      	movs	r2, #0
 801296c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8012970:	ec43 2b16 	vmov	d6, r2, r3
 8012974:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012978:	ee37 7b46 	vsub.f64	d7, d7, d6
 801297c:	e7ed      	b.n	801295a <__kernel_cos+0x6a>
 801297e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8012982:	e7f7      	b.n	8012974 <__kernel_cos+0x84>
 8012984:	f3af 8000 	nop.w
 8012988:	be8838d4 	.word	0xbe8838d4
 801298c:	bda8fae9 	.word	0xbda8fae9
 8012990:	bdb4b1c4 	.word	0xbdb4b1c4
 8012994:	3e21ee9e 	.word	0x3e21ee9e
 8012998:	809c52ad 	.word	0x809c52ad
 801299c:	be927e4f 	.word	0xbe927e4f
 80129a0:	19cb1590 	.word	0x19cb1590
 80129a4:	3efa01a0 	.word	0x3efa01a0
 80129a8:	16c15177 	.word	0x16c15177
 80129ac:	bf56c16c 	.word	0xbf56c16c
 80129b0:	5555554c 	.word	0x5555554c
 80129b4:	3fa55555 	.word	0x3fa55555
 80129b8:	3fd33332 	.word	0x3fd33332
 80129bc:	3fe90000 	.word	0x3fe90000

080129c0 <__kernel_sin>:
 80129c0:	ee10 3a90 	vmov	r3, s1
 80129c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80129c8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80129cc:	d204      	bcs.n	80129d8 <__kernel_sin+0x18>
 80129ce:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80129d2:	ee17 3a90 	vmov	r3, s15
 80129d6:	b35b      	cbz	r3, 8012a30 <__kernel_sin+0x70>
 80129d8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80129dc:	ee20 5b06 	vmul.f64	d5, d0, d6
 80129e0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8012a38 <__kernel_sin+0x78>
 80129e4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8012a40 <__kernel_sin+0x80>
 80129e8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80129ec:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012a48 <__kernel_sin+0x88>
 80129f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80129f4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8012a50 <__kernel_sin+0x90>
 80129f8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80129fc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012a58 <__kernel_sin+0x98>
 8012a00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012a04:	b930      	cbnz	r0, 8012a14 <__kernel_sin+0x54>
 8012a06:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8012a60 <__kernel_sin+0xa0>
 8012a0a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012a0e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8012a12:	4770      	bx	lr
 8012a14:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012a18:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8012a1c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012a20:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8012a24:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8012a68 <__kernel_sin+0xa8>
 8012a28:	eea5 1b07 	vfma.f64	d1, d5, d7
 8012a2c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop
 8012a34:	f3af 8000 	nop.w
 8012a38:	5acfd57c 	.word	0x5acfd57c
 8012a3c:	3de5d93a 	.word	0x3de5d93a
 8012a40:	8a2b9ceb 	.word	0x8a2b9ceb
 8012a44:	be5ae5e6 	.word	0xbe5ae5e6
 8012a48:	57b1fe7d 	.word	0x57b1fe7d
 8012a4c:	3ec71de3 	.word	0x3ec71de3
 8012a50:	19c161d5 	.word	0x19c161d5
 8012a54:	bf2a01a0 	.word	0xbf2a01a0
 8012a58:	1110f8a6 	.word	0x1110f8a6
 8012a5c:	3f811111 	.word	0x3f811111
 8012a60:	55555549 	.word	0x55555549
 8012a64:	bfc55555 	.word	0xbfc55555
 8012a68:	55555549 	.word	0x55555549
 8012a6c:	3fc55555 	.word	0x3fc55555

08012a70 <__ieee754_rem_pio2>:
 8012a70:	b570      	push	{r4, r5, r6, lr}
 8012a72:	eeb0 7b40 	vmov.f64	d7, d0
 8012a76:	ee17 5a90 	vmov	r5, s15
 8012a7a:	4b99      	ldr	r3, [pc, #612]	@ (8012ce0 <__ieee754_rem_pio2+0x270>)
 8012a7c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012a80:	429e      	cmp	r6, r3
 8012a82:	b088      	sub	sp, #32
 8012a84:	4604      	mov	r4, r0
 8012a86:	d807      	bhi.n	8012a98 <__ieee754_rem_pio2+0x28>
 8012a88:	2200      	movs	r2, #0
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	ed84 0b00 	vstr	d0, [r4]
 8012a90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012a94:	2000      	movs	r0, #0
 8012a96:	e01b      	b.n	8012ad0 <__ieee754_rem_pio2+0x60>
 8012a98:	4b92      	ldr	r3, [pc, #584]	@ (8012ce4 <__ieee754_rem_pio2+0x274>)
 8012a9a:	429e      	cmp	r6, r3
 8012a9c:	d83b      	bhi.n	8012b16 <__ieee754_rem_pio2+0xa6>
 8012a9e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8012aa2:	2d00      	cmp	r5, #0
 8012aa4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8012ca0 <__ieee754_rem_pio2+0x230>
 8012aa8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8012aac:	dd19      	ble.n	8012ae2 <__ieee754_rem_pio2+0x72>
 8012aae:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012ab2:	429e      	cmp	r6, r3
 8012ab4:	d00e      	beq.n	8012ad4 <__ieee754_rem_pio2+0x64>
 8012ab6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8012ca8 <__ieee754_rem_pio2+0x238>
 8012aba:	ee37 6b45 	vsub.f64	d6, d7, d5
 8012abe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012ac2:	ed84 6b00 	vstr	d6, [r4]
 8012ac6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012aca:	ed84 7b02 	vstr	d7, [r4, #8]
 8012ace:	2001      	movs	r0, #1
 8012ad0:	b008      	add	sp, #32
 8012ad2:	bd70      	pop	{r4, r5, r6, pc}
 8012ad4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8012cb0 <__ieee754_rem_pio2+0x240>
 8012ad8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8012cb8 <__ieee754_rem_pio2+0x248>
 8012adc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012ae0:	e7eb      	b.n	8012aba <__ieee754_rem_pio2+0x4a>
 8012ae2:	429e      	cmp	r6, r3
 8012ae4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012ae8:	d00e      	beq.n	8012b08 <__ieee754_rem_pio2+0x98>
 8012aea:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8012ca8 <__ieee754_rem_pio2+0x238>
 8012aee:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012af2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012af6:	ed84 6b00 	vstr	d6, [r4]
 8012afa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012afe:	f04f 30ff 	mov.w	r0, #4294967295
 8012b02:	ed84 7b02 	vstr	d7, [r4, #8]
 8012b06:	e7e3      	b.n	8012ad0 <__ieee754_rem_pio2+0x60>
 8012b08:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8012cb0 <__ieee754_rem_pio2+0x240>
 8012b0c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8012cb8 <__ieee754_rem_pio2+0x248>
 8012b10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012b14:	e7eb      	b.n	8012aee <__ieee754_rem_pio2+0x7e>
 8012b16:	4b74      	ldr	r3, [pc, #464]	@ (8012ce8 <__ieee754_rem_pio2+0x278>)
 8012b18:	429e      	cmp	r6, r3
 8012b1a:	d870      	bhi.n	8012bfe <__ieee754_rem_pio2+0x18e>
 8012b1c:	f000 f8ec 	bl	8012cf8 <fabs>
 8012b20:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8012b24:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012cc0 <__ieee754_rem_pio2+0x250>
 8012b28:	eea0 7b06 	vfma.f64	d7, d0, d6
 8012b2c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012b30:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012b34:	ee17 0a90 	vmov	r0, s15
 8012b38:	eeb1 4b45 	vneg.f64	d4, d5
 8012b3c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8012ca0 <__ieee754_rem_pio2+0x230>
 8012b40:	eea5 0b47 	vfms.f64	d0, d5, d7
 8012b44:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8012ca8 <__ieee754_rem_pio2+0x238>
 8012b48:	281f      	cmp	r0, #31
 8012b4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8012b4e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012b52:	dc05      	bgt.n	8012b60 <__ieee754_rem_pio2+0xf0>
 8012b54:	4b65      	ldr	r3, [pc, #404]	@ (8012cec <__ieee754_rem_pio2+0x27c>)
 8012b56:	1e42      	subs	r2, r0, #1
 8012b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b5c:	42b3      	cmp	r3, r6
 8012b5e:	d109      	bne.n	8012b74 <__ieee754_rem_pio2+0x104>
 8012b60:	ee16 3a90 	vmov	r3, s13
 8012b64:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8012b68:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8012b6c:	2b10      	cmp	r3, #16
 8012b6e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8012b72:	dc02      	bgt.n	8012b7a <__ieee754_rem_pio2+0x10a>
 8012b74:	ed84 6b00 	vstr	d6, [r4]
 8012b78:	e01a      	b.n	8012bb0 <__ieee754_rem_pio2+0x140>
 8012b7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8012cb0 <__ieee754_rem_pio2+0x240>
 8012b7e:	eeb0 6b40 	vmov.f64	d6, d0
 8012b82:	eea4 6b03 	vfma.f64	d6, d4, d3
 8012b86:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012b8a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8012b8e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8012cb8 <__ieee754_rem_pio2+0x248>
 8012b92:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8012b96:	ee36 3b47 	vsub.f64	d3, d6, d7
 8012b9a:	ee13 3a90 	vmov	r3, s7
 8012b9e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8012ba2:	1ad3      	subs	r3, r2, r3
 8012ba4:	2b31      	cmp	r3, #49	@ 0x31
 8012ba6:	dc17      	bgt.n	8012bd8 <__ieee754_rem_pio2+0x168>
 8012ba8:	eeb0 0b46 	vmov.f64	d0, d6
 8012bac:	ed84 3b00 	vstr	d3, [r4]
 8012bb0:	ed94 6b00 	vldr	d6, [r4]
 8012bb4:	2d00      	cmp	r5, #0
 8012bb6:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012bba:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012bbe:	ed84 0b02 	vstr	d0, [r4, #8]
 8012bc2:	da85      	bge.n	8012ad0 <__ieee754_rem_pio2+0x60>
 8012bc4:	eeb1 6b46 	vneg.f64	d6, d6
 8012bc8:	eeb1 0b40 	vneg.f64	d0, d0
 8012bcc:	ed84 6b00 	vstr	d6, [r4]
 8012bd0:	ed84 0b02 	vstr	d0, [r4, #8]
 8012bd4:	4240      	negs	r0, r0
 8012bd6:	e77b      	b.n	8012ad0 <__ieee754_rem_pio2+0x60>
 8012bd8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8012cc8 <__ieee754_rem_pio2+0x258>
 8012bdc:	eeb0 0b46 	vmov.f64	d0, d6
 8012be0:	eea4 0b07 	vfma.f64	d0, d4, d7
 8012be4:	ee36 6b40 	vsub.f64	d6, d6, d0
 8012be8:	eea4 6b07 	vfma.f64	d6, d4, d7
 8012bec:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8012cd0 <__ieee754_rem_pio2+0x260>
 8012bf0:	eeb0 7b46 	vmov.f64	d7, d6
 8012bf4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8012bf8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012bfc:	e7ba      	b.n	8012b74 <__ieee754_rem_pio2+0x104>
 8012bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8012cf0 <__ieee754_rem_pio2+0x280>)
 8012c00:	429e      	cmp	r6, r3
 8012c02:	d906      	bls.n	8012c12 <__ieee754_rem_pio2+0x1a2>
 8012c04:	ee30 7b40 	vsub.f64	d7, d0, d0
 8012c08:	ed80 7b02 	vstr	d7, [r0, #8]
 8012c0c:	ed80 7b00 	vstr	d7, [r0]
 8012c10:	e740      	b.n	8012a94 <__ieee754_rem_pio2+0x24>
 8012c12:	ee10 3a10 	vmov	r3, s0
 8012c16:	1532      	asrs	r2, r6, #20
 8012c18:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8012c22:	ec41 0b17 	vmov	d7, r0, r1
 8012c26:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012c2a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8012cd8 <__ieee754_rem_pio2+0x268>
 8012c2e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012c32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012c36:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012c3a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012c3e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012c42:	a808      	add	r0, sp, #32
 8012c44:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012c48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012c4c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8012c50:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012c54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012c58:	2103      	movs	r1, #3
 8012c5a:	ed30 7b02 	vldmdb	r0!, {d7}
 8012c5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c66:	460b      	mov	r3, r1
 8012c68:	f101 31ff 	add.w	r1, r1, #4294967295
 8012c6c:	d0f5      	beq.n	8012c5a <__ieee754_rem_pio2+0x1ea>
 8012c6e:	4921      	ldr	r1, [pc, #132]	@ (8012cf4 <__ieee754_rem_pio2+0x284>)
 8012c70:	9101      	str	r1, [sp, #4]
 8012c72:	2102      	movs	r1, #2
 8012c74:	9100      	str	r1, [sp, #0]
 8012c76:	a802      	add	r0, sp, #8
 8012c78:	4621      	mov	r1, r4
 8012c7a:	f000 f845 	bl	8012d08 <__kernel_rem_pio2>
 8012c7e:	2d00      	cmp	r5, #0
 8012c80:	f6bf af26 	bge.w	8012ad0 <__ieee754_rem_pio2+0x60>
 8012c84:	ed94 7b00 	vldr	d7, [r4]
 8012c88:	eeb1 7b47 	vneg.f64	d7, d7
 8012c8c:	ed84 7b00 	vstr	d7, [r4]
 8012c90:	ed94 7b02 	vldr	d7, [r4, #8]
 8012c94:	eeb1 7b47 	vneg.f64	d7, d7
 8012c98:	ed84 7b02 	vstr	d7, [r4, #8]
 8012c9c:	e79a      	b.n	8012bd4 <__ieee754_rem_pio2+0x164>
 8012c9e:	bf00      	nop
 8012ca0:	54400000 	.word	0x54400000
 8012ca4:	3ff921fb 	.word	0x3ff921fb
 8012ca8:	1a626331 	.word	0x1a626331
 8012cac:	3dd0b461 	.word	0x3dd0b461
 8012cb0:	1a600000 	.word	0x1a600000
 8012cb4:	3dd0b461 	.word	0x3dd0b461
 8012cb8:	2e037073 	.word	0x2e037073
 8012cbc:	3ba3198a 	.word	0x3ba3198a
 8012cc0:	6dc9c883 	.word	0x6dc9c883
 8012cc4:	3fe45f30 	.word	0x3fe45f30
 8012cc8:	2e000000 	.word	0x2e000000
 8012ccc:	3ba3198a 	.word	0x3ba3198a
 8012cd0:	252049c1 	.word	0x252049c1
 8012cd4:	397b839a 	.word	0x397b839a
 8012cd8:	00000000 	.word	0x00000000
 8012cdc:	41700000 	.word	0x41700000
 8012ce0:	3fe921fb 	.word	0x3fe921fb
 8012ce4:	4002d97b 	.word	0x4002d97b
 8012ce8:	413921fb 	.word	0x413921fb
 8012cec:	08026c54 	.word	0x08026c54
 8012cf0:	7fefffff 	.word	0x7fefffff
 8012cf4:	08026cd4 	.word	0x08026cd4

08012cf8 <fabs>:
 8012cf8:	ec51 0b10 	vmov	r0, r1, d0
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012d02:	ec43 2b10 	vmov	d0, r2, r3
 8012d06:	4770      	bx	lr

08012d08 <__kernel_rem_pio2>:
 8012d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0c:	ed2d 8b06 	vpush	{d8-d10}
 8012d10:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8012d14:	469b      	mov	fp, r3
 8012d16:	460f      	mov	r7, r1
 8012d18:	4bb9      	ldr	r3, [pc, #740]	@ (8013000 <__kernel_rem_pio2+0x2f8>)
 8012d1a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8012d1c:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
 8012d1e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8012d22:	9001      	str	r0, [sp, #4]
 8012d24:	f112 0f14 	cmn.w	r2, #20
 8012d28:	bfa8      	it	ge
 8012d2a:	1ed3      	subge	r3, r2, #3
 8012d2c:	f10b 3aff 	add.w	sl, fp, #4294967295
 8012d30:	bfb8      	it	lt
 8012d32:	2300      	movlt	r3, #0
 8012d34:	f06f 0517 	mvn.w	r5, #23
 8012d38:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 8012fe8 <__kernel_rem_pio2+0x2e0>
 8012d3c:	bfa4      	itt	ge
 8012d3e:	2018      	movge	r0, #24
 8012d40:	fb93 f3f0 	sdivge	r3, r3, r0
 8012d44:	fb03 5505 	mla	r5, r3, r5, r5
 8012d48:	eba3 040a 	sub.w	r4, r3, sl
 8012d4c:	4415      	add	r5, r2
 8012d4e:	eb09 0c0a 	add.w	ip, r9, sl
 8012d52:	a81a      	add	r0, sp, #104	@ 0x68
 8012d54:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 8012d58:	2200      	movs	r2, #0
 8012d5a:	4562      	cmp	r2, ip
 8012d5c:	dd0e      	ble.n	8012d7c <__kernel_rem_pio2+0x74>
 8012d5e:	aa1a      	add	r2, sp, #104	@ 0x68
 8012d60:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8012d64:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
 8012d68:	2400      	movs	r4, #0
 8012d6a:	454c      	cmp	r4, r9
 8012d6c:	dc23      	bgt.n	8012db6 <__kernel_rem_pio2+0xae>
 8012d6e:	ed9f 7b9e 	vldr	d7, [pc, #632]	@ 8012fe8 <__kernel_rem_pio2+0x2e0>
 8012d72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012d76:	4694      	mov	ip, r2
 8012d78:	2000      	movs	r0, #0
 8012d7a:	e015      	b.n	8012da8 <__kernel_rem_pio2+0xa0>
 8012d7c:	42d4      	cmn	r4, r2
 8012d7e:	d409      	bmi.n	8012d94 <__kernel_rem_pio2+0x8c>
 8012d80:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8012d84:	ee07 1a90 	vmov	s15, r1
 8012d88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012d8c:	eca0 7b02 	vstmia	r0!, {d7}
 8012d90:	3201      	adds	r2, #1
 8012d92:	e7e2      	b.n	8012d5a <__kernel_rem_pio2+0x52>
 8012d94:	eeb0 7b46 	vmov.f64	d7, d6
 8012d98:	e7f8      	b.n	8012d8c <__kernel_rem_pio2+0x84>
 8012d9a:	ecbe 5b02 	vldmia	lr!, {d5}
 8012d9e:	ed3c 6b02 	vldmdb	ip!, {d6}
 8012da2:	3001      	adds	r0, #1
 8012da4:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012da8:	4550      	cmp	r0, sl
 8012daa:	ddf6      	ble.n	8012d9a <__kernel_rem_pio2+0x92>
 8012dac:	eca8 7b02 	vstmia	r8!, {d7}
 8012db0:	3401      	adds	r4, #1
 8012db2:	3208      	adds	r2, #8
 8012db4:	e7d9      	b.n	8012d6a <__kernel_rem_pio2+0x62>
 8012db6:	aa06      	add	r2, sp, #24
 8012db8:	ed9f 9b8d 	vldr	d9, [pc, #564]	@ 8012ff0 <__kernel_rem_pio2+0x2e8>
 8012dbc:	ed9f ab8e 	vldr	d10, [pc, #568]	@ 8012ff8 <__kernel_rem_pio2+0x2f0>
 8012dc0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8012dc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012dc8:	9203      	str	r2, [sp, #12]
 8012dca:	9302      	str	r3, [sp, #8]
 8012dcc:	464c      	mov	r4, r9
 8012dce:	00e3      	lsls	r3, r4, #3
 8012dd0:	9304      	str	r3, [sp, #16]
 8012dd2:	ab92      	add	r3, sp, #584	@ 0x248
 8012dd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012dd8:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8012ddc:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8012dde:	ab06      	add	r3, sp, #24
 8012de0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012de4:	461e      	mov	r6, r3
 8012de6:	4620      	mov	r0, r4
 8012de8:	2800      	cmp	r0, #0
 8012dea:	dc4a      	bgt.n	8012e82 <__kernel_rem_pio2+0x17a>
 8012dec:	4628      	mov	r0, r5
 8012dee:	9305      	str	r3, [sp, #20]
 8012df0:	f000 f9fe 	bl	80131f0 <scalbn>
 8012df4:	eeb0 8b40 	vmov.f64	d8, d0
 8012df8:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8012dfc:	ee28 0b00 	vmul.f64	d0, d8, d0
 8012e00:	f000 fa72 	bl	80132e8 <floor>
 8012e04:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8012e08:	eea0 8b47 	vfms.f64	d8, d0, d7
 8012e0c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8012e10:	2d00      	cmp	r5, #0
 8012e12:	ee17 8a90 	vmov	r8, s15
 8012e16:	9b05      	ldr	r3, [sp, #20]
 8012e18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012e1c:	ee38 8b47 	vsub.f64	d8, d8, d7
 8012e20:	dd41      	ble.n	8012ea6 <__kernel_rem_pio2+0x19e>
 8012e22:	1e60      	subs	r0, r4, #1
 8012e24:	aa06      	add	r2, sp, #24
 8012e26:	f1c5 0c18 	rsb	ip, r5, #24
 8012e2a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8012e2e:	fa46 f20c 	asr.w	r2, r6, ip
 8012e32:	4490      	add	r8, r2
 8012e34:	fa02 f20c 	lsl.w	r2, r2, ip
 8012e38:	1ab6      	subs	r6, r6, r2
 8012e3a:	aa06      	add	r2, sp, #24
 8012e3c:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8012e40:	f1c5 0217 	rsb	r2, r5, #23
 8012e44:	4116      	asrs	r6, r2
 8012e46:	2e00      	cmp	r6, #0
 8012e48:	dd3c      	ble.n	8012ec4 <__kernel_rem_pio2+0x1bc>
 8012e4a:	f04f 0c00 	mov.w	ip, #0
 8012e4e:	f108 0801 	add.w	r8, r8, #1
 8012e52:	4660      	mov	r0, ip
 8012e54:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8012e58:	4564      	cmp	r4, ip
 8012e5a:	dc66      	bgt.n	8012f2a <__kernel_rem_pio2+0x222>
 8012e5c:	2d00      	cmp	r5, #0
 8012e5e:	dd03      	ble.n	8012e68 <__kernel_rem_pio2+0x160>
 8012e60:	2d01      	cmp	r5, #1
 8012e62:	d072      	beq.n	8012f4a <__kernel_rem_pio2+0x242>
 8012e64:	2d02      	cmp	r5, #2
 8012e66:	d07a      	beq.n	8012f5e <__kernel_rem_pio2+0x256>
 8012e68:	2e02      	cmp	r6, #2
 8012e6a:	d12b      	bne.n	8012ec4 <__kernel_rem_pio2+0x1bc>
 8012e6c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012e70:	ee30 8b48 	vsub.f64	d8, d0, d8
 8012e74:	b330      	cbz	r0, 8012ec4 <__kernel_rem_pio2+0x1bc>
 8012e76:	4628      	mov	r0, r5
 8012e78:	f000 f9ba 	bl	80131f0 <scalbn>
 8012e7c:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012e80:	e020      	b.n	8012ec4 <__kernel_rem_pio2+0x1bc>
 8012e82:	ee20 7b09 	vmul.f64	d7, d0, d9
 8012e86:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012e8a:	3801      	subs	r0, #1
 8012e8c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8012e90:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012e94:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012e98:	eca6 0a01 	vstmia	r6!, {s0}
 8012e9c:	ed32 0b02 	vldmdb	r2!, {d0}
 8012ea0:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012ea4:	e7a0      	b.n	8012de8 <__kernel_rem_pio2+0xe0>
 8012ea6:	d105      	bne.n	8012eb4 <__kernel_rem_pio2+0x1ac>
 8012ea8:	1e62      	subs	r2, r4, #1
 8012eaa:	a906      	add	r1, sp, #24
 8012eac:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8012eb0:	15f6      	asrs	r6, r6, #23
 8012eb2:	e7c8      	b.n	8012e46 <__kernel_rem_pio2+0x13e>
 8012eb4:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8012eb8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec0:	da31      	bge.n	8012f26 <__kernel_rem_pio2+0x21e>
 8012ec2:	2600      	movs	r6, #0
 8012ec4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ecc:	f040 809c 	bne.w	8013008 <__kernel_rem_pio2+0x300>
 8012ed0:	1e62      	subs	r2, r4, #1
 8012ed2:	2000      	movs	r0, #0
 8012ed4:	454a      	cmp	r2, r9
 8012ed6:	da49      	bge.n	8012f6c <__kernel_rem_pio2+0x264>
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	d062      	beq.n	8012fa2 <__kernel_rem_pio2+0x29a>
 8012edc:	3c01      	subs	r4, #1
 8012ede:	ab06      	add	r3, sp, #24
 8012ee0:	3d18      	subs	r5, #24
 8012ee2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d0f8      	beq.n	8012edc <__kernel_rem_pio2+0x1d4>
 8012eea:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012eee:	4628      	mov	r0, r5
 8012ef0:	f000 f97e 	bl	80131f0 <scalbn>
 8012ef4:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8012ff0 <__kernel_rem_pio2+0x2e8>
 8012ef8:	1c62      	adds	r2, r4, #1
 8012efa:	a96a      	add	r1, sp, #424	@ 0x1a8
 8012efc:	00d3      	lsls	r3, r2, #3
 8012efe:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012f02:	4622      	mov	r2, r4
 8012f04:	2a00      	cmp	r2, #0
 8012f06:	f280 80a9 	bge.w	801305c <__kernel_rem_pio2+0x354>
 8012f0a:	4622      	mov	r2, r4
 8012f0c:	2a00      	cmp	r2, #0
 8012f0e:	f2c0 80c7 	blt.w	80130a0 <__kernel_rem_pio2+0x398>
 8012f12:	a96a      	add	r1, sp, #424	@ 0x1a8
 8012f14:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8012f18:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8012fe8 <__kernel_rem_pio2+0x2e0>
 8012f1c:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8013004 <__kernel_rem_pio2+0x2fc>
 8012f20:	2000      	movs	r0, #0
 8012f22:	1aa1      	subs	r1, r4, r2
 8012f24:	e0b1      	b.n	801308a <__kernel_rem_pio2+0x382>
 8012f26:	2602      	movs	r6, #2
 8012f28:	e78f      	b.n	8012e4a <__kernel_rem_pio2+0x142>
 8012f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f2e:	b948      	cbnz	r0, 8012f44 <__kernel_rem_pio2+0x23c>
 8012f30:	b122      	cbz	r2, 8012f3c <__kernel_rem_pio2+0x234>
 8012f32:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8012f36:	f843 2c04 	str.w	r2, [r3, #-4]
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	f10c 0c01 	add.w	ip, ip, #1
 8012f40:	4610      	mov	r0, r2
 8012f42:	e789      	b.n	8012e58 <__kernel_rem_pio2+0x150>
 8012f44:	ebae 0202 	sub.w	r2, lr, r2
 8012f48:	e7f5      	b.n	8012f36 <__kernel_rem_pio2+0x22e>
 8012f4a:	1e62      	subs	r2, r4, #1
 8012f4c:	ab06      	add	r3, sp, #24
 8012f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f52:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012f56:	a906      	add	r1, sp, #24
 8012f58:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012f5c:	e784      	b.n	8012e68 <__kernel_rem_pio2+0x160>
 8012f5e:	1e62      	subs	r2, r4, #1
 8012f60:	ab06      	add	r3, sp, #24
 8012f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f66:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012f6a:	e7f4      	b.n	8012f56 <__kernel_rem_pio2+0x24e>
 8012f6c:	ab06      	add	r3, sp, #24
 8012f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f72:	3a01      	subs	r2, #1
 8012f74:	4318      	orrs	r0, r3
 8012f76:	e7ad      	b.n	8012ed4 <__kernel_rem_pio2+0x1cc>
 8012f78:	3301      	adds	r3, #1
 8012f7a:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	d0fa      	beq.n	8012f78 <__kernel_rem_pio2+0x270>
 8012f82:	9a04      	ldr	r2, [sp, #16]
 8012f84:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8012f88:	446a      	add	r2, sp
 8012f8a:	eb04 000b 	add.w	r0, r4, fp
 8012f8e:	a91a      	add	r1, sp, #104	@ 0x68
 8012f90:	1c66      	adds	r6, r4, #1
 8012f92:	3a98      	subs	r2, #152	@ 0x98
 8012f94:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8012f98:	4423      	add	r3, r4
 8012f9a:	42b3      	cmp	r3, r6
 8012f9c:	da04      	bge.n	8012fa8 <__kernel_rem_pio2+0x2a0>
 8012f9e:	461c      	mov	r4, r3
 8012fa0:	e715      	b.n	8012dce <__kernel_rem_pio2+0xc6>
 8012fa2:	9a03      	ldr	r2, [sp, #12]
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	e7e8      	b.n	8012f7a <__kernel_rem_pio2+0x272>
 8012fa8:	9902      	ldr	r1, [sp, #8]
 8012faa:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012fae:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8012fb2:	9104      	str	r1, [sp, #16]
 8012fb4:	ee07 1a90 	vmov	s15, r1
 8012fb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012fbc:	2400      	movs	r4, #0
 8012fbe:	eca0 7b02 	vstmia	r0!, {d7}
 8012fc2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8012fe8 <__kernel_rem_pio2+0x2e0>
 8012fc6:	4686      	mov	lr, r0
 8012fc8:	4554      	cmp	r4, sl
 8012fca:	dd03      	ble.n	8012fd4 <__kernel_rem_pio2+0x2cc>
 8012fcc:	eca2 7b02 	vstmia	r2!, {d7}
 8012fd0:	3601      	adds	r6, #1
 8012fd2:	e7e2      	b.n	8012f9a <__kernel_rem_pio2+0x292>
 8012fd4:	ecbc 5b02 	vldmia	ip!, {d5}
 8012fd8:	ed3e 6b02 	vldmdb	lr!, {d6}
 8012fdc:	3401      	adds	r4, #1
 8012fde:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012fe2:	e7f1      	b.n	8012fc8 <__kernel_rem_pio2+0x2c0>
 8012fe4:	f3af 8000 	nop.w
	...
 8012ff4:	3e700000 	.word	0x3e700000
 8012ff8:	00000000 	.word	0x00000000
 8012ffc:	41700000 	.word	0x41700000
 8013000:	08026e20 	.word	0x08026e20
 8013004:	08026de0 	.word	0x08026de0
 8013008:	4268      	negs	r0, r5
 801300a:	eeb0 0b48 	vmov.f64	d0, d8
 801300e:	f000 f8ef 	bl	80131f0 <scalbn>
 8013012:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 80131d8 <__kernel_rem_pio2+0x4d0>
 8013016:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801301e:	db17      	blt.n	8013050 <__kernel_rem_pio2+0x348>
 8013020:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 80131e0 <__kernel_rem_pio2+0x4d8>
 8013024:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013028:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801302c:	aa06      	add	r2, sp, #24
 801302e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8013032:	eea5 0b46 	vfms.f64	d0, d5, d6
 8013036:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801303a:	3518      	adds	r5, #24
 801303c:	ee10 3a10 	vmov	r3, s0
 8013040:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013044:	ee17 3a10 	vmov	r3, s14
 8013048:	3401      	adds	r4, #1
 801304a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801304e:	e74c      	b.n	8012eea <__kernel_rem_pio2+0x1e2>
 8013050:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013054:	aa06      	add	r2, sp, #24
 8013056:	ee10 3a10 	vmov	r3, s0
 801305a:	e7f6      	b.n	801304a <__kernel_rem_pio2+0x342>
 801305c:	a806      	add	r0, sp, #24
 801305e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013062:	9001      	str	r0, [sp, #4]
 8013064:	ee07 0a90 	vmov	s15, r0
 8013068:	3a01      	subs	r2, #1
 801306a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801306e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8013072:	ee20 0b06 	vmul.f64	d0, d0, d6
 8013076:	ed21 7b02 	vstmdb	r1!, {d7}
 801307a:	e743      	b.n	8012f04 <__kernel_rem_pio2+0x1fc>
 801307c:	ecbc 5b02 	vldmia	ip!, {d5}
 8013080:	ecb5 6b02 	vldmia	r5!, {d6}
 8013084:	3001      	adds	r0, #1
 8013086:	eea5 7b06 	vfma.f64	d7, d5, d6
 801308a:	4548      	cmp	r0, r9
 801308c:	dc01      	bgt.n	8013092 <__kernel_rem_pio2+0x38a>
 801308e:	4288      	cmp	r0, r1
 8013090:	ddf4      	ble.n	801307c <__kernel_rem_pio2+0x374>
 8013092:	a842      	add	r0, sp, #264	@ 0x108
 8013094:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013098:	ed81 7b00 	vstr	d7, [r1]
 801309c:	3a01      	subs	r2, #1
 801309e:	e735      	b.n	8012f0c <__kernel_rem_pio2+0x204>
 80130a0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80130a2:	2a02      	cmp	r2, #2
 80130a4:	dc0a      	bgt.n	80130bc <__kernel_rem_pio2+0x3b4>
 80130a6:	2a00      	cmp	r2, #0
 80130a8:	dc29      	bgt.n	80130fe <__kernel_rem_pio2+0x3f6>
 80130aa:	d042      	beq.n	8013132 <__kernel_rem_pio2+0x42a>
 80130ac:	f008 0007 	and.w	r0, r8, #7
 80130b0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80130b4:	ecbd 8b06 	vpop	{d8-d10}
 80130b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130bc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80130be:	2a03      	cmp	r2, #3
 80130c0:	d1f4      	bne.n	80130ac <__kernel_rem_pio2+0x3a4>
 80130c2:	a942      	add	r1, sp, #264	@ 0x108
 80130c4:	f1a3 0208 	sub.w	r2, r3, #8
 80130c8:	440a      	add	r2, r1
 80130ca:	4611      	mov	r1, r2
 80130cc:	4620      	mov	r0, r4
 80130ce:	2800      	cmp	r0, #0
 80130d0:	dc50      	bgt.n	8013174 <__kernel_rem_pio2+0x46c>
 80130d2:	4621      	mov	r1, r4
 80130d4:	2901      	cmp	r1, #1
 80130d6:	dc5d      	bgt.n	8013194 <__kernel_rem_pio2+0x48c>
 80130d8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80131e8 <__kernel_rem_pio2+0x4e0>
 80130dc:	aa42      	add	r2, sp, #264	@ 0x108
 80130de:	4413      	add	r3, r2
 80130e0:	2c01      	cmp	r4, #1
 80130e2:	dc67      	bgt.n	80131b4 <__kernel_rem_pio2+0x4ac>
 80130e4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80130e8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80130ec:	2e00      	cmp	r6, #0
 80130ee:	d167      	bne.n	80131c0 <__kernel_rem_pio2+0x4b8>
 80130f0:	ed87 5b00 	vstr	d5, [r7]
 80130f4:	ed87 6b02 	vstr	d6, [r7, #8]
 80130f8:	ed87 7b04 	vstr	d7, [r7, #16]
 80130fc:	e7d6      	b.n	80130ac <__kernel_rem_pio2+0x3a4>
 80130fe:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80131e8 <__kernel_rem_pio2+0x4e0>
 8013102:	aa42      	add	r2, sp, #264	@ 0x108
 8013104:	4413      	add	r3, r2
 8013106:	4622      	mov	r2, r4
 8013108:	2a00      	cmp	r2, #0
 801310a:	da24      	bge.n	8013156 <__kernel_rem_pio2+0x44e>
 801310c:	b34e      	cbz	r6, 8013162 <__kernel_rem_pio2+0x45a>
 801310e:	eeb1 7b46 	vneg.f64	d7, d6
 8013112:	ed87 7b00 	vstr	d7, [r7]
 8013116:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801311a:	aa44      	add	r2, sp, #272	@ 0x110
 801311c:	2301      	movs	r3, #1
 801311e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013122:	429c      	cmp	r4, r3
 8013124:	da20      	bge.n	8013168 <__kernel_rem_pio2+0x460>
 8013126:	b10e      	cbz	r6, 801312c <__kernel_rem_pio2+0x424>
 8013128:	eeb1 7b47 	vneg.f64	d7, d7
 801312c:	ed87 7b02 	vstr	d7, [r7, #8]
 8013130:	e7bc      	b.n	80130ac <__kernel_rem_pio2+0x3a4>
 8013132:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80131e8 <__kernel_rem_pio2+0x4e0>
 8013136:	aa42      	add	r2, sp, #264	@ 0x108
 8013138:	4413      	add	r3, r2
 801313a:	2c00      	cmp	r4, #0
 801313c:	da05      	bge.n	801314a <__kernel_rem_pio2+0x442>
 801313e:	b10e      	cbz	r6, 8013144 <__kernel_rem_pio2+0x43c>
 8013140:	eeb1 7b47 	vneg.f64	d7, d7
 8013144:	ed87 7b00 	vstr	d7, [r7]
 8013148:	e7b0      	b.n	80130ac <__kernel_rem_pio2+0x3a4>
 801314a:	ed33 6b02 	vldmdb	r3!, {d6}
 801314e:	3c01      	subs	r4, #1
 8013150:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013154:	e7f1      	b.n	801313a <__kernel_rem_pio2+0x432>
 8013156:	ed33 7b02 	vldmdb	r3!, {d7}
 801315a:	3a01      	subs	r2, #1
 801315c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8013160:	e7d2      	b.n	8013108 <__kernel_rem_pio2+0x400>
 8013162:	eeb0 7b46 	vmov.f64	d7, d6
 8013166:	e7d4      	b.n	8013112 <__kernel_rem_pio2+0x40a>
 8013168:	ecb2 6b02 	vldmia	r2!, {d6}
 801316c:	3301      	adds	r3, #1
 801316e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013172:	e7d6      	b.n	8013122 <__kernel_rem_pio2+0x41a>
 8013174:	ed31 7b02 	vldmdb	r1!, {d7}
 8013178:	ed91 5b02 	vldr	d5, [r1, #8]
 801317c:	3801      	subs	r0, #1
 801317e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8013182:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013186:	ed81 6b00 	vstr	d6, [r1]
 801318a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801318e:	ed81 7b02 	vstr	d7, [r1, #8]
 8013192:	e79c      	b.n	80130ce <__kernel_rem_pio2+0x3c6>
 8013194:	ed32 7b02 	vldmdb	r2!, {d7}
 8013198:	ed92 5b02 	vldr	d5, [r2, #8]
 801319c:	3901      	subs	r1, #1
 801319e:	ee37 6b05 	vadd.f64	d6, d7, d5
 80131a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80131a6:	ed82 6b00 	vstr	d6, [r2]
 80131aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 80131ae:	ed82 7b02 	vstr	d7, [r2, #8]
 80131b2:	e78f      	b.n	80130d4 <__kernel_rem_pio2+0x3cc>
 80131b4:	ed33 6b02 	vldmdb	r3!, {d6}
 80131b8:	3c01      	subs	r4, #1
 80131ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80131be:	e78f      	b.n	80130e0 <__kernel_rem_pio2+0x3d8>
 80131c0:	eeb1 5b45 	vneg.f64	d5, d5
 80131c4:	eeb1 6b46 	vneg.f64	d6, d6
 80131c8:	ed87 5b00 	vstr	d5, [r7]
 80131cc:	eeb1 7b47 	vneg.f64	d7, d7
 80131d0:	ed87 6b02 	vstr	d6, [r7, #8]
 80131d4:	e790      	b.n	80130f8 <__kernel_rem_pio2+0x3f0>
 80131d6:	bf00      	nop
 80131d8:	00000000 	.word	0x00000000
 80131dc:	41700000 	.word	0x41700000
 80131e0:	00000000 	.word	0x00000000
 80131e4:	3e700000 	.word	0x3e700000
	...

080131f0 <scalbn>:
 80131f0:	ee10 1a90 	vmov	r1, s1
 80131f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80131f8:	b98b      	cbnz	r3, 801321e <scalbn+0x2e>
 80131fa:	ee10 3a10 	vmov	r3, s0
 80131fe:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8013202:	4319      	orrs	r1, r3
 8013204:	d00a      	beq.n	801321c <scalbn+0x2c>
 8013206:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80132b0 <scalbn+0xc0>
 801320a:	4b35      	ldr	r3, [pc, #212]	@ (80132e0 <scalbn+0xf0>)
 801320c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013210:	4298      	cmp	r0, r3
 8013212:	da0b      	bge.n	801322c <scalbn+0x3c>
 8013214:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80132b8 <scalbn+0xc8>
 8013218:	ee20 0b07 	vmul.f64	d0, d0, d7
 801321c:	4770      	bx	lr
 801321e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013222:	4293      	cmp	r3, r2
 8013224:	d107      	bne.n	8013236 <scalbn+0x46>
 8013226:	ee30 0b00 	vadd.f64	d0, d0, d0
 801322a:	4770      	bx	lr
 801322c:	ee10 1a90 	vmov	r1, s1
 8013230:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013234:	3b36      	subs	r3, #54	@ 0x36
 8013236:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801323a:	4290      	cmp	r0, r2
 801323c:	dd0d      	ble.n	801325a <scalbn+0x6a>
 801323e:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 80132c0 <scalbn+0xd0>
 8013242:	ee10 3a90 	vmov	r3, s1
 8013246:	eeb0 6b47 	vmov.f64	d6, d7
 801324a:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 80132c8 <scalbn+0xd8>
 801324e:	2b00      	cmp	r3, #0
 8013250:	fe27 7b05 	vselge.f64	d7, d7, d5
 8013254:	ee27 0b06 	vmul.f64	d0, d7, d6
 8013258:	4770      	bx	lr
 801325a:	4418      	add	r0, r3
 801325c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8013260:	4298      	cmp	r0, r3
 8013262:	dcec      	bgt.n	801323e <scalbn+0x4e>
 8013264:	2800      	cmp	r0, #0
 8013266:	dd08      	ble.n	801327a <scalbn+0x8a>
 8013268:	ec53 2b10 	vmov	r2, r3, d0
 801326c:	f36f 511e 	bfc	r1, #20, #11
 8013270:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8013274:	ec43 2b10 	vmov	d0, r2, r3
 8013278:	4770      	bx	lr
 801327a:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801327e:	da09      	bge.n	8013294 <scalbn+0xa4>
 8013280:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80132b8 <scalbn+0xc8>
 8013284:	ee10 3a90 	vmov	r3, s1
 8013288:	eeb0 6b47 	vmov.f64	d6, d7
 801328c:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80132d0 <scalbn+0xe0>
 8013290:	2b00      	cmp	r3, #0
 8013292:	e7dd      	b.n	8013250 <scalbn+0x60>
 8013294:	ec53 2b10 	vmov	r2, r3, d0
 8013298:	3036      	adds	r0, #54	@ 0x36
 801329a:	f36f 511e 	bfc	r1, #20, #11
 801329e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80132a2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80132d8 <scalbn+0xe8>
 80132a6:	ec43 2b10 	vmov	d0, r2, r3
 80132aa:	e7b5      	b.n	8013218 <scalbn+0x28>
 80132ac:	f3af 8000 	nop.w
 80132b0:	00000000 	.word	0x00000000
 80132b4:	43500000 	.word	0x43500000
 80132b8:	c2f8f359 	.word	0xc2f8f359
 80132bc:	01a56e1f 	.word	0x01a56e1f
 80132c0:	8800759c 	.word	0x8800759c
 80132c4:	7e37e43c 	.word	0x7e37e43c
 80132c8:	8800759c 	.word	0x8800759c
 80132cc:	fe37e43c 	.word	0xfe37e43c
 80132d0:	c2f8f359 	.word	0xc2f8f359
 80132d4:	81a56e1f 	.word	0x81a56e1f
 80132d8:	00000000 	.word	0x00000000
 80132dc:	3c900000 	.word	0x3c900000
 80132e0:	ffff3cb0 	.word	0xffff3cb0
 80132e4:	00000000 	.word	0x00000000

080132e8 <floor>:
 80132e8:	ee10 3a90 	vmov	r3, s1
 80132ec:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80132f0:	ee10 2a10 	vmov	r2, s0
 80132f4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80132f8:	2913      	cmp	r1, #19
 80132fa:	b530      	push	{r4, r5, lr}
 80132fc:	4615      	mov	r5, r2
 80132fe:	dc33      	bgt.n	8013368 <floor+0x80>
 8013300:	2900      	cmp	r1, #0
 8013302:	da18      	bge.n	8013336 <floor+0x4e>
 8013304:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80133c8 <floor+0xe0>
 8013308:	ee30 0b07 	vadd.f64	d0, d0, d7
 801330c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013314:	dd0a      	ble.n	801332c <floor+0x44>
 8013316:	2b00      	cmp	r3, #0
 8013318:	da50      	bge.n	80133bc <floor+0xd4>
 801331a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801331e:	4313      	orrs	r3, r2
 8013320:	2200      	movs	r2, #0
 8013322:	4293      	cmp	r3, r2
 8013324:	4b2a      	ldr	r3, [pc, #168]	@ (80133d0 <floor+0xe8>)
 8013326:	bf08      	it	eq
 8013328:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801332c:	4619      	mov	r1, r3
 801332e:	4610      	mov	r0, r2
 8013330:	ec41 0b10 	vmov	d0, r0, r1
 8013334:	e01f      	b.n	8013376 <floor+0x8e>
 8013336:	4827      	ldr	r0, [pc, #156]	@ (80133d4 <floor+0xec>)
 8013338:	4108      	asrs	r0, r1
 801333a:	ea03 0400 	and.w	r4, r3, r0
 801333e:	4314      	orrs	r4, r2
 8013340:	d019      	beq.n	8013376 <floor+0x8e>
 8013342:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80133c8 <floor+0xe0>
 8013346:	ee30 0b07 	vadd.f64	d0, d0, d7
 801334a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801334e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013352:	ddeb      	ble.n	801332c <floor+0x44>
 8013354:	2b00      	cmp	r3, #0
 8013356:	bfbe      	ittt	lt
 8013358:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801335c:	410a      	asrlt	r2, r1
 801335e:	189b      	addlt	r3, r3, r2
 8013360:	ea23 0300 	bic.w	r3, r3, r0
 8013364:	2200      	movs	r2, #0
 8013366:	e7e1      	b.n	801332c <floor+0x44>
 8013368:	2933      	cmp	r1, #51	@ 0x33
 801336a:	dd05      	ble.n	8013378 <floor+0x90>
 801336c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013370:	d101      	bne.n	8013376 <floor+0x8e>
 8013372:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013376:	bd30      	pop	{r4, r5, pc}
 8013378:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801337c:	f04f 30ff 	mov.w	r0, #4294967295
 8013380:	40e0      	lsrs	r0, r4
 8013382:	4210      	tst	r0, r2
 8013384:	d0f7      	beq.n	8013376 <floor+0x8e>
 8013386:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80133c8 <floor+0xe0>
 801338a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801338e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013396:	ddc9      	ble.n	801332c <floor+0x44>
 8013398:	2b00      	cmp	r3, #0
 801339a:	da02      	bge.n	80133a2 <floor+0xba>
 801339c:	2914      	cmp	r1, #20
 801339e:	d103      	bne.n	80133a8 <floor+0xc0>
 80133a0:	3301      	adds	r3, #1
 80133a2:	ea22 0200 	bic.w	r2, r2, r0
 80133a6:	e7c1      	b.n	801332c <floor+0x44>
 80133a8:	2401      	movs	r4, #1
 80133aa:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 80133ae:	fa04 f101 	lsl.w	r1, r4, r1
 80133b2:	440a      	add	r2, r1
 80133b4:	42aa      	cmp	r2, r5
 80133b6:	bf38      	it	cc
 80133b8:	191b      	addcc	r3, r3, r4
 80133ba:	e7f2      	b.n	80133a2 <floor+0xba>
 80133bc:	2200      	movs	r2, #0
 80133be:	4613      	mov	r3, r2
 80133c0:	e7b4      	b.n	801332c <floor+0x44>
 80133c2:	bf00      	nop
 80133c4:	f3af 8000 	nop.w
 80133c8:	8800759c 	.word	0x8800759c
 80133cc:	7e37e43c 	.word	0x7e37e43c
 80133d0:	bff00000 	.word	0xbff00000
 80133d4:	000fffff 	.word	0x000fffff

080133d8 <_init>:
 80133d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133da:	bf00      	nop
 80133dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133de:	bc08      	pop	{r3}
 80133e0:	469e      	mov	lr, r3
 80133e2:	4770      	bx	lr

080133e4 <_fini>:
 80133e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133e6:	bf00      	nop
 80133e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133ea:	bc08      	pop	{r3}
 80133ec:	469e      	mov	lr, r3
 80133ee:	4770      	bx	lr
